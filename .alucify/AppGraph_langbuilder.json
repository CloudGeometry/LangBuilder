{
  "metadata": {
    "name": "LangBuilder Application Graph",
    "version": "1.0",
    "description": "Complete application architecture graph with interface, logic, and schema layers",
    "generated_from": [
      "InterfaceSchemaSubgraph.json",
      "InterfaceLogicSubgraph.json",
      "LogicSchemaSubgraph.json"
    ],
    "node_types": [
      "interface",
      "logic",
      "schema"
    ],
    "edge_types": [
      "composition",
      "navigation",
      "dependency",
      "event",
      "manages",
      "views",
      "relationship"
    ],
    "audit_fixes": {
      "interface_nodes_removed": [
        "filesPage",
        "homePage",
        "messagesPage"
      ],
      "schema_nodes_renamed": {
        "Message": "MessageTable",
        "Transaction": "TransactionTable",
        "VertexBuild": "VertexBuildTable"
      },
      "nodes_before": 246,
      "nodes_after": 243,
      "edges_before": 206,
      "edges_after": 181
    }
  },
  "nodes": [
    {
      "id": "ni0001",
      "type": "interface",
      "name": "AdminPage",
      "description": "Interface page: AdminPage",
      "route": "",
      "path": "src/frontend/src/pages/AdminPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "AdminPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "inputValue": {
            "type": "string",
            "defaultValue": "\"\""
          },
          "size": {
            "type": "any",
            "defaultValue": "PAGINATION_SIZE"
          },
          "index": {
            "type": "any",
            "defaultValue": "PAGINATION_PAGE"
          },
          "totalRowsCount": {
            "type": "number",
            "defaultValue": "0"
          },
          "filterUserList": {
            "type": "any",
            "defaultValue": "userList.current"
          }
        },
        "node": {
          "type": "conditional",
          "content": {
            "reference": {
              "type": "dynamic",
              "content": {
                "referenceType": "function",
                "id": "userData"
              }
            },
            "value": true,
            "node": {
              "type": "element",
              "content": {
                "elementType": "div",
                "name": "div",
                "attrs": {
                  "className": {
                    "type": "static",
                    "content": "admin-page-panel flex h-full flex-col pb-8"
                  }
                },
                "children": [
                  {
                    "type": "element",
                    "content": {
                      "elementType": "div",
                      "name": "div",
                      "attrs": {
                        "className": {
                          "type": "static",
                          "content": "main-page-nav-arrangement"
                        }
                      },
                      "children": [
                        {
                          "type": "element",
                          "content": {
                            "elementType": "span",
                            "name": "span",
                            "attrs": {
                              "className": {
                                "type": "static",
                                "content": "main-page-nav-title"
                              }
                            },
                            "children": [
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "iconComponent",
                                  "semanticType": "IconComponent",
                                  "attrs": {
                                    "name": {
                                      "type": "static",
                                      "content": "Shield"
                                    },
                                    "className": {
                                      "type": "static",
                                      "content": "w-6"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "container",
                                  "name": "content"
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "type": "element",
                    "content": {
                      "elementType": "span",
                      "name": "span",
                      "attrs": {
                        "className": {
                          "type": "static",
                          "content": "admin-page-description-text"
                        }
                      },
                      "children": [
                        {
                          "type": "element",
                          "content": {
                            "elementType": "container",
                            "name": "content"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "type": "element",
                    "content": {
                      "elementType": "div",
                      "name": "div",
                      "attrs": {
                        "className": {
                          "type": "static",
                          "content": "flex w-full justify-between px-4"
                        }
                      },
                      "children": [
                        {
                          "type": "element",
                          "content": {
                            "elementType": "div",
                            "name": "div",
                            "attrs": {
                              "className": {
                                "type": "static",
                                "content": "flex w-96 items-center gap-4"
                              }
                            },
                            "children": [
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "input",
                                  "semanticType": "Input",
                                  "attrs": {
                                    "placeholder": {
                                      "type": "static",
                                      "content": "Search Username"
                                    },
                                    "value": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "state",
                                        "id": "inputValue"
                                      }
                                    },
                                    "onChange": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "inlineFunction"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "conditional",
                                "content": {
                                  "reference": {
                                    "type": "static",
                                    "content": "unknown"
                                  },
                                  "value": true,
                                  "node": {
                                    "type": "element",
                                    "content": {
                                      "elementType": "div",
                                      "name": "div",
                                      "attrs": {
                                        "className": {
                                          "type": "static",
                                          "content": "cursor-pointer"
                                        },
                                        "onClick": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "function",
                                            "id": "inlineFunction"
                                          }
                                        }
                                      },
                                      "children": [
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "component",
                                            "name": "iconComponent",
                                            "semanticType": "IconComponent",
                                            "attrs": {
                                              "name": {
                                                "type": "static",
                                                "content": "X"
                                              },
                                              "className": {
                                                "type": "static",
                                                "content": "w-6 text-foreground"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "fallbackNode": {
                                    "type": "element",
                                    "content": {
                                      "elementType": "div",
                                      "name": "div",
                                      "children": [
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "component",
                                            "name": "iconComponent",
                                            "semanticType": "IconComponent",
                                            "attrs": {
                                              "name": {
                                                "type": "static",
                                                "content": "Search"
                                              },
                                              "className": {
                                                "type": "static",
                                                "content": "w-6 text-foreground"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "element",
                          "content": {
                            "elementType": "div",
                            "name": "div",
                            "children": [
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "userManagementModal",
                                  "semanticType": "UserManagementModal",
                                  "attrs": {
                                    "title": {
                                      "type": "static",
                                      "content": "New User"
                                    },
                                    "titleHeader": {
                                      "type": "static",
                                      "content": "Add a new user"
                                    },
                                    "cancelText": {
                                      "type": "static",
                                      "content": "Cancel"
                                    },
                                    "confirmationText": {
                                      "type": "static",
                                      "content": "Save"
                                    },
                                    "icon": {
                                      "type": "static",
                                      "content": "UserPlus2"
                                    },
                                    "onConfirm": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "inlineFunction"
                                      }
                                    },
                                    "asChild": {
                                      "type": "static",
                                      "content": true
                                    }
                                  },
                                  "children": [
                                    {
                                      "type": "element",
                                      "content": {
                                        "elementType": "component",
                                        "name": "button",
                                        "semanticType": "Button",
                                        "attrs": {
                                          "variant": {
                                            "type": "static",
                                            "content": "primary"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "type": "conditional",
                    "content": {
                      "reference": {
                        "type": "static",
                        "content": "unknown"
                      },
                      "value": true,
                      "node": {
                        "type": "element",
                        "content": {
                          "elementType": "div",
                          "name": "div",
                          "attrs": {
                            "className": {
                              "type": "static",
                              "content": "flex h-full w-full items-center justify-center"
                            }
                          },
                          "children": [
                            {
                              "type": "element",
                              "content": {
                                "elementType": "component",
                                "name": "customLoader",
                                "semanticType": "CustomLoader",
                                "attrs": {
                                  "remSize": {
                                    "type": "static",
                                    "content": 12
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "fallbackNode": {
                        "type": "conditional",
                        "content": {
                          "reference": {
                            "type": "static",
                            "content": "unknown"
                          },
                          "value": true,
                          "node": {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "m-4 flex items-center justify-between text-sm"
                                }
                              }
                            }
                          },
                          "fallbackNode": {
                            "type": "element",
                            "content": {
                              "elementType": "fragment",
                              "name": "fragmentContainer",
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "div",
                                    "name": "div",
                                    "attrs": {
                                      "className": {
                                        "type": "static",
                                        "content": "unknown"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "table",
                                          "semanticType": "Table",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "table-fixed outline-1"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "tableHeader",
                                                "semanticType": "TableHeader",
                                                "attrs": {
                                                  "className": {
                                                    "type": "static",
                                                    "content": "unknown"
                                                  }
                                                },
                                                "children": [
                                                  {
                                                    "type": "element",
                                                    "content": {
                                                      "elementType": "component",
                                                      "name": "tableRow",
                                                      "semanticType": "TableRow",
                                                      "children": [
                                                        {
                                                          "type": "element",
                                                          "content": {
                                                            "elementType": "component",
                                                            "name": "tableHead",
                                                            "semanticType": "TableHead",
                                                            "attrs": {
                                                              "className": {
                                                                "type": "static",
                                                                "content": "h-10"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "element",
                                                          "content": {
                                                            "elementType": "component",
                                                            "name": "tableHead",
                                                            "semanticType": "TableHead",
                                                            "attrs": {
                                                              "className": {
                                                                "type": "static",
                                                                "content": "h-10"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "element",
                                                          "content": {
                                                            "elementType": "component",
                                                            "name": "tableHead",
                                                            "semanticType": "TableHead",
                                                            "attrs": {
                                                              "className": {
                                                                "type": "static",
                                                                "content": "h-10"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "element",
                                                          "content": {
                                                            "elementType": "component",
                                                            "name": "tableHead",
                                                            "semanticType": "TableHead",
                                                            "attrs": {
                                                              "className": {
                                                                "type": "static",
                                                                "content": "h-10"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "element",
                                                          "content": {
                                                            "elementType": "component",
                                                            "name": "tableHead",
                                                            "semanticType": "TableHead",
                                                            "attrs": {
                                                              "className": {
                                                                "type": "static",
                                                                "content": "h-10"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "element",
                                                          "content": {
                                                            "elementType": "component",
                                                            "name": "tableHead",
                                                            "semanticType": "TableHead",
                                                            "attrs": {
                                                              "className": {
                                                                "type": "static",
                                                                "content": "h-10"
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "element",
                                                          "content": {
                                                            "elementType": "component",
                                                            "name": "tableHead",
                                                            "semanticType": "TableHead",
                                                            "attrs": {
                                                              "className": {
                                                                "type": "static",
                                                                "content": "h-10 w-[100px] text-right"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "conditional",
                                              "content": {
                                                "reference": {
                                                  "type": "dynamic",
                                                  "content": {
                                                    "referenceType": "function",
                                                    "id": "isPending",
                                                    "operator": "!"
                                                  }
                                                },
                                                "value": true,
                                                "node": {
                                                  "type": "element",
                                                  "content": {
                                                    "elementType": "component",
                                                    "name": "tableBody",
                                                    "semanticType": "TableBody",
                                                    "children": [
                                                      {
                                                        "type": "element",
                                                        "content": {
                                                          "elementType": "container",
                                                          "name": "content"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "paginatorComponent",
                                    "semanticType": "PaginatorComponent",
                                    "attrs": {
                                      "pageIndex": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "index"
                                        }
                                      },
                                      "pageSize": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "size"
                                        }
                                      },
                                      "totalRowsCount": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "totalRowsCount"
                                        }
                                      },
                                      "paginate": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "handleChangePagination"
                                        }
                                      },
                                      "rowsCount": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "PAGINATION_ROWS_COUNT"
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "behaviors": {
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useContext": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useDeleteUsers": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useUpdateUser": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAddUser": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetUsers": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0002",
      "type": "interface",
      "name": "ApiKeysPage",
      "description": "Interface page: ApiKeysPage",
      "route": "api-keys",
      "path": "src/frontend/src/pages/SettingsPage/pages/ApiKeysPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "ApiKeysPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "selectedRows": {
            "type": "string[]",
            "defaultValue": "[]"
          },
          "userId": {
            "type": "string",
            "defaultValue": "\"\""
          },
          "keysList": {
            "type": "IApiKeysDataArray[]",
            "defaultValue": "[]"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col justify-between gap-6"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "apiKeyHeaderComponent",
                  "semanticType": "ApiKeyHeaderComponent",
                  "attrs": {
                    "selectedRows": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "selectedRows"
                      }
                    },
                    "fetchApiKeys": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "getApiKeysQuery"
                      }
                    },
                    "userId": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "userId"
                      }
                    }
                  }
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex h-full w-full flex-col justify-between"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "tableComponent",
                        "semanticType": "TableComponent",
                        "attrs": {
                          "key": {
                            "type": "static",
                            "content": "apiKeys"
                          },
                          "onDelete": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "handleDeleteApi"
                            }
                          },
                          "overlayNoRowsTemplate": {
                            "type": "static",
                            "content": "No data available"
                          },
                          "onSelectionChanged": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "inlineFunction"
                            }
                          },
                          "rowSelection": {
                            "type": "static",
                            "content": "multiple"
                          },
                          "suppressRowClickSelection": {
                            "type": "static",
                            "content": true
                          },
                          "pagination": {
                            "type": "static",
                            "content": true
                          },
                          "columnDefs": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "columnDefs"
                            }
                          },
                          "rowData": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "state",
                              "id": "keysList"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useContext": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetApiKeysQuery": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useDeleteApiKey": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0003",
      "type": "interface",
      "name": "AppAuthenticatedPage",
      "description": "Interface page: AppAuthenticatedPage",
      "route": "",
      "path": "src/frontend/src/pages/AppAuthenticatedPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "AppAuthenticatedPage",
        "propDefinitions": {},
        "stateDefinitions": {},
        "node": {
          "type": "element",
          "content": {
            "elementType": "component",
            "name": "Outlet",
            "semanticType": "Outlet"
          }
        },
        "behaviors": {
          "useCustomPostAuth": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0004",
      "type": "interface",
      "name": "AppInitPage",
      "description": "Interface page: AppInitPage",
      "route": "",
      "path": "src/frontend/src/pages/AppInitPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "AppInitPage",
        "propDefinitions": {},
        "stateDefinitions": {},
        "node": {
          "type": "element",
          "content": {
            "elementType": "fragment",
            "name": "fragmentContainer",
            "children": [
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "function",
                      "id": "isLoaded"
                    }
                  },
                  "value": true,
                  "node": {
                    "type": "conditional",
                    "content": {
                      "reference": {
                        "type": "static",
                        "content": "unknown"
                      },
                      "value": true,
                      "node": {
                        "type": "element",
                        "content": {
                          "elementType": "component",
                          "name": "loadingPage",
                          "semanticType": "LoadingPage",
                          "attrs": {
                            "overlay": {
                              "type": "static",
                              "content": true
                            }
                          }
                        }
                      }
                    }
                  },
                  "fallbackNode": {
                    "type": "element",
                    "content": {
                      "elementType": "component",
                      "name": "customLoadingPage",
                      "semanticType": "CustomLoadingPage"
                    }
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "static",
                    "content": "unknown"
                  },
                  "value": true,
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "component",
                      "name": "outlet",
                      "semanticType": "Outlet"
                    }
                  }
                }
              }
            ]
          }
        },
        "behaviors": {
          "useDarkStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useFlowsManagerStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useCustomPrimaryLoading": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetAutoLogin": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetVersionQuery": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetConfig": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetGlobalVariables": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetTagsQuery": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetFoldersQuery": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetBasicExamplesQuery": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0005",
      "type": "interface",
      "name": "AppWrapperPage",
      "description": "Interface page: AppWrapperPage",
      "route": "",
      "path": "src/frontend/src/pages/AppWrapperPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "AppWrapperPage",
        "propDefinitions": {},
        "stateDefinitions": {},
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "errorBoundary",
                  "semanticType": "ErrorBoundary",
                  "attrs": {
                    "onReset": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "inlineFunction"
                      }
                    },
                    "FallbackComponent": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "CrashErrorComponent"
                      }
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "fragment",
                        "name": "fragmentContainer",
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "genericErrorComponent",
                              "semanticType": "GenericErrorComponent",
                              "attrs": {
                                "healthCheckTimeout": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "function",
                                    "id": "healthCheckTimeout"
                                  }
                                },
                                "fetching": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "function",
                                    "id": "fetchingHealth"
                                  }
                                },
                                "retry": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "function",
                                    "id": "refetch"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "outlet",
                              "semanticType": "Outlet"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "app-div"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "alertDisplayArea",
                        "semanticType": "AlertDisplayArea"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useHealthCheck": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0006",
      "type": "interface",
      "name": "CollectionPage",
      "description": "Interface page: CollectionPage",
      "route": "",
      "path": "src/frontend/src/pages/MainPage/pages/main-page.tsx",
      "uidl_definition_conceptual": {
        "name": "CollectionPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "openModal": {
            "type": "boolean",
            "defaultValue": "false"
          },
          "openDeleteFolderModal": {
            "type": "boolean",
            "defaultValue": "false"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "component",
            "name": "sidebarProvider",
            "semanticType": "SidebarProvider",
            "attrs": {
              "width": {
                "type": "static",
                "content": "280px"
              }
            },
            "children": [
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "static",
                    "content": "unknown"
                  },
                  "value": true,
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "component",
                      "name": "sideBarFoldersButtonsComponent",
                      "semanticType": "SideBarFoldersButtonsComponent",
                      "attrs": {
                        "handleChangeFolder": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "inlineFunction"
                          }
                        },
                        "handleDeleteFolder": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "inlineFunction"
                          }
                        },
                        "handleFilesClick": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "inlineFunction"
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "main",
                  "name": "main",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex h-full w-full overflow-hidden"
                    }
                  },
                  "children": [
                    {
                      "type": "conditional",
                      "content": {
                        "reference": {
                          "type": "static",
                          "content": "unknown"
                        },
                        "value": true,
                        "node": {
                          "type": "element",
                          "content": {
                            "elementType": "div",
                            "name": "div",
                            "attrs": {
                              "className": {
                                "type": "static",
                                "content": "unknown"
                              }
                            },
                            "children": [
                              {
                                "type": "conditional",
                                "content": {
                                  "reference": {
                                    "type": "static",
                                    "content": "unknown"
                                  },
                                  "value": true,
                                  "node": {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "name": "outlet",
                                      "semanticType": "Outlet"
                                    }
                                  },
                                  "fallbackNode": {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "name": "customEmptyPageCommunity",
                                      "semanticType": "CustomEmptyPageCommunity",
                                      "attrs": {
                                        "setOpenModal": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "function",
                                            "id": "setOpenModal"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "fallbackNode": {
                          "type": "element",
                          "content": {
                            "elementType": "div",
                            "name": "div",
                            "attrs": {
                              "className": {
                                "type": "static",
                                "content": "flex h-full w-full items-center justify-center"
                              }
                            },
                            "children": [
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "customLoader",
                                  "semanticType": "CustomLoader",
                                  "attrs": {
                                    "remSize": {
                                      "type": "static",
                                      "content": 30
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "modalsComponent",
                  "semanticType": "ModalsComponent",
                  "attrs": {
                    "openModal": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "openModal"
                      }
                    },
                    "setOpenModal": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "setOpenModal"
                      }
                    },
                    "openDeleteFolderModal": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "openDeleteFolderModal"
                      }
                    },
                    "setOpenDeleteFolderModal": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "setOpenDeleteFolderModal"
                      }
                    },
                    "handleDeleteFolder": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "handleDeleteFolder"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "behaviors": {
          "useFolderStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useCustomNavigate": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useFlowsManagerStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useQueryClient": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useDeleteFolders": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "navigation": {
            "type": "navigation",
            "intent": "page-navigation",
            "description": "Handles programmatic navigation"
          }
        }
      }
    },
    {
      "id": "ni0007",
      "type": "interface",
      "name": "DashboardWrapperPage",
      "description": "Interface page: DashboardWrapperPage",
      "route": "",
      "path": "src/frontend/src/pages/DashboardWrapperPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "DashboardWrapperPage",
        "propDefinitions": {},
        "stateDefinitions": {},
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-screen w-full flex-col overflow-hidden"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "appHeader",
                  "semanticType": "AppHeader"
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-full flex-1 flex-row overflow-hidden"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "outlet",
                        "semanticType": "Outlet"
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useTheme": {
            "type": "hook",
            "intent": "apply-theme",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0008",
      "type": "interface",
      "name": "DeleteAccountPage",
      "description": "Interface page: DeleteAccountPage",
      "route": "delete",
      "path": "src/frontend/src/pages/DeleteAccountPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "DeleteAccountPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "showConfirmation": {
            "type": "boolean",
            "defaultValue": "false"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col items-center justify-center bg-muted"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-72 flex-col items-center justify-center gap-2"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "langbuilderLogo",
                        "semanticType": "LangbuilderLogo",
                        "attrs": {
                          "title": {
                            "type": "static",
                            "content": "Langbuilder logo"
                          },
                          "className": {
                            "type": "static",
                            "content": "mb-4 h-10 w-10 scale-[1.5]"
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "span",
                        "name": "span",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "mb-4 text-center text-2xl font-semibold text-primary"
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "input",
                        "semanticType": "Input",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "bg-background"
                          },
                          "placeholder": {
                            "type": "static",
                            "content": "Confirm password"
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "baseModal",
                        "semanticType": "BaseModal",
                        "attrs": {
                          "open": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "state",
                              "id": "showConfirmation"
                            }
                          },
                          "setOpen": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "setShowConfirmation"
                            }
                          },
                          "size": {
                            "type": "static",
                            "content": "x-small"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "baseModalHeader",
                              "semanticType": "BaseModalHeader",
                              "attrs": {
                                "description": {
                                  "type": "static",
                                  "content": "This action is irreversible and will permanently erase all your data and information associated with the account. "
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "h3",
                                    "name": "h3"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "baseModalTrigger",
                              "semanticType": "BaseModalTrigger",
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "button",
                                    "semanticType": "Button",
                                    "attrs": {
                                      "variant": {
                                        "type": "static",
                                        "content": "default"
                                      },
                                      "className": {
                                        "type": "static",
                                        "content": "w-full hover:bg-status-red"
                                      },
                                      "onClick": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "inlineFunction"
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "baseModalContent",
                              "semanticType": "BaseModalContent",
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "div",
                                    "name": "div",
                                    "attrs": {
                                      "className": {
                                        "type": "static",
                                        "content": "flex h-full w-full flex-col justify-end"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "button",
                                          "semanticType": "Button",
                                          "attrs": {
                                            "variant": {
                                              "type": "static",
                                              "content": "default"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "w-full hover:bg-status-red"
                                            },
                                            "onClick": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {}
      }
    },
    {
      "id": "ni0009",
      "type": "interface",
      "name": "FlowPage",
      "description": "Interface page: FlowPage",
      "route": "folder/:folderId/",
      "path": "src/frontend/src/pages/FlowPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "FlowPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "isLoading": {
            "type": "boolean",
            "defaultValue": "false"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "fragment",
            "name": "fragmentContainer",
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flow-page-positioning"
                    }
                  },
                  "children": [
                    {
                      "type": "conditional",
                      "content": {
                        "reference": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "currentFlow"
                          }
                        },
                        "value": true,
                        "node": {
                          "type": "element",
                          "content": {
                            "elementType": "div",
                            "name": "div",
                            "attrs": {
                              "className": {
                                "type": "static",
                                "content": "flex h-full overflow-hidden"
                              }
                            },
                            "children": [
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "sidebarProvider",
                                  "semanticType": "SidebarProvider",
                                  "attrs": {
                                    "width": {
                                      "type": "static",
                                      "content": "17.5rem"
                                    },
                                    "defaultOpen": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "isMobile",
                                        "operator": "!"
                                      }
                                    }
                                  },
                                  "children": [
                                    {
                                      "type": "conditional",
                                      "content": {
                                        "reference": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "function",
                                            "id": "view",
                                            "operator": "!"
                                          }
                                        },
                                        "value": true,
                                        "node": {
                                          "type": "element",
                                          "content": {
                                            "elementType": "component",
                                            "name": "flowSidebarComponent",
                                            "semanticType": "FlowSidebarComponent",
                                            "attrs": {
                                              "isLoading": {
                                                "type": "dynamic",
                                                "content": {
                                                  "referenceType": "state",
                                                  "id": "isLoading"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "element",
                                      "content": {
                                        "elementType": "main",
                                        "name": "main",
                                        "attrs": {
                                          "className": {
                                            "type": "static",
                                            "content": "flex w-full overflow-hidden"
                                          }
                                        },
                                        "children": [
                                          {
                                            "type": "element",
                                            "content": {
                                              "elementType": "div",
                                              "name": "div",
                                              "attrs": {
                                                "className": {
                                                  "type": "static",
                                                  "content": "h-full w-full"
                                                }
                                              },
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "content": {
                                                    "elementType": "component",
                                                    "name": "page",
                                                    "semanticType": "Page",
                                                    "attrs": {
                                                      "setIsLoading": {
                                                        "type": "dynamic",
                                                        "content": {
                                                          "referenceType": "function",
                                                          "id": "setIsLoading"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "static",
                    "content": "unknown"
                  },
                  "value": true,
                  "node": {
                    "type": "conditional",
                    "content": {
                      "reference": {
                        "type": "static",
                        "content": "unknown"
                      },
                      "value": true,
                      "node": {
                        "type": "element",
                        "content": {
                          "elementType": "component",
                          "name": "saveChangesModal",
                          "semanticType": "SaveChangesModal",
                          "attrs": {
                            "onSave": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "function",
                                "id": "handleSave"
                              }
                            },
                            "onCancel": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "function",
                                "id": "inlineFunction"
                              }
                            },
                            "onProceed": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "function",
                                "id": "handleExit"
                              }
                            },
                            "flowName": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "function",
                                "id": "currentSavedFlow.name"
                              }
                            },
                            "lastSaved": {
                              "type": "static",
                              "content": "unknown"
                            },
                            "autoSave": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "function",
                                "id": "autoSaving"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "behaviors": {
          "useTypesStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetTypes": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useFlowsManagerStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useFlowStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useBlocker": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useParams": {
            "type": "hook",
            "intent": "route-params",
            "description": "Custom hook for component logic"
          },
          "useCustomNavigate": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useSaveFlow": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetFlow": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useIsMobile": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "navigation": {
            "type": "navigation",
            "intent": "page-navigation",
            "description": "Handles programmatic navigation"
          }
        }
      }
    },
    {
      "id": "ni0010",
      "type": "interface",
      "name": "GeneralPage",
      "description": "Interface page: GeneralPage",
      "route": "",
      "path": "src/frontend/src/pages/SettingsPage/pages/GeneralPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "GeneralPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "inputState": {
            "type": "patchUserInputStateType",
            "defaultValue": "CONTROL_PATCH_USER_STATE,"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col gap-6 overflow-x-hidden"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "generalPageHeaderComponent",
                  "semanticType": "GeneralPageHeaderComponent"
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-full flex-col gap-6"
                    }
                  },
                  "children": [
                    {
                      "type": "conditional",
                      "content": {
                        "reference": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "ENABLE_PROFILE_ICONS"
                          }
                        },
                        "value": true,
                        "node": {
                          "type": "element",
                          "content": {
                            "elementType": "component",
                            "name": "profilePictureFormComponent",
                            "semanticType": "ProfilePictureFormComponent",
                            "attrs": {
                              "profilePicture": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "profilePicture"
                                }
                              },
                              "handleInput": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "handleInput"
                                }
                              },
                              "handlePatchProfilePicture": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "handlePatchProfilePicture"
                                }
                              },
                              "handleGetProfilePictures": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "handleGetProfilePictures"
                                }
                              },
                              "userData": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "userData"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "conditional",
                      "content": {
                        "reference": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "autoLogin",
                            "operator": "!"
                          }
                        },
                        "value": true,
                        "node": {
                          "type": "element",
                          "content": {
                            "elementType": "component",
                            "name": "passwordFormComponent",
                            "semanticType": "PasswordFormComponent",
                            "attrs": {
                              "password": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "password"
                                }
                              },
                              "cnfPassword": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "cnfPassword"
                                }
                              },
                              "handleInput": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "handleInput"
                                }
                              },
                              "handlePatchPassword": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "handlePatchPassword"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "customTermsLinks",
                  "semanticType": "CustomTermsLinks"
                }
              }
            ]
          }
        },
        "behaviors": {
          "useParams": {
            "type": "hook",
            "intent": "route-params",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useContext": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAuthStore": {
            "type": "hook",
            "intent": "authentication",
            "description": "Custom hook for component logic"
          },
          "useStoreStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useResetPassword": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useUpdateUser": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetProfilePicturesQuery": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useScrollToElement": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "usePostAddApiKey": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0011",
      "type": "interface",
      "name": "GlobalVariablesPage",
      "description": "Interface page: GlobalVariablesPage",
      "route": "global-variables",
      "path": "src/frontend/src/pages/SettingsPage/pages/GlobalVariablesPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "GlobalVariablesPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "openModal": {
            "type": "boolean",
            "defaultValue": "false"
          },
          "selectedRows": {
            "type": "string[]",
            "defaultValue": "[]"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col justify-between gap-6"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-full items-start justify-between gap-6"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex w-full flex-col"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "h2",
                              "name": "h2",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex items-center text-lg font-semibold tracking-tight"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "forwardedIconComponent",
                                    "semanticType": "ForwardedIconComponent",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "Globe"
                                      },
                                      "className": {
                                        "type": "static",
                                        "content": "ml-2 h-5 w-5 text-primary"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "p",
                              "name": "p",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "text-sm text-muted-foreground"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex flex-shrink-0 items-center gap-2"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "globalVariableModal",
                              "semanticType": "GlobalVariableModal",
                              "attrs": {
                                "asChild": {
                                  "type": "static",
                                  "content": true
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "button",
                                    "semanticType": "Button",
                                    "attrs": {
                                      "data-testid": {
                                        "type": "static",
                                        "content": "api-key-button-store"
                                      },
                                      "variant": {
                                        "type": "static",
                                        "content": "primary"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "iconComponent",
                                          "semanticType": "IconComponent",
                                          "attrs": {
                                            "name": {
                                              "type": "static",
                                              "content": "Plus"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "w-4"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex h-full w-full flex-col justify-between"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "tableComponent",
                        "semanticType": "TableComponent",
                        "attrs": {
                          "key": {
                            "type": "static",
                            "content": "globalVariables"
                          },
                          "overlayNoRowsTemplate": {
                            "type": "static",
                            "content": "No data available"
                          },
                          "onSelectionChanged": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "inlineFunction"
                            }
                          },
                          "rowSelection": {
                            "type": "static",
                            "content": "multiple"
                          },
                          "onRowClicked": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "updateVariables"
                            }
                          },
                          "suppressRowClickSelection": {
                            "type": "static",
                            "content": true
                          },
                          "pagination": {
                            "type": "static",
                            "content": true
                          },
                          "columnDefs": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "colDefs"
                            }
                          },
                          "rowData": {
                            "type": "static",
                            "content": "unknown"
                          },
                          "onDelete": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "removeVariables"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "conditional",
                      "content": {
                        "reference": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "initialData.current"
                          }
                        },
                        "value": true,
                        "node": {
                          "type": "element",
                          "content": {
                            "elementType": "component",
                            "name": "globalVariableModal",
                            "semanticType": "GlobalVariableModal",
                            "attrs": {
                              "key": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "initialData.current.id"
                                }
                              },
                              "initialData": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "initialData.current"
                                }
                              },
                              "open": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "state",
                                  "id": "openModal"
                                }
                              },
                              "setOpen": {
                                "type": "dynamic",
                                "content": {
                                  "referenceType": "function",
                                  "id": "setOpenModal"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetGlobalVariables": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useDeleteGlobalVariables": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0012",
      "type": "interface",
      "name": "LoginPage",
      "description": "Interface page: LoginPage",
      "route": "",
      "path": "src/frontend/src/pages/LoginPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "LoginPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "inputState": {
            "type": "loginInputStateType",
            "defaultValue": "CONTROL_LOGIN_STATE"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "component",
            "name": "formRoot",
            "semanticType": "FormRoot",
            "attrs": {
              "onSubmit": {
                "type": "dynamic",
                "content": {
                  "referenceType": "function",
                  "id": "inlineFunction"
                }
              },
              "className": {
                "type": "static",
                "content": "h-screen w-full"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex h-full w-full flex-col items-center justify-center bg-muted"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex w-72 flex-col items-center justify-center gap-2"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "langbuilderLogo",
                              "semanticType": "LangbuilderLogo",
                              "attrs": {
                                "title": {
                                  "type": "static",
                                  "content": "Langbuilder logo"
                                },
                                "className": {
                                  "type": "static",
                                  "content": "mb-4 h-10 w-10 scale-[1.5]"
                                }
                              }
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "span",
                              "name": "span",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "mb-6 text-2xl font-semibold text-primary"
                                }
                              }
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "mb-3 w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "formField",
                                    "semanticType": "FormField",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "username"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formLabel",
                                          "semanticType": "FormLabel",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "data-[invalid]:label-invalid"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "span",
                                                "name": "span",
                                                "attrs": {
                                                  "className": {
                                                    "type": "static",
                                                    "content": "font-medium text-destructive"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formControl",
                                          "semanticType": "FormControl",
                                          "attrs": {
                                            "asChild": {
                                              "type": "static",
                                              "content": true
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "input",
                                                "semanticType": "Input",
                                                "attrs": {
                                                  "type": {
                                                    "type": "static",
                                                    "content": "username"
                                                  },
                                                  "onChange": {
                                                    "type": "dynamic",
                                                    "content": {
                                                      "referenceType": "function",
                                                      "id": "inlineFunction"
                                                    }
                                                  },
                                                  "value": {
                                                    "type": "dynamic",
                                                    "content": {
                                                      "referenceType": "function",
                                                      "id": "username"
                                                    }
                                                  },
                                                  "className": {
                                                    "type": "static",
                                                    "content": "w-full"
                                                  },
                                                  "required": {
                                                    "type": "static",
                                                    "content": true
                                                  },
                                                  "placeholder": {
                                                    "type": "static",
                                                    "content": "Username"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formMessage",
                                          "semanticType": "FormMessage",
                                          "attrs": {
                                            "match": {
                                              "type": "static",
                                              "content": "valueMissing"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "field-invalid"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "mb-3 w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "formField",
                                    "semanticType": "FormField",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "password"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formLabel",
                                          "semanticType": "FormLabel",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "data-[invalid]:label-invalid"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "span",
                                                "name": "span",
                                                "attrs": {
                                                  "className": {
                                                    "type": "static",
                                                    "content": "font-medium text-destructive"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "inputComponent",
                                          "semanticType": "InputComponent",
                                          "attrs": {
                                            "onChange": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            },
                                            "value": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "password"
                                              }
                                            },
                                            "isForm": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "password": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "required": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "placeholder": {
                                              "type": "static",
                                              "content": "Password"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "w-full"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formMessage",
                                          "semanticType": "FormMessage",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "field-invalid"
                                            },
                                            "match": {
                                              "type": "static",
                                              "content": "valueMissing"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "formSubmit",
                                    "semanticType": "FormSubmit",
                                    "attrs": {
                                      "asChild": {
                                        "type": "static",
                                        "content": true
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "button",
                                          "semanticType": "Button",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "mr-3 mt-6 w-full"
                                            },
                                            "type": {
                                              "type": "static",
                                              "content": "submit"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "customLink",
                                    "semanticType": "CustomLink",
                                    "attrs": {
                                      "to": {
                                        "type": "static",
                                        "content": "/signup"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "button",
                                          "semanticType": "Button",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "w-full"
                                            },
                                            "variant": {
                                              "type": "static",
                                              "content": "outline"
                                            },
                                            "type": {
                                              "type": "static",
                                              "content": "button"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "b",
                                                "name": "b"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useContext": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useLoginUser": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "formSubmission": {
            "type": "form",
            "intent": "form-handling",
            "description": "Handles form submission logic"
          }
        }
      }
    },
    {
      "id": "ni0013",
      "type": "interface",
      "name": "LoginAdminPage",
      "description": "Interface page: LoginPage",
      "route": "",
      "path": "src/frontend/src/pages/AdminPage/LoginPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "LoginPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "inputState": {
            "type": "loginInputStateType",
            "defaultValue": "CONTROL_LOGIN_STATE"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col items-center justify-center bg-muted"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-72 flex-col items-center justify-center gap-2"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "langbuilderLogo",
                        "semanticType": "LangbuilderLogo",
                        "attrs": {
                          "title": {
                            "type": "static",
                            "content": "Langbuilder logo"
                          },
                          "className": {
                            "type": "static",
                            "content": "h-10 w-10 scale-[1.5]"
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "span",
                        "name": "span",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "mb-6 text-2xl font-semibold text-primary"
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "input",
                        "semanticType": "Input",
                        "attrs": {
                          "onChange": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "inlineFunction"
                            }
                          },
                          "className": {
                            "type": "static",
                            "content": "bg-background"
                          },
                          "placeholder": {
                            "type": "static",
                            "content": "Username"
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "input",
                        "semanticType": "Input",
                        "attrs": {
                          "type": {
                            "type": "static",
                            "content": "password"
                          },
                          "onChange": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "inlineFunction"
                            }
                          },
                          "className": {
                            "type": "static",
                            "content": "bg-background"
                          },
                          "placeholder": {
                            "type": "static",
                            "content": "Password"
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "button",
                        "semanticType": "Button",
                        "attrs": {
                          "onClick": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "inlineFunction"
                            }
                          },
                          "variant": {
                            "type": "static",
                            "content": "default"
                          },
                          "className": {
                            "type": "static",
                            "content": "w-full"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useContext": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useLoginUser": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0014",
      "type": "interface",
      "name": "MCPServersPage",
      "description": "Interface page: MCPServersPage",
      "route": "mcp-servers",
      "path": "src/frontend/src/pages/SettingsPage/pages/MCPServersPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "MCPServersPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "addOpen": {
            "type": "boolean",
            "defaultValue": "false"
          },
          "editOpen": {
            "type": "boolean",
            "defaultValue": "false"
          },
          "editInitialData": {
            "type": "any",
            "defaultValue": "null"
          },
          "deleteModalOpen": {
            "type": "boolean",
            "defaultValue": "false"
          },
          "serverToDelete": {
            "type": "MCPServerInfoType | null",
            "defaultValue": "null"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col gap-6"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-full items-start justify-between gap-6"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex flex-col"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "h2",
                              "name": "h2",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex items-center text-lg font-semibold tracking-tight"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "forwardedIconComponent",
                                    "semanticType": "ForwardedIconComponent",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "Mcp"
                                      },
                                      "className": {
                                        "type": "static",
                                        "content": "ml-2 h-5 w-5 text-primary"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "p",
                              "name": "p",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "text-sm text-muted-foreground"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex flex-shrink-0 items-center gap-2"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "button",
                              "semanticType": "Button",
                              "attrs": {
                                "variant": {
                                  "type": "static",
                                  "content": "primary"
                                },
                                "onClick": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "function",
                                    "id": "inlineFunction"
                                  }
                                },
                                "data-testid": {
                                  "type": "static",
                                  "content": "add-mcp-server-button-page"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "forwardedIconComponent",
                                    "semanticType": "ForwardedIconComponent",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "Plus"
                                      },
                                      "className": {
                                        "type": "static",
                                        "content": "w-4"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "addMcpServerModal",
                              "semanticType": "AddMcpServerModal",
                              "attrs": {
                                "open": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "state",
                                    "id": "addOpen"
                                  }
                                },
                                "setOpen": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "function",
                                    "id": "setAddOpen"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex h-full flex-col gap-2"
                    }
                  },
                  "children": [
                    {
                      "type": "conditional",
                      "content": {
                        "reference": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "servers"
                          }
                        },
                        "value": true,
                        "node": {
                          "type": "element",
                          "content": {
                            "elementType": "fragment",
                            "name": "fragmentContainer",
                            "children": [
                              {
                                "type": "conditional",
                                "content": {
                                  "reference": {
                                    "type": "static",
                                    "content": "unknown"
                                  },
                                  "value": true,
                                  "node": {
                                    "type": "element",
                                    "content": {
                                      "elementType": "div",
                                      "name": "div",
                                      "attrs": {
                                        "className": {
                                          "type": "static",
                                          "content": "w-full pt-8 text-center text-sm text-muted-foreground"
                                        }
                                      }
                                    }
                                  },
                                  "fallbackNode": {
                                    "type": "element",
                                    "content": {
                                      "elementType": "div",
                                      "name": "div",
                                      "attrs": {
                                        "className": {
                                          "type": "static",
                                          "content": "text-sm font-medium text-muted-foreground"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "div",
                                  "name": "div",
                                  "attrs": {
                                    "className": {
                                      "type": "static",
                                      "content": "flex flex-col gap-1"
                                    }
                                  },
                                  "children": [
                                    {
                                      "type": "element",
                                      "content": {
                                        "elementType": "container",
                                        "name": "content"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "conditional",
                                "content": {
                                  "reference": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "state",
                                      "id": "editOpen"
                                    }
                                  },
                                  "value": true,
                                  "node": {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "name": "addMcpServerModal",
                                      "semanticType": "AddMcpServerModal",
                                      "attrs": {
                                        "open": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "state",
                                            "id": "editOpen"
                                          }
                                        },
                                        "setOpen": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "function",
                                            "id": "setEditOpen"
                                          }
                                        },
                                        "initialData": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "state",
                                            "id": "editInitialData"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "deleteConfirmationModal",
                                  "semanticType": "DeleteConfirmationModal",
                                  "attrs": {
                                    "open": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "state",
                                        "id": "deleteModalOpen"
                                      }
                                    },
                                    "setOpen": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "setDeleteModalOpen"
                                      }
                                    },
                                    "onConfirm": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "inlineFunction"
                                      }
                                    },
                                    "description": {
                                      "type": "static",
                                      "content": "MCP Server"
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "fallbackNode": {
                          "type": "element",
                          "content": {
                            "elementType": "div",
                            "name": "div",
                            "attrs": {
                              "className": {
                                "type": "static",
                                "content": "flex h-full w-full items-center justify-center"
                              }
                            },
                            "children": [
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "loading",
                                  "semanticType": "Loading"
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useGetMCPServers": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useDeleteMCPServer": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useGetMCPServer": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0015",
      "type": "interface",
      "name": "Playground",
      "description": "Interface page: Playground",
      "route": "",
      "path": "src/frontend/src/pages/Playground/index.tsx",
      "uidl_definition_conceptual": {
        "name": "Playground",
        "propDefinitions": {},
        "stateDefinitions": {},
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col items-center justify-center align-middle"
              }
            },
            "children": [
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "function",
                      "id": "currentSavedFlow"
                    }
                  },
                  "value": true,
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "component",
                      "name": "customIOModal",
                      "semanticType": "CustomIOModal",
                      "attrs": {
                        "open": {
                          "type": "static",
                          "content": true
                        },
                        "setOpen": {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "function",
                            "id": "inlineFunction"
                          }
                        },
                        "isPlayground": {
                          "type": "static",
                          "content": true
                        },
                        "playgroundPage": {
                          "type": "static",
                          "content": true
                        }
                      },
                      "children": [
                        {
                          "type": "element",
                          "content": {
                            "elementType": "fragment",
                            "name": "fragmentContainer",
                            "children": []
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        },
        "behaviors": {
          "useGetConfig": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useFlowsManagerStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useUtilityStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useParams": {
            "type": "hook",
            "intent": "route-params",
            "description": "Custom hook for component logic"
          },
          "useGetFlow": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useCustomNavigate": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useFlowStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "navigation": {
            "type": "navigation",
            "intent": "page-navigation",
            "description": "Handles programmatic navigation"
          }
        }
      }
    },
    {
      "id": "ni0016",
      "type": "interface",
      "name": "SettingsPage",
      "description": "Interface page: SettingsPage",
      "route": "settings",
      "path": "src/frontend/src/pages/SettingsPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "SettingsPage",
        "propDefinitions": {},
        "stateDefinitions": {},
        "node": {
          "type": "element",
          "content": {
            "elementType": "component",
            "name": "pageLayout",
            "semanticType": "PageLayout",
            "attrs": {
              "backTo": {
                "type": "static",
                "content": "unknown"
              },
              "title": {
                "type": "static",
                "content": "Settings"
              },
              "description": {
                "type": "static",
                "content": "Manage the general settings for Langbuilder."
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "sidebarProvider",
                  "semanticType": "SidebarProvider",
                  "attrs": {
                    "width": {
                      "type": "static",
                      "content": "15rem"
                    },
                    "defaultOpen": {
                      "type": "static",
                      "content": false
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "name": "sideBarButtonsComponent",
                        "semanticType": "SideBarButtonsComponent",
                        "attrs": {
                          "items": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "function",
                              "id": "sidebarNavItems"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "main",
                        "name": "main",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex flex-1 overflow-hidden"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex flex-1 flex-col overflow-x-hidden pt-1"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "outlet",
                                    "semanticType": "Outlet"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useAuthStore": {
            "type": "hook",
            "intent": "authentication",
            "description": "Custom hook for component logic"
          },
          "useStoreStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0017",
      "type": "interface",
      "name": "ShortcutsPage",
      "description": "Interface page: ShortcutsPage",
      "route": "shortcuts",
      "path": "src/frontend/src/pages/SettingsPage/pages/ShortcutsPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "ShortcutsPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "selectedRows": {
            "type": "string[]",
            "defaultValue": "[]"
          },
          "open": {
            "type": "boolean",
            "defaultValue": "false"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col gap-6"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-full items-start justify-between gap-6"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex w-full flex-col"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "h2",
                              "name": "h2",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex items-center text-lg font-semibold tracking-tight"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "forwardedIconComponent",
                                    "semanticType": "ForwardedIconComponent",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "Keyboard"
                                      },
                                      "className": {
                                        "type": "static",
                                        "content": "ml-2 h-5 w-5 text-primary"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "p",
                              "name": "p",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "text-sm text-muted-foreground"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "align-end flex w-full justify-end"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "div",
                                    "name": "div",
                                    "attrs": {
                                      "className": {
                                        "type": "static",
                                        "content": "justify center flex items-center"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "conditional",
                                        "content": {
                                          "reference": {
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "state",
                                              "id": "open"
                                            }
                                          },
                                          "value": true,
                                          "node": {
                                            "type": "element",
                                            "content": {
                                              "elementType": "component",
                                              "name": "editShortcutButton",
                                              "semanticType": "EditShortcutButton",
                                              "attrs": {
                                                "disable": {
                                                  "type": "static",
                                                  "content": "unknown"
                                                },
                                                "shortcut": {
                                                  "type": "dynamic",
                                                  "content": {
                                                    "referenceType": "state",
                                                    "id": "selectedRows"
                                                  }
                                                },
                                                "defaultShortcuts": {
                                                  "type": "dynamic",
                                                  "content": {
                                                    "referenceType": "function",
                                                    "id": "shortcuts"
                                                  }
                                                },
                                                "open": {
                                                  "type": "dynamic",
                                                  "content": {
                                                    "referenceType": "state",
                                                    "id": "open"
                                                  }
                                                },
                                                "setOpen": {
                                                  "type": "dynamic",
                                                  "content": {
                                                    "referenceType": "function",
                                                    "id": "setOpen"
                                                  }
                                                },
                                                "setSelected": {
                                                  "type": "dynamic",
                                                  "content": {
                                                    "referenceType": "function",
                                                    "id": "setSelectedRows"
                                                  }
                                                }
                                              },
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "content": {
                                                    "elementType": "div",
                                                    "name": "div",
                                                    "attrs": {
                                                      "style": {
                                                        "type": "static",
                                                        "content": "unknown"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "button",
                                          "semanticType": "Button",
                                          "attrs": {
                                            "variant": {
                                              "type": "static",
                                              "content": "primary"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "flex gap-2"
                                            },
                                            "onClick": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "handleRestore"
                                              }
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "forwardedIconComponent",
                                                "semanticType": "ForwardedIconComponent",
                                                "attrs": {
                                                  "name": {
                                                    "type": "static",
                                                    "content": "RotateCcw"
                                                  },
                                                  "className": {
                                                    "type": "static",
                                                    "content": "w-4"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "grid gap-6 pb-8"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "children": [
                          {
                            "type": "conditional",
                            "content": {
                              "reference": {
                                "type": "static",
                                "content": "unknown"
                              },
                              "value": true,
                              "node": {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "tableComponent",
                                  "semanticType": "TableComponent",
                                  "attrs": {
                                    "suppressRowClickSelection": {
                                      "type": "static",
                                      "content": true
                                    },
                                    "domLayout": {
                                      "type": "static",
                                      "content": "autoHeight"
                                    },
                                    "pagination": {
                                      "type": "static",
                                      "content": false
                                    },
                                    "columnDefs": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "colDefs"
                                      }
                                    },
                                    "rowData": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "nodesRowData"
                                      }
                                    },
                                    "onCellDoubleClicked": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "inlineFunction"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useShortcutsStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0018",
      "type": "interface",
      "name": "SignUpPage",
      "description": "Interface page: SignUpPage",
      "route": "",
      "path": "src/frontend/src/pages/SignUpPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "SignUpPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "inputState": {
            "type": "signUpInputStateType",
            "defaultValue": "CONTROL_INPUT_STATE"
          },
          "isDisabled": {
            "type": "boolean",
            "defaultValue": "true"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "component",
            "name": "formRoot",
            "semanticType": "FormRoot",
            "attrs": {
              "onSubmit": {
                "type": "dynamic",
                "content": {
                  "referenceType": "function",
                  "id": "inlineFunction"
                }
              },
              "className": {
                "type": "static",
                "content": "h-screen w-full"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex h-full w-full flex-col items-center justify-center bg-muted"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex w-72 flex-col items-center justify-center gap-2"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "component",
                              "name": "langbuilderLogo",
                              "semanticType": "LangbuilderLogo",
                              "attrs": {
                                "title": {
                                  "type": "static",
                                  "content": "Langbuilder logo"
                                },
                                "className": {
                                  "type": "static",
                                  "content": "mb-4 h-10 w-10 scale-[1.5]"
                                }
                              }
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "span",
                              "name": "span",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "mb-6 text-2xl font-semibold text-primary"
                                }
                              }
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "mb-3 w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "formField",
                                    "semanticType": "FormField",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "username"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formLabel",
                                          "semanticType": "FormLabel",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "data-[invalid]:label-invalid"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "span",
                                                "name": "span",
                                                "attrs": {
                                                  "className": {
                                                    "type": "static",
                                                    "content": "font-medium text-destructive"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formControl",
                                          "semanticType": "FormControl",
                                          "attrs": {
                                            "asChild": {
                                              "type": "static",
                                              "content": true
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "input",
                                                "semanticType": "Input",
                                                "attrs": {
                                                  "type": {
                                                    "type": "static",
                                                    "content": "username"
                                                  },
                                                  "onChange": {
                                                    "type": "dynamic",
                                                    "content": {
                                                      "referenceType": "function",
                                                      "id": "inlineFunction"
                                                    }
                                                  },
                                                  "value": {
                                                    "type": "dynamic",
                                                    "content": {
                                                      "referenceType": "function",
                                                      "id": "username"
                                                    }
                                                  },
                                                  "className": {
                                                    "type": "static",
                                                    "content": "w-full"
                                                  },
                                                  "required": {
                                                    "type": "static",
                                                    "content": true
                                                  },
                                                  "placeholder": {
                                                    "type": "static",
                                                    "content": "Username"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formMessage",
                                          "semanticType": "FormMessage",
                                          "attrs": {
                                            "match": {
                                              "type": "static",
                                              "content": "valueMissing"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "field-invalid"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "mb-3 w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "formField",
                                    "semanticType": "FormField",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "password"
                                      },
                                      "serverInvalid": {
                                        "type": "static",
                                        "content": "unknown"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formLabel",
                                          "semanticType": "FormLabel",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "data-[invalid]:label-invalid"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "span",
                                                "name": "span",
                                                "attrs": {
                                                  "className": {
                                                    "type": "static",
                                                    "content": "font-medium text-destructive"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "inputComponent",
                                          "semanticType": "InputComponent",
                                          "attrs": {
                                            "onChange": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            },
                                            "value": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "password"
                                              }
                                            },
                                            "isForm": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "password": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "required": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "placeholder": {
                                              "type": "static",
                                              "content": "Password"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "w-full"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formMessage",
                                          "semanticType": "FormMessage",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "field-invalid"
                                            },
                                            "match": {
                                              "type": "static",
                                              "content": "valueMissing"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "conditional",
                                        "content": {
                                          "reference": {
                                            "type": "static",
                                            "content": "unknown"
                                          },
                                          "value": true,
                                          "node": {
                                            "type": "element",
                                            "content": {
                                              "elementType": "component",
                                              "name": "formMessage",
                                              "semanticType": "FormMessage",
                                              "attrs": {
                                                "className": {
                                                  "type": "static",
                                                  "content": "field-invalid"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "formField",
                                    "semanticType": "FormField",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "confirmpassword"
                                      },
                                      "serverInvalid": {
                                        "type": "static",
                                        "content": "unknown"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formLabel",
                                          "semanticType": "FormLabel",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "data-[invalid]:label-invalid"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "container",
                                                "name": "content"
                                              }
                                            },
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "span",
                                                "name": "span",
                                                "attrs": {
                                                  "className": {
                                                    "type": "static",
                                                    "content": "font-medium text-destructive"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "inputComponent",
                                          "semanticType": "InputComponent",
                                          "attrs": {
                                            "onChange": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            },
                                            "value": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "cnfPassword"
                                              }
                                            },
                                            "isForm": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "password": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "required": {
                                              "type": "static",
                                              "content": true
                                            },
                                            "placeholder": {
                                              "type": "static",
                                              "content": "Confirm your password"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "w-full"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "formMessage",
                                          "semanticType": "FormMessage",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "field-invalid"
                                            },
                                            "match": {
                                              "type": "static",
                                              "content": "valueMissing"
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "formSubmit",
                                    "semanticType": "FormSubmit",
                                    "attrs": {
                                      "asChild": {
                                        "type": "static",
                                        "content": true
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "button",
                                          "semanticType": "Button",
                                          "attrs": {
                                            "disabled": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "state",
                                                "id": "isDisabled"
                                              }
                                            },
                                            "type": {
                                              "type": "static",
                                              "content": "submit"
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "mr-3 mt-6 w-full"
                                            },
                                            "onClick": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "w-full"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "customLink",
                                    "semanticType": "CustomLink",
                                    "attrs": {
                                      "to": {
                                        "type": "static",
                                        "content": "/login"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "button",
                                          "semanticType": "Button",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "w-full"
                                            },
                                            "variant": {
                                              "type": "static",
                                              "content": "outline"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "b",
                                                "name": "b"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useCustomNavigate": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAddUser": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "navigation": {
            "type": "navigation",
            "intent": "page-navigation",
            "description": "Handles programmatic navigation"
          },
          "formSubmission": {
            "type": "form",
            "intent": "form-handling",
            "description": "Handles form submission logic"
          }
        }
      }
    },
    {
      "id": "ni0019",
      "type": "interface",
      "name": "StoreApiKeyPage",
      "description": "Interface page: StoreApiKeyPage",
      "route": "",
      "path": "src/frontend/src/pages/SettingsPage/pages/StoreApiKeyPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "StoreApiKeyPage",
        "propDefinitions": {},
        "stateDefinitions": {
          "inputState": {
            "type": "any",
            "defaultValue": "CONTROL_PATCH_USER_STATE"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flex h-full w-full flex-col gap-6"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex w-full items-start gap-6"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex w-full flex-col"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "h2",
                              "name": "h2",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex items-center text-lg font-semibold tracking-tight"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "forwardedIconComponent",
                                    "semanticType": "ForwardedIconComponent",
                                    "attrs": {
                                      "name": {
                                        "type": "static",
                                        "content": "Store"
                                      },
                                      "className": {
                                        "type": "static",
                                        "content": "ml-2 h-5 w-5 text-primary"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "p",
                              "name": "p",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "text-sm text-muted-foreground"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "storeApiKeyFormComponent",
                  "semanticType": "StoreApiKeyFormComponent",
                  "attrs": {
                    "apikey": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "inputState.apikey"
                      }
                    },
                    "handleInput": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "handleInput"
                      }
                    },
                    "handleSaveKey": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "handleSaveKey"
                      }
                    },
                    "loadingApiKey": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "loadingApiKey"
                      }
                    },
                    "validApiKey": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "validApiKey"
                      }
                    },
                    "hasApiKey": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "function",
                        "id": "hasApiKey"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "behaviors": {
          "useParams": {
            "type": "hook",
            "intent": "route-params",
            "description": "Custom hook for component logic"
          },
          "useContext": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useScrollToElement": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useStoreStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "usePostAddApiKey": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          }
        }
      }
    },
    {
      "id": "ni0020",
      "type": "interface",
      "name": "StorePage",
      "description": "Interface page: StorePage",
      "route": "",
      "path": "src/frontend/src/pages/StorePage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "StorePage",
        "propDefinitions": {},
        "stateDefinitions": {
          "loading": {
            "type": "boolean",
            "defaultValue": "true"
          },
          "filteredCategories": {
            "type": "any[]",
            "defaultValue": "[]"
          },
          "inputText": {
            "type": "string",
            "defaultValue": "\"\""
          },
          "searchData": {
            "type": "storeComponent[]",
            "defaultValue": "[]"
          },
          "totalRowsCount": {
            "type": "number",
            "defaultValue": "0"
          },
          "pageSize": {
            "type": "any",
            "defaultValue": "STORE_PAGINATION_SIZE"
          },
          "pageIndex": {
            "type": "any",
            "defaultValue": "STORE_PAGINATION_PAGE"
          },
          "pageOrder": {
            "type": "string",
            "defaultValue": "\"Popular\""
          },
          "tabActive": {
            "type": "string",
            "defaultValue": "\"All\""
          },
          "searchNow": {
            "type": "string",
            "defaultValue": "\"\""
          },
          "selectFilter": {
            "type": "string",
            "defaultValue": "\"all\""
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "component",
            "name": "pageLayout",
            "semanticType": "PageLayout",
            "attrs": {
              "betaIcon": {
                "type": "static",
                "content": true
              },
              "title": {
                "type": "dynamic",
                "content": {
                  "referenceType": "function",
                  "id": "STORE_TITLE"
                }
              },
              "description": {
                "type": "dynamic",
                "content": {
                  "referenceType": "function",
                  "id": "STORE_DESC"
                }
              },
              "button": {
                "type": "static",
                "content": "unknown"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "div",
                  "name": "div",
                  "attrs": {
                    "className": {
                      "type": "static",
                      "content": "flex h-full w-full flex-col justify-between"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "div",
                        "name": "div",
                        "attrs": {
                          "className": {
                            "type": "static",
                            "content": "flex w-full flex-col gap-4 p-0"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex items-end gap-4"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "inputSearchComponent",
                                    "semanticType": "InputSearchComponent",
                                    "attrs": {
                                      "loading": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "loading"
                                        }
                                      },
                                      "divClasses": {
                                        "type": "static",
                                        "content": "relative h-12 w-[40%]"
                                      },
                                      "value": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "inputText"
                                        }
                                      },
                                      "onChange": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "inlineFunction"
                                        }
                                      },
                                      "onKeyDown": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "inlineFunction"
                                        }
                                      },
                                      "onClick": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "inlineFunction"
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "div",
                                    "name": "div",
                                    "attrs": {
                                      "className": {
                                        "type": "static",
                                        "content": "ml-4 flex w-full gap-2 border-b border-border"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "button",
                                          "name": "button",
                                          "attrs": {
                                            "data-testid": {
                                              "type": "static",
                                              "content": "all-button-store"
                                            },
                                            "disabled": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "state",
                                                "id": "loading"
                                              }
                                            },
                                            "onClick": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "unknown"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "button",
                                          "name": "button",
                                          "attrs": {
                                            "data-testid": {
                                              "type": "static",
                                              "content": "flows-button-store"
                                            },
                                            "disabled": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "state",
                                                "id": "loading"
                                              }
                                            },
                                            "onClick": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "unknown"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "button",
                                          "name": "button",
                                          "attrs": {
                                            "data-testid": {
                                              "type": "static",
                                              "content": "components-button-store"
                                            },
                                            "disabled": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "state",
                                                "id": "loading"
                                              }
                                            },
                                            "onClick": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "function",
                                                "id": "inlineFunction"
                                              }
                                            },
                                            "className": {
                                              "type": "static",
                                              "content": "unknown"
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "shadTooltip",
                                          "semanticType": "ShadTooltip",
                                          "attrs": {
                                            "content": {
                                              "type": "static",
                                              "content": "Coming Soon"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "button",
                                                "name": "button",
                                                "attrs": {
                                                  "className": {
                                                    "type": "static",
                                                    "content": "cursor-not-allowed p-3 text-muted-foreground"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex items-center gap-2"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "select",
                                    "semanticType": "Select",
                                    "attrs": {
                                      "disabled": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "loading"
                                        }
                                      },
                                      "onValueChange": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "setSelectFilter"
                                        }
                                      },
                                      "value": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "selectFilter"
                                        }
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "selectTrigger",
                                          "semanticType": "SelectTrigger",
                                          "attrs": {
                                            "className": {
                                              "type": "static",
                                              "content": "mr-4 w-[160px] flex-shrink-0"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "selectValue",
                                                "semanticType": "SelectValue",
                                                "attrs": {
                                                  "placeholder": {
                                                    "type": "static",
                                                    "content": "Filter Values"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "selectContent",
                                          "semanticType": "SelectContent",
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "selectGroup",
                                                "semanticType": "SelectGroup",
                                                "children": [
                                                  {
                                                    "type": "element",
                                                    "content": {
                                                      "elementType": "component",
                                                      "name": "selectItem",
                                                      "semanticType": "SelectItem",
                                                      "attrs": {
                                                        "value": {
                                                          "type": "static",
                                                          "content": "all"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "element",
                                                    "content": {
                                                      "elementType": "component",
                                                      "name": "selectItem",
                                                      "semanticType": "SelectItem",
                                                      "attrs": {
                                                        "disabled": {
                                                          "type": "static",
                                                          "content": "unknown"
                                                        },
                                                        "value": {
                                                          "type": "static",
                                                          "content": "createdbyme"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "element",
                                                    "content": {
                                                      "elementType": "component",
                                                      "name": "selectItem",
                                                      "semanticType": "SelectItem",
                                                      "attrs": {
                                                        "disabled": {
                                                          "type": "static",
                                                          "content": "unknown"
                                                        },
                                                        "value": {
                                                          "type": "static",
                                                          "content": "likedbyme"
                                                        }
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "conditional",
                                  "content": {
                                    "reference": {
                                      "type": "static",
                                      "content": "unknown"
                                    },
                                    "value": true,
                                    "node": {
                                      "type": "element",
                                      "content": {
                                        "elementType": "component",
                                        "name": "tagsSelector",
                                        "semanticType": "TagsSelector",
                                        "attrs": {
                                          "tags": {
                                            "type": "static",
                                            "content": "unknown"
                                          },
                                          "loadingTags": {
                                            "type": "static",
                                            "content": false
                                          },
                                          "disabled": {
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "state",
                                              "id": "loading"
                                            }
                                          },
                                          "selectedTags": {
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "state",
                                              "id": "filteredCategories"
                                            }
                                          },
                                          "setSelectedTags": {
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "function",
                                              "id": "setFilterCategories"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "fallbackNode": {
                                      "type": "element",
                                      "content": {
                                        "elementType": "component",
                                        "name": "badge",
                                        "semanticType": "Badge",
                                        "attrs": {
                                          "key": {
                                            "type": "static",
                                            "content": "id"
                                          },
                                          "variant": {
                                            "type": "static",
                                            "content": "outline"
                                          },
                                          "size": {
                                            "type": "static",
                                            "content": "sq"
                                          },
                                          "className": {
                                            "type": "static",
                                            "content": "gap-2 bg-beta-foreground text-background hover:bg-beta-foreground"
                                          }
                                        },
                                        "children": [
                                          {
                                            "type": "element",
                                            "content": {
                                              "elementType": "component",
                                              "name": "customLink",
                                              "semanticType": "CustomLink",
                                              "attrs": {
                                                "to": {
                                                  "type": "static",
                                                  "content": "/store"
                                                },
                                                "className": {
                                                  "type": "static",
                                                  "content": "cursor-pointer"
                                                }
                                              },
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "content": {
                                                    "elementType": "component",
                                                    "name": "iconComponent",
                                                    "semanticType": "IconComponent",
                                                    "attrs": {
                                                      "name": {
                                                        "type": "static",
                                                        "content": "X"
                                                      },
                                                      "className": {
                                                        "type": "static",
                                                        "content": "h-4 w-4"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "element",
                                            "content": {
                                              "elementType": "container",
                                              "name": "content"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "flex items-end justify-between"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "span",
                                    "name": "span",
                                    "attrs": {
                                      "className": {
                                        "type": "static",
                                        "content": "px-0.5 text-sm text-muted-foreground"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "conditional",
                                        "content": {
                                          "reference": {
                                            "type": "static",
                                            "content": "unknown"
                                          },
                                          "value": true,
                                          "node": {
                                            "type": "element",
                                            "content": {
                                              "elementType": "fragment",
                                              "name": "fragmentContainer",
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "content": {
                                                    "elementType": "container",
                                                    "name": "content"
                                                  }
                                                },
                                                {
                                                  "type": "conditional",
                                                  "content": {
                                                    "reference": {
                                                      "type": "dynamic",
                                                      "content": {
                                                        "referenceType": "state",
                                                        "id": "totalRowsCount",
                                                        "operator": "!==",
                                                        "compareValue": 1
                                                      }
                                                    },
                                                    "value": true,
                                                    "node": {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "container",
                                                        "name": "content"
                                                      }
                                                    },
                                                    "fallbackNode": {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "container",
                                                        "name": "content"
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "component",
                                    "name": "select",
                                    "semanticType": "Select",
                                    "attrs": {
                                      "disabled": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "state",
                                          "id": "loading"
                                        }
                                      },
                                      "onValueChange": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "function",
                                          "id": "inlineFunction"
                                        }
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "selectTrigger",
                                          "semanticType": "SelectTrigger",
                                          "attrs": {
                                            "data-testid": {
                                              "type": "static",
                                              "content": "select-order-store"
                                            }
                                          },
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "selectValue",
                                                "semanticType": "SelectValue",
                                                "attrs": {
                                                  "placeholder": {
                                                    "type": "static",
                                                    "content": "Popular"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "component",
                                          "name": "selectContent",
                                          "semanticType": "SelectContent",
                                          "children": [
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "selectItem",
                                                "semanticType": "SelectItem",
                                                "attrs": {
                                                  "value": {
                                                    "type": "static",
                                                    "content": "Popular"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "container",
                                                "name": "content"
                                              }
                                            },
                                            {
                                              "type": "element",
                                              "content": {
                                                "elementType": "component",
                                                "name": "selectItem",
                                                "semanticType": "SelectItem",
                                                "attrs": {
                                                  "value": {
                                                    "type": "static",
                                                    "content": "Alphabetical"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "div",
                              "name": "div",
                              "attrs": {
                                "className": {
                                  "type": "static",
                                  "content": "grid w-full gap-4 md:grid-cols-2 lg:grid-cols-3"
                                }
                              },
                              "children": [
                                {
                                  "type": "conditional",
                                  "content": {
                                    "reference": {
                                      "type": "static",
                                      "content": "unknown"
                                    },
                                    "value": true,
                                    "node": {
                                      "type": "element",
                                      "content": {
                                        "elementType": "container",
                                        "name": "content"
                                      }
                                    },
                                    "fallbackNode": {
                                      "type": "element",
                                      "content": {
                                        "elementType": "fragment",
                                        "name": "fragmentContainer",
                                        "children": [
                                          {
                                            "type": "element",
                                            "content": {
                                              "elementType": "component",
                                              "name": "skeletonCardComponent",
                                              "semanticType": "SkeletonCardComponent"
                                            }
                                          },
                                          {
                                            "type": "element",
                                            "content": {
                                              "elementType": "component",
                                              "name": "skeletonCardComponent",
                                              "semanticType": "SkeletonCardComponent"
                                            }
                                          },
                                          {
                                            "type": "element",
                                            "content": {
                                              "elementType": "component",
                                              "name": "skeletonCardComponent",
                                              "semanticType": "SkeletonCardComponent"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "conditional",
                            "content": {
                              "reference": {
                                "type": "static",
                                "content": "unknown"
                              },
                              "value": true,
                              "node": {
                                "type": "element",
                                "content": {
                                  "elementType": "div",
                                  "name": "div",
                                  "attrs": {
                                    "className": {
                                      "type": "static",
                                      "content": "mt-6 flex w-full items-center justify-center text-center"
                                    }
                                  },
                                  "children": [
                                    {
                                      "type": "element",
                                      "content": {
                                        "elementType": "div",
                                        "name": "div",
                                        "attrs": {
                                          "className": {
                                            "type": "static",
                                            "content": "flex h-full w-full flex-col"
                                          }
                                        },
                                        "children": [
                                          {
                                            "type": "element",
                                            "content": {
                                              "elementType": "div",
                                              "name": "div",
                                              "attrs": {
                                                "className": {
                                                  "type": "static",
                                                  "content": "flex w-full flex-col gap-4"
                                                }
                                              },
                                              "children": [
                                                {
                                                  "type": "element",
                                                  "content": {
                                                    "elementType": "div",
                                                    "name": "div",
                                                    "attrs": {
                                                      "className": {
                                                        "type": "static",
                                                        "content": "grid w-full gap-4"
                                                      }
                                                    },
                                                    "children": [
                                                      {
                                                        "type": "conditional",
                                                        "content": {
                                                          "reference": {
                                                            "type": "dynamic",
                                                            "content": {
                                                              "referenceType": "state",
                                                              "id": "selectFilter",
                                                              "operator": "!=",
                                                              "compareValue": "all"
                                                            }
                                                          },
                                                          "value": true,
                                                          "node": {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "fragment",
                                                              "name": "fragmentContainer",
                                                              "children": [
                                                                {
                                                                  "type": "element",
                                                                  "content": {
                                                                    "elementType": "container",
                                                                    "name": "content"
                                                                  }
                                                                },
                                                                {
                                                                  "type": "conditional",
                                                                  "content": {
                                                                    "reference": {
                                                                      "type": "dynamic",
                                                                      "content": {
                                                                        "referenceType": "state",
                                                                        "id": "selectFilter",
                                                                        "operator": "===",
                                                                        "compareValue": "createdbyme"
                                                                      }
                                                                    },
                                                                    "value": true,
                                                                    "node": {
                                                                      "type": "element",
                                                                      "content": {
                                                                        "elementType": "container",
                                                                        "name": "content"
                                                                      }
                                                                    },
                                                                    "fallbackNode": {
                                                                      "type": "element",
                                                                      "content": {
                                                                        "elementType": "container",
                                                                        "name": "content"
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "type": "element",
                                                                  "content": {
                                                                    "elementType": "container",
                                                                    "name": "content"
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          "fallbackNode": {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "fragment",
                                                              "name": "fragmentContainer",
                                                              "children": [
                                                                {
                                                                  "type": "element",
                                                                  "content": {
                                                                    "elementType": "container",
                                                                    "name": "content"
                                                                  }
                                                                },
                                                                {
                                                                  "type": "conditional",
                                                                  "content": {
                                                                    "reference": {
                                                                      "type": "dynamic",
                                                                      "content": {
                                                                        "referenceType": "state",
                                                                        "id": "tabActive",
                                                                        "operator": "==",
                                                                        "compareValue": "Flows"
                                                                      }
                                                                    },
                                                                    "value": true,
                                                                    "node": {
                                                                      "type": "element",
                                                                      "content": {
                                                                        "elementType": "container",
                                                                        "name": "content"
                                                                      }
                                                                    },
                                                                    "fallbackNode": {
                                                                      "type": "element",
                                                                      "content": {
                                                                        "elementType": "container",
                                                                        "name": "content"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "conditional",
                      "content": {
                        "reference": {
                          "type": "static",
                          "content": "unknown"
                        },
                        "value": true,
                        "node": {
                          "type": "element",
                          "content": {
                            "elementType": "div",
                            "name": "div",
                            "attrs": {
                              "className": {
                                "type": "static",
                                "content": "relative py-6"
                              }
                            },
                            "children": [
                              {
                                "type": "element",
                                "content": {
                                  "elementType": "component",
                                  "name": "paginatorComponent",
                                  "semanticType": "PaginatorComponent",
                                  "attrs": {
                                    "pageIndex": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "state",
                                        "id": "pageIndex"
                                      }
                                    },
                                    "pageSize": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "state",
                                        "id": "pageSize"
                                      }
                                    },
                                    "rowsCount": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "STORE_PAGINATION_ROWS_COUNT"
                                      }
                                    },
                                    "totalRowsCount": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "state",
                                        "id": "totalRowsCount"
                                      }
                                    },
                                    "paginate": {
                                      "type": "dynamic",
                                      "content": {
                                        "referenceType": "function",
                                        "id": "inlineFunction"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "behaviors": {
          "useStoreStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useContext": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useAlertStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useFlowsManagerStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useParams": {
            "type": "hook",
            "intent": "route-params",
            "description": "Custom hook for component logic"
          },
          "useUtilityStore": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useCustomNavigate": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "navigation": {
            "type": "navigation",
            "intent": "page-navigation",
            "description": "Handles programmatic navigation"
          }
        }
      }
    },
    {
      "id": "ni0021",
      "type": "interface",
      "name": "ViewPage",
      "description": "Interface page: ViewPage",
      "route": "view",
      "path": "src/frontend/src/pages/ViewPage/index.tsx",
      "uidl_definition_conceptual": {
        "name": "ViewPage",
        "propDefinitions": {},
        "stateDefinitions": {},
        "node": {
          "type": "element",
          "content": {
            "elementType": "div",
            "name": "div",
            "attrs": {
              "className": {
                "type": "static",
                "content": "flow-page-positioning"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "component",
                  "name": "Page",
                  "semanticType": "Page",
                  "attrs": {
                    "view": {
                      "type": "static",
                      "content": true
                    }
                  }
                }
              }
            ]
          }
        },
        "behaviors": {
          "useFlowsManagerStore": {
            "type": "hook",
            "intent": "flow-data",
            "description": "Custom hook for component logic"
          },
          "useParams": {
            "type": "hook",
            "intent": "route-params",
            "description": "Custom hook for component logic"
          },
          "useCustomNavigate": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "useEffect": {
            "type": "hook",
            "intent": "custom-logic",
            "description": "Custom hook for component logic"
          },
          "navigation": {
            "type": "navigation",
            "intent": "page-navigation",
            "description": "Handles programmatic navigation"
          }
        }
      }
    },
    {
      "id": "ns0001",
      "type": "schema",
      "name": "User",
      "description": "Represents an authenticated user in the LangBuilder system with associated flows, API keys, variables, and folders. Users can have superuser privileges and track various opt-in actions.",
      "path": "src/backend/base/langbuilder/services/database/models/user/model.py",
      "graphql_schema_physical": "\"\"\"User entity - Core authentication and user management\n\nRepresents a user account with authentication, authorization, and relationship tracking.\nUsers own flows, folders, variables, and API keys. Supports profile customization,\nactivity tracking, and opt-in feature tracking.\n\"\"\"\n\ntype User {\n  \"Unique identifier for the user\"\n  id: UUID!\n  \n  \"Unique username for authentication\"\n  username: String!\n  \n  \"Hashed password for authentication\"\n  password: String!\n  \n  \"Optional profile image URL or path\"\n  profile_image: String\n  \n  \"Indicates if the user account is active\"\n  is_active: Boolean!\n  \n  \"Indicates if the user has superuser privileges\"\n  is_superuser: Boolean!\n  \n  \"Timestamp when the user account was created\"\n  create_at: DateTime!\n  \n  \"Timestamp when the user account was last updated\"\n  updated_at: DateTime!\n  \n  \"Timestamp of the user's last login\"\n  last_login_at: DateTime\n  \n  \"Store API key for marketplace integration\"\n  store_api_key: String\n  \n  \"User opt-in preferences and actions\"\n  optins: UserOptin\n  \n  \"API keys associated with this user\"\n  api_keys: [ApiKey!]!\n  \n  \"Flows created by this user\"\n  flows: [Flow!]!\n  \n  \"Global variables owned by this user\"\n  variables: [Variable!]!\n  \n  \"Folders/projects owned by this user\"\n  folders: [Folder!]!\n}\n\n\"\"\"User opt-in tracking for various features and actions\"\"\"\ntype UserOptin {\n  \"User has starred the GitHub repository\"\n  github_starred: Boolean!\n  \n  \"User has dismissed the dialog\"\n  dialog_dismissed: Boolean!\n  \n  \"User has clicked the Discord link\"\n  discord_clicked: Boolean!\n}\n\n\"\"\"Input type for creating a new user\"\"\"\ninput UserCreateInput {\n  \"Username for the new user (must be unique)\"\n  username: String!\n  \n  \"Password for the new user\"\n  password: String!\n  \n  \"Optional opt-in preferences\"\n  optins: UserOptinInput\n}\n\n\"\"\"Input type for updating a user\"\"\"\ninput UserUpdateInput {\n  \"New username (must be unique if changed)\"\n  username: String\n  \n  \"New profile image URL\"\n  profile_image: String\n  \n  \"New password\"\n  password: String\n  \n  \"Update active status\"\n  is_active: Boolean\n  \n  \"Update superuser status\"\n  is_superuser: Boolean\n  \n  \"Update last login timestamp\"\n  last_login_at: DateTime\n  \n  \"Update opt-in preferences\"\n  optins: UserOptinInput\n}\n\ninput UserOptinInput {\n  github_starred: Boolean\n  dialog_dismissed: Boolean\n  discord_clicked: Boolean\n}"
    },
    {
      "id": "ns0002",
      "type": "schema",
      "name": "Flow",
      "description": "Represents a visual workflow/flow in LangBuilder. Flows contain nodes and edges defining the logic pipeline, can be components or full applications, and support webhooks, MCP integration, and various access types. Each flow belongs to a user and optionally to a folder.",
      "path": "src/backend/base/langbuilder/services/database/models/flow/model.py",
      "graphql_schema_physical": "\"\"\"Flow entity - Visual workflow/pipeline representation\n\nRepresents a complete workflow with nodes and edges, supporting component reuse,\nwebhook endpoints, MCP server integration, and public/private access control.\nFlows can be locked for editing and support rich metadata (icons, colors, tags).\n\"\"\"\n\ntype Flow {\n  \"Unique identifier for the flow\"\n  id: UUID!\n  \n  \"Name of the flow (must be unique per user)\"\n  name: String!\n  \n  \"Optional description of the flow's purpose\"\n  description: String\n  \n  \"Icon representation (emoji or lucide icon name)\"\n  icon: String\n  \n  \"Background color for the icon (hex format #RRGGBB)\"\n  icon_bg_color: String\n  \n  \"Gradient style for visual representation\"\n  gradient: String\n  \n  \"Flow data structure containing nodes and edges\"\n  data: FlowData\n  \n  \"Indicates if this flow is a reusable component\"\n  is_component: Boolean\n  \n  \"Timestamp of last update\"\n  updated_at: DateTime\n  \n  \"Indicates if flow can be accessed via webhook endpoint\"\n  webhook: Boolean\n  \n  \"URL-safe endpoint name for API access (alphanumeric, hyphens, underscores)\"\n  endpoint_name: String\n  \n  \"Tags for categorization and search\"\n  tags: [String!]\n  \n  \"Indicates if the flow is locked from editing\"\n  locked: Boolean\n  \n  \"Indicates if flow is exposed in MCP (Model Context Protocol) server\"\n  mcp_enabled: Boolean\n  \n  \"Name of the MCP action associated with this flow\"\n  action_name: String\n  \n  \"Description of the MCP action\"\n  action_description: String\n  \n  \"Access control type for the flow\"\n  access_type: AccessType!\n  \n  \"ID of the user who owns this flow\"\n  user_id: UUID\n  \n  \"User who owns this flow\"\n  user: User\n  \n  \"ID of the folder containing this flow\"\n  folder_id: UUID\n  \n  \"Folder containing this flow\"\n  folder: Folder\n  \n  \"Filesystem path for file-based flows\"\n  fs_path: String\n}\n\n\"\"\"Flow data structure containing the visual graph\"\"\"\ntype FlowData {\n  \"List of nodes in the flow\"\n  nodes: [FlowNode!]!\n  \n  \"List of edges connecting nodes\"\n  edges: [FlowEdge!]!\n}\n\n\"\"\"Node in a flow graph\"\"\"\ntype FlowNode {\n  \"Unique node identifier within the flow\"\n  id: String!\n  \n  \"Node type/class\"\n  type: String!\n  \n  \"Node configuration and data\"\n  data: JSON!\n  \n  \"Visual position of the node\"\n  position: Position\n}\n\n\"\"\"Edge connecting two nodes in a flow\"\"\"\ntype FlowEdge {\n  \"Unique edge identifier\"\n  id: String!\n  \n  \"Source node ID\"\n  source: String!\n  \n  \"Target node ID\"\n  target: String!\n  \n  \"Source handle ID\"\n  sourceHandle: String\n  \n  \"Target handle ID\"\n  targetHandle: String\n}\n\n\"\"\"2D position for visual layout\"\"\"\ntype Position {\n  x: Float!\n  y: Float!\n}\n\n\"\"\"Access control enum for flows\"\"\"\nenum AccessType {\n  \"Flow is private to the owner\"\n  PRIVATE\n  \n  \"Flow is publicly accessible\"\n  PUBLIC\n}\n\n\"\"\"Input type for creating a new flow\"\"\"\ninput FlowCreateInput {\n  name: String!\n  description: String\n  icon: String\n  icon_bg_color: String\n  gradient: String\n  data: JSON\n  is_component: Boolean\n  webhook: Boolean\n  endpoint_name: String\n  tags: [String!]\n  locked: Boolean\n  mcp_enabled: Boolean\n  action_name: String\n  action_description: String\n  access_type: AccessType\n  user_id: UUID\n  folder_id: UUID\n  fs_path: String\n}\n\n\"\"\"Input type for updating a flow\"\"\"\ninput FlowUpdateInput {\n  name: String\n  description: String\n  data: JSON\n  folder_id: UUID\n  endpoint_name: String\n  mcp_enabled: Boolean\n  locked: Boolean\n  action_name: String\n  action_description: String\n  access_type: AccessType\n  fs_path: String\n}"
    },
    {
      "id": "ns0003",
      "type": "schema",
      "name": "Folder",
      "description": "Represents a folder/project for organizing flows. Folders support hierarchical nesting with parent-child relationships and can have authentication settings. Each folder belongs to a user and can contain multiple flows.",
      "path": "src/backend/base/langbuilder/services/database/models/folder/model.py",
      "graphql_schema_physical": "\"\"\"Folder entity - Organizational unit for flows\n\nRepresents a folder/project that contains and organizes flows. Supports hierarchical\nnesting, custom authentication settings, and ownership tracking. Folders can have\nparent-child relationships for complex organizational structures.\n\"\"\"\n\ntype Folder {\n  \"Unique identifier for the folder\"\n  id: UUID!\n  \n  \"Name of the folder (must be unique per user)\"\n  name: String!\n  \n  \"Optional description of the folder's purpose\"\n  description: String\n  \n  \"Authentication settings for the folder/project\"\n  auth_settings: FolderAuthSettings\n  \n  \"ID of the parent folder (null for root folders)\"\n  parent_id: UUID\n  \n  \"Parent folder (for nested folder structures)\"\n  parent: Folder\n  \n  \"Child folders nested under this folder\"\n  children: [Folder!]!\n  \n  \"ID of the user who owns this folder\"\n  user_id: UUID\n  \n  \"User who owns this folder\"\n  user: User!\n  \n  \"Flows contained in this folder\"\n  flows: [Flow!]!\n}\n\n\"\"\"Authentication settings for a folder/project\"\"\"\ntype FolderAuthSettings {\n  \"Custom authentication configuration as JSON\"\n  settings: JSON\n}\n\n\"\"\"Input type for creating a new folder\"\"\"\ninput FolderCreateInput {\n  \"Name of the folder (must be unique per user)\"\n  name: String!\n  \n  \"Optional description\"\n  description: String\n  \n  \"Optional authentication settings\"\n  auth_settings: JSON\n  \n  \"Optional parent folder ID for nesting\"\n  parent_id: UUID\n  \n  \"Optional list of component IDs to include\"\n  components_list: [UUID!]\n  \n  \"Optional list of flow IDs to include\"\n  flows_list: [UUID!]\n}\n\n\"\"\"Input type for updating a folder\"\"\"\ninput FolderUpdateInput {\n  \"New name for the folder\"\n  name: String\n  \n  \"New description\"\n  description: String\n  \n  \"New parent folder ID\"\n  parent_id: UUID\n  \n  \"Updated list of component IDs\"\n  components: [UUID!]\n  \n  \"Updated list of flow IDs\"\n  flows: [UUID!]\n  \n  \"Updated authentication settings\"\n  auth_settings: JSON\n}"
    },
    {
      "id": "ns0004",
      "type": "schema",
      "name": "MessageTable",
      "description": "Represents a message in a chat/conversation session. Messages track sender information, content with rich text support, file attachments, properties, and content blocks. Messages are associated with specific flows and sessions.",
      "path": "src/backend/base/langbuilder/services/database/models/message/model.py",
      "graphql_schema_physical": "\"\"\"Message entity - Chat/conversation message\n\nRepresents a message in a conversation or chat session. Supports rich content including\ntext, files, properties, content blocks, and error/edit tracking. Messages are associated\nwith flows and sessions for context.\n\"\"\"\n\ntype Message {\n  \"Unique identifier for the message\"\n  id: UUID!\n  \n  \"Timestamp when the message was sent\"\n  timestamp: DateTime!\n  \n  \"Sender identifier (user, bot, system, etc.)\"\n  sender: String!\n  \n  \"Display name of the sender\"\n  sender_name: String!\n  \n  \"Session ID for grouping related messages\"\n  session_id: String!\n  \n  \"Message text content\"\n  text: String!\n  \n  \"List of file paths/URLs attached to the message\"\n  files: [String!]!\n  \n  \"Indicates if this message represents an error\"\n  error: Boolean!\n  \n  \"Indicates if this message is an edited version\"\n  edit: Boolean!\n  \n  \"Additional properties for the message\"\n  properties: MessageProperties!\n  \n  \"Category of the message (message, system, error, etc.)\"\n  category: String!\n  \n  \"Rich content blocks for structured message content\"\n  content_blocks: [ContentBlock!]!\n  \n  \"ID of the flow this message is associated with\"\n  flow_id: UUID\n}\n\n\"\"\"Message properties for metadata and context\"\"\"\ntype MessageProperties {\n  \"Source of the message\"\n  source: MessageSource\n  \n  \"Icon for the message\"\n  icon: String\n  \n  \"Background color\"\n  background_color: String\n  \n  \"Additional metadata as JSON\"\n  metadata: JSON\n}\n\n\"\"\"Source information for a message\"\"\"\ntype MessageSource {\n  \"Source ID\"\n  id: String\n  \n  \"Display name of the source\"\n  display_name: String\n  \n  \"Source type\"\n  type: String\n}\n\n\"\"\"Content block for rich message content\"\"\"\ntype ContentBlock {\n  \"Type of content block\"\n  type: String!\n  \n  \"Title of the block\"\n  title: String\n  \n  \"Content of the block\"\n  content: JSON!\n  \n  \"Additional properties\"\n  properties: JSON\n}\n\n\"\"\"Input type for creating a new message\"\"\"\ninput MessageCreateInput {\n  \"Sender identifier\"\n  sender: String!\n  \n  \"Sender display name\"\n  sender_name: String!\n  \n  \"Session ID\"\n  session_id: String!\n  \n  \"Message text\"\n  text: String!\n  \n  \"Optional file attachments\"\n  files: [String!]\n  \n  \"Is this an error message?\"\n  error: Boolean\n  \n  \"Is this an edited message?\"\n  edit: Boolean\n  \n  \"Message properties\"\n  properties: JSON\n  \n  \"Message category\"\n  category: String\n  \n  \"Content blocks\"\n  content_blocks: [JSON!]\n  \n  \"Associated flow ID\"\n  flow_id: UUID\n}\n\n\"\"\"Input type for updating a message\"\"\"\ninput MessageUpdateInput {\n  text: String\n  sender: String\n  sender_name: String\n  session_id: String\n  files: [String!]\n  edit: Boolean\n  error: Boolean\n  properties: JSON\n}"
    },
    {
      "id": "ns0005",
      "type": "schema",
      "name": "ApiKey",
      "description": "Represents an API key for authentication and authorization. Tracks usage statistics, creation date, last usage, and active status. Each API key belongs to a specific user and can be deactivated without deletion.",
      "path": "src/backend/base/langbuilder/services/database/models/api_key/model.py",
      "graphql_schema_physical": "\"\"\"ApiKey entity - API authentication key\n\nRepresents an API key for authenticating API requests. Tracks usage statistics,\nactive status, and creation/usage timestamps. Keys can be masked for security\nand belong to a specific user account.\n\"\"\"\n\ntype ApiKey {\n  \"Unique identifier for the API key\"\n  id: UUID!\n  \n  \"Optional name/label for the API key\"\n  name: String\n  \n  \"The actual API key value (masked in read operations)\"\n  api_key: String!\n  \n  \"Timestamp when the key was created\"\n  created_at: DateTime!\n  \n  \"Timestamp when the key was last used\"\n  last_used_at: DateTime\n  \n  \"Total number of times this key has been used\"\n  total_uses: Int!\n  \n  \"Indicates if the API key is currently active\"\n  is_active: Boolean!\n  \n  \"ID of the user who owns this API key\"\n  user_id: UUID!\n  \n  \"User who owns this API key\"\n  user: User!\n}\n\n\"\"\"Input type for creating a new API key\"\"\"\ninput ApiKeyCreateInput {\n  \"Optional name for the API key\"\n  name: String\n  \n  \"Custom API key value (auto-generated if not provided)\"\n  api_key: String\n  \n  \"User ID (optional, defaults to current user)\"\n  user_id: UUID\n}\n\n\"\"\"Input type for updating an API key\"\"\"\ninput ApiKeyUpdateInput {\n  \"Update the name\"\n  name: String\n  \n  \"Update active status\"\n  is_active: Boolean\n}"
    },
    {
      "id": "ns0006",
      "type": "schema",
      "name": "Variable",
      "description": "Represents a global variable or credential. Variables store encrypted values with optional default fields and type classification. Each variable belongs to a user and supports both simple variables and secure credentials.",
      "path": "src/backend/base/langbuilder/services/database/models/variable/model.py",
      "graphql_schema_physical": "\"\"\"Variable entity - Global variable/credential storage\n\nRepresents a global variable or credential with encrypted value storage. Supports\ntyped variables (generic or credential) with optional default fields for structured data.\nVariables are user-scoped and track creation/update timestamps.\n\"\"\"\n\ntype Variable {\n  \"Unique identifier for the variable\"\n  id: UUID!\n  \n  \"Name of the variable (must be unique per user)\"\n  name: String!\n  \n  \"Encrypted value of the variable (masked for credential type)\"\n  value: String!\n  \n  \"Optional default fields for structured variables\"\n  default_fields: [String!]\n  \n  \"Type of variable (generic or credential)\"\n  type: String\n  \n  \"Timestamp when the variable was created\"\n  created_at: DateTime\n  \n  \"Timestamp when the variable was last updated\"\n  updated_at: DateTime\n  \n  \"ID of the user who owns this variable\"\n  user_id: UUID!\n  \n  \"User who owns this variable\"\n  user: User!\n}\n\n\"\"\"Input type for creating a new variable\"\"\"\ninput VariableCreateInput {\n  \"Name of the variable\"\n  name: String!\n  \n  \"Encrypted value\"\n  value: String!\n  \n  \"Optional default fields\"\n  default_fields: [String!]\n  \n  \"Variable type\"\n  type: String\n}\n\n\"\"\"Input type for updating a variable\"\"\"\ninput VariableUpdateInput {\n  \"Updated name\"\n  name: String\n  \n  \"Updated encrypted value\"\n  value: String\n  \n  \"Updated default fields\"\n  default_fields: [String!]\n}"
    },
    {
      "id": "ns0007",
      "type": "schema",
      "name": "File",
      "description": "Represents an uploaded file. Tracks file metadata including name, path, size, storage provider, and timestamps. Each file belongs to a user and must have a unique name.",
      "path": "src/backend/base/langbuilder/services/database/models/file/model.py",
      "graphql_schema_physical": "\"\"\"File entity - Uploaded file tracking\n\nRepresents a file uploaded to the system. Tracks file metadata including storage location,\nsize, provider, and timestamps. Files have unique names and belong to specific users.\n\"\"\"\n\ntype File {\n  \"Unique identifier for the file\"\n  id: UUID!\n  \n  \"ID of the user who owns this file\"\n  user_id: UUID!\n  \n  \"Name of the file (must be unique)\"\n  name: String!\n  \n  \"Storage path to the file\"\n  path: String!\n  \n  \"File size in bytes\"\n  size: Int!\n  \n  \"Storage provider (local, S3, etc.)\"\n  provider: String\n  \n  \"Timestamp when the file was created\"\n  created_at: DateTime!\n  \n  \"Timestamp when the file was last updated\"\n  updated_at: DateTime!\n}\n\n\"\"\"Input type for creating a file record\"\"\"\ninput FileCreateInput {\n  \"User ID\"\n  user_id: UUID!\n  \n  \"File name (must be unique)\"\n  name: String!\n  \n  \"Storage path\"\n  path: String!\n  \n  \"File size in bytes\"\n  size: Int!\n  \n  \"Optional storage provider\"\n  provider: String\n}\n\n\"\"\"Input type for updating a file record\"\"\"\ninput FileUpdateInput {\n  \"Updated file name\"\n  name: String\n  \n  \"Updated storage path\"\n  path: String\n  \n  \"Updated file size\"\n  size: Int\n  \n  \"Updated provider\"\n  provider: String\n}"
    },
    {
      "id": "ns0008",
      "type": "schema",
      "name": "VertexBuildTable",
      "description": "Represents a build/execution of a vertex (node) in a flow. Tracks the execution data, artifacts produced, parameters used, validity status, and timestamps. VertexBuilds are associated with specific flows and maintain execution history.",
      "path": "src/backend/base/langbuilder/services/database/models/vertex_builds/model.py",
      "graphql_schema_physical": "\"\"\"VertexBuild entity - Node execution record\n\nRepresents the build/execution record of a single vertex (node) in a flow. Tracks\nexecution data, generated artifacts, input parameters, validity status, and timestamps.\nUsed for debugging, monitoring, and caching flow executions.\n\"\"\"\n\ntype VertexBuild {\n  \"Unique identifier for this build record\"\n  build_id: UUID!\n  \n  \"Timestamp when the build was executed\"\n  timestamp: DateTime!\n  \n  \"Vertex/node ID within the flow\"\n  id: String!\n  \n  \"Execution data and results (serialized with size limits)\"\n  data: JSON\n  \n  \"Artifacts generated during execution (serialized with size limits)\"\n  artifacts: JSON\n  \n  \"Input parameters used for the build (serialized)\"\n  params: String\n  \n  \"Indicates if the build completed successfully and is valid\"\n  valid: Boolean!\n  \n  \"ID of the flow this build belongs to\"\n  flow_id: UUID!\n}\n\n\"\"\"Input type for creating a vertex build record\"\"\"\ninput VertexBuildCreateInput {\n  \"Vertex/node ID\"\n  id: String!\n  \n  \"Execution data\"\n  data: JSON\n  \n  \"Generated artifacts\"\n  artifacts: JSON\n  \n  \"Input parameters\"\n  params: String\n  \n  \"Validity status\"\n  valid: Boolean!\n  \n  \"Associated flow ID\"\n  flow_id: UUID!\n}"
    },
    {
      "id": "ns0009",
      "type": "schema",
      "name": "TransactionTable",
      "description": "Represents a transaction/execution record for data flow between vertices. Tracks inputs, outputs, status, errors, and the source/target vertices involved. Transactions are associated with flows and provide execution audit trail.",
      "path": "src/backend/base/langbuilder/services/database/models/transactions/model.py",
      "graphql_schema_physical": "\"\"\"Transaction entity - Vertex-to-vertex execution record\n\nRepresents a transaction/data flow between vertices in a flow execution. Tracks input data,\noutput results, execution status, errors, and the vertices involved. Provides an audit trail\nfor flow executions and enables debugging of data transformations.\n\"\"\"\n\ntype Transaction {\n  \"Unique identifier for this transaction\"\n  id: UUID!\n  \n  \"Timestamp when the transaction occurred\"\n  timestamp: DateTime!\n  \n  \"Source vertex ID\"\n  vertex_id: String!\n  \n  \"Target vertex ID (if applicable)\"\n  target_id: String\n  \n  \"Input data for the transaction (serialized with size limits)\"\n  inputs: JSON\n  \n  \"Output data from the transaction (serialized with size limits)\"\n  outputs: JSON\n  \n  \"Execution status (success, error, pending, etc.)\"\n  status: String!\n  \n  \"Error message if the transaction failed\"\n  error: String\n  \n  \"ID of the flow this transaction belongs to\"\n  flow_id: UUID!\n}\n\n\"\"\"Input type for creating a transaction record\"\"\"\ninput TransactionCreateInput {\n  \"Source vertex ID\"\n  vertex_id: String!\n  \n  \"Optional target vertex ID\"\n  target_id: String\n  \n  \"Input data\"\n  inputs: JSON\n  \n  \"Output data\"\n  outputs: JSON\n  \n  \"Execution status\"\n  status: String!\n  \n  \"Optional error message\"\n  error: String\n  \n  \"Associated flow ID\"\n  flow_id: UUID!\n}"
    },
    {
      "id": "nl0001",
      "type": "logic",
      "name": "Verify Filesystem Path",
      "description": "Verify and create filesystem path if it doesn't exist",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "_verify_fs_path",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_verify_fs_path_statechart\",\n  \"initial\": \"getting_flow_dir\",\n  \"context\": {\n    \"flow_id\": \"UUID\",\n    \"flow_dir\": \"Path object\"\n  },\n  \"states\": {\n    \"getting_flow_dir\": {\n      \"entry\": \"get_flow_dir_path\",\n      \"description\": \"FLOWS_PATH / str(flow_id)\",\n      \"on\": {\n        \"PATH_OBTAINED\": \"checking_existence\"\n      }\n    },\n    \"checking_existence\": {\n      \"entry\": \"check_path_exists\",\n      \"description\": \"flow_dir.exists()\",\n      \"on\": {\n        \"EXISTS\": \"complete\",\n        \"NOT_EXISTS\": \"creating_directory\"\n      }\n    },\n    \"creating_directory\": {\n      \"entry\": \"create_directory\",\n      \"description\": \"flow_dir.mkdir(parents=True, exist_ok=True)\",\n      \"on\": {\n        \"CREATED\": \"complete\",\n        \"ERROR\": \"error_filesystem\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flow_dir\": \"Path to flow directory\"\n      }\n    },\n    \"error_filesystem\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\",\n      \"data\": {\n        \"error\": \"Failed to create directory\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0002",
      "type": "logic",
      "name": "Save Flow to Filesystem",
      "description": "Save flow data to filesystem asynchronously",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "_save_flow_to_fs",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_save_flow_to_fs_statechart\",\n  \"initial\": \"verifying_path\",\n  \"context\": {\n    \"db_flow\": \"Flow object\",\n    \"flow_dir\": \"Path object\",\n    \"flow_data\": \"Flow dict\"\n  },\n  \"states\": {\n    \"verifying_path\": {\n      \"entry\": \"call_verify_fs_path\",\n      \"description\": \"Calls _verify_fs_path(db_flow.id)\",\n      \"on\": {\n        \"PATH_VERIFIED\": \"serializing_flow\",\n        \"ERROR\": \"error_filesystem\"\n      }\n    },\n    \"serializing_flow\": {\n      \"entry\": \"serialize_to_dict\",\n      \"description\": \"db_flow.model_dump(exclude={'user_id'})\",\n      \"on\": {\n        \"SERIALIZED\": \"writing_json_file\"\n      }\n    },\n    \"writing_json_file\": {\n      \"entry\": \"write_json\",\n      \"description\": \"(flow_dir / 'flow.json').write_text(json.dumps(flow_data, indent=2))\",\n      \"on\": {\n        \"WRITTEN\": \"complete\",\n        \"ERROR\": \"error_filesystem\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"file_path\": \"Path to saved flow.json\"\n      }\n    },\n    \"error_filesystem\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\",\n      \"data\": {\n        \"error\": \"Failed to save flow to filesystem\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0003",
      "type": "logic",
      "name": "Create New Flow Logic",
      "description": "Create a new flow with unique name generation and folder assignment",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "_new_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_new_flow_statechart\",\n  \"initial\": \"checking_unique_name\",\n  \"context\": {\n    \"flow\": \"Flow object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"existing_flow\": \"Query result\"\n  },\n  \"states\": {\n    \"checking_unique_name\": {\n      \"entry\": \"query_flow_by_name\",\n      \"description\": \"SELECT * FROM flow WHERE name = flow.name AND user_id = user_id\",\n      \"on\": {\n        \"NAME_EXISTS\": \"generating_unique_name\",\n        \"NAME_AVAILABLE\": \"checking_unique_endpoint\"\n      }\n    },\n    \"generating_unique_name\": {\n      \"entry\": \"query_numbered_flows\",\n      \"description\": \"SELECT * FROM flow WHERE name LIKE '{name} (%)' AND user_id = user_id\",\n      \"on\": {\n        \"NUMBERS_FOUND\": \"appending_number\",\n        \"NO_NUMBERS\": \"appending_first_number\"\n      }\n    },\n    \"appending_number\": {\n      \"entry\": \"append_max_plus_one\",\n      \"description\": \"flow.name = f\\\"{flow.name} ({max(numbers) + 1})\\\"\",\n      \"on\": {\n        \"APPENDED\": \"checking_unique_endpoint\"\n      }\n    },\n    \"appending_first_number\": {\n      \"entry\": \"append_one\",\n      \"description\": \"flow.name = f\\\"{flow.name} (1)\\\"\",\n      \"on\": {\n        \"APPENDED\": \"checking_unique_endpoint\"\n      }\n    },\n    \"checking_unique_endpoint\": {\n      \"entry\": \"query_flow_by_endpoint\",\n      \"description\": \"SELECT * FROM flow WHERE endpoint_name = endpoint AND user_id = user_id\",\n      \"on\": {\n        \"ENDPOINT_EXISTS\": \"generating_unique_endpoint\",\n        \"ENDPOINT_NULL\": \"resolving_folder\",\n        \"ENDPOINT_AVAILABLE\": \"resolving_folder\"\n      }\n    },\n    \"generating_unique_endpoint\": {\n      \"entry\": \"append_uuid_to_endpoint\",\n      \"description\": \"Appends short UUID to make endpoint unique\",\n      \"on\": {\n        \"GENERATED\": \"resolving_folder\"\n      }\n    },\n    \"resolving_folder\": {\n      \"entry\": \"check_folder_id\",\n      \"on\": {\n        \"FOLDER_PROVIDED\": \"creating_flow_object\",\n        \"FOLDER_NULL\": \"getting_default_folder\"\n      }\n    },\n    \"getting_default_folder\": {\n      \"entry\": \"query_default_folder\",\n      \"description\": \"SELECT * FROM folder WHERE name = 'My Projects' AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"assigning_folder\",\n        \"NOT_FOUND\": \"error_no_default_folder\"\n      }\n    },\n    \"assigning_folder\": {\n      \"entry\": \"set_folder_id\",\n      \"description\": \"flow.folder_id = default_folder.id\",\n      \"on\": {\n        \"ASSIGNED\": \"creating_flow_object\"\n      }\n    },\n    \"creating_flow_object\": {\n      \"entry\": \"instantiate_flow_model\",\n      \"description\": \"Create Flow(**flow.model_dump(), user_id=user_id)\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_flow)\",\n      \"on\": {\n        \"ADDED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"db_flow\": \"Flow object ready for commit\"\n      }\n    },\n    \"error_no_default_folder\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Default folder 'My Projects' not found\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0004",
      "type": "logic",
      "name": "Create Flow Endpoint Handler",
      "description": "POST /flows/ - Create a new flow",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "create_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_flow_statechart\",\n  \"initial\": \"calling_new_flow\",\n  \"context\": {\n    \"flow_data\": \"Flow object from request\",\n    \"user_id\": \"UUID of authenticated user\",\n    \"session\": \"Database session\",\n    \"db_flow\": \"Created flow object\"\n  },\n  \"states\": {\n    \"calling_new_flow\": {\n      \"entry\": \"call_new_flow_helper\",\n      \"description\": \"Calls _new_flow(session, flow, user_id) to create and validate flow\",\n      \"on\": {\n        \"SUCCESS\": \"committing_transaction\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit() - Persists flow to database\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_flow\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_flow\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_flow) - Reloads flow with generated IDs\",\n      \"on\": {\n        \"REFRESHED\": \"saving_to_filesystem\"\n      }\n    },\n    \"saving_to_filesystem\": {\n      \"entry\": \"save_flow_to_fs\",\n      \"description\": \"await _save_flow_to_fs(db_flow) - Saves flow JSON to filesystem\",\n      \"on\": {\n        \"SAVED\": \"complete\",\n        \"ERROR\": \"error_filesystem\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flow\": \"FlowRead object with all fields\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Validation error from _new_flow\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Unique constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    },\n    \"error_filesystem\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Filesystem save error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0005",
      "type": "logic",
      "name": "List Flows Endpoint Handler",
      "description": "GET /flows/ - Retrieve list of flows with pagination",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "read_flows",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_flows_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"folder_id\": \"Optional UUID\",\n    \"query\": \"SQLAlchemy select statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"select(Flow).where(Flow.user_id == user_id)\",\n      \"on\": {\n        \"QUERY_BUILT\": \"checking_folder_filter\"\n      }\n    },\n    \"checking_folder_filter\": {\n      \"entry\": \"check_folder_id_parameter\",\n      \"on\": {\n        \"FOLDER_PROVIDED\": \"adding_folder_filter\",\n        \"NO_FOLDER\": \"executing_query\"\n      }\n    },\n    \"adding_folder_filter\": {\n      \"entry\": \"add_where_clause\",\n      \"description\": \"query.where(Flow.folder_id == folder_id)\",\n      \"on\": {\n        \"FILTER_ADDED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_all\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_all\": {\n      \"entry\": \"fetch_all_results\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flows\": \"List[FlowRead]\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database query error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0006",
      "type": "logic",
      "name": "Read Flow by ID Logic",
      "description": "Read a single flow from database",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "_read_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_read_flow_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"flow_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"select(Flow).where(Flow.id == flow_id, Flow.user_id == user_id)\",\n      \"on\": {\n        \"QUERY_BUILT\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_first\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_first\": {\n      \"entry\": \"fetch_first_result\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FOUND\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flow\": \"Flow object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Flow not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database query error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0007",
      "type": "logic",
      "name": "Get Flow by ID Endpoint Handler",
      "description": "GET /flows/{flow_id} - Read a specific flow",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "read_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_flow_statechart\",\n  \"initial\": \"calling_read_flow_helper\",\n  \"context\": {\n    \"flow_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"calling_read_flow_helper\": {\n      \"entry\": \"call_read_flow\",\n      \"description\": \"Calls _read_flow(flow_id, session, user_id)\",\n      \"on\": {\n        \"FOUND\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flow\": \"FlowRead object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Flow not found\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0008",
      "type": "logic",
      "name": "Get Public Flow Endpoint Handler",
      "description": "GET /flows/public_flow/{flow_id} - Read a public flow",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "read_public_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_public_flow_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"flow_id\": \"UUID\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"select(Flow).where(Flow.id == flow_id, Flow.is_public == True)\",\n      \"on\": {\n        \"QUERY_BUILT\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_first\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_first\": {\n      \"entry\": \"fetch_first_result\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FOUND\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flow\": \"PublicFlowRead object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Public flow not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database query error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0009",
      "type": "logic",
      "name": "Update Flow Endpoint Handler",
      "description": "PATCH /flows/{flow_id} - Update flow data",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "update_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_flow_statechart\",\n  \"initial\": \"reading_existing_flow\",\n  \"context\": {\n    \"flow_id\": \"UUID\",\n    \"flow_update\": \"FlowUpdate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_flow\": \"Existing flow object\"\n  },\n  \"states\": {\n    \"reading_existing_flow\": {\n      \"entry\": \"call_read_flow\",\n      \"description\": \"Calls _read_flow(flow_id, session, user_id)\",\n      \"on\": {\n        \"FOUND\": \"updating_fields\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"updating_fields\": {\n      \"entry\": \"update_flow_fields\",\n      \"description\": \"Update db_flow with fields from flow_update.model_dump(exclude_unset=True)\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_flow)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_flow\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_flow\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_flow)\",\n      \"on\": {\n        \"REFRESHED\": \"saving_to_filesystem\"\n      }\n    },\n    \"saving_to_filesystem\": {\n      \"entry\": \"save_flow_to_fs\",\n      \"description\": \"await _save_flow_to_fs(db_flow)\",\n      \"on\": {\n        \"SAVED\": \"complete\",\n        \"ERROR\": \"error_filesystem\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flow\": \"Updated FlowRead object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Flow not found\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Unique constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    },\n    \"error_filesystem\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Filesystem save error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0010",
      "type": "logic",
      "name": "Delete Flow Endpoint Handler",
      "description": "DELETE /flows/{flow_id} - Delete a flow",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "delete_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_flow_statechart\",\n  \"initial\": \"reading_existing_flow\",\n  \"context\": {\n    \"flow_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_flow\": \"Flow object to delete\"\n  },\n  \"states\": {\n    \"reading_existing_flow\": {\n      \"entry\": \"call_read_flow\",\n      \"description\": \"Calls _read_flow(flow_id, session, user_id)\",\n      \"on\": {\n        \"FOUND\": \"deleting_from_session\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"deleting_from_session\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_flow) - Cascades to Message, Transaction, VertexBuild\",\n      \"on\": {\n        \"DELETED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Flow deleted successfully\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Flow not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0011",
      "type": "logic",
      "name": "Batch Create Flows Endpoint Handler",
      "description": "POST /flows/batch/ - Create multiple flows",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "create_flows",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_flows_statechart\",\n  \"initial\": \"iterating_flows\",\n  \"context\": {\n    \"flows\": \"List[FlowCreate]\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"created_flows\": \"List of created flows\",\n    \"current_flow\": \"Flow being processed\"\n  },\n  \"states\": {\n    \"iterating_flows\": {\n      \"entry\": \"get_next_flow\",\n      \"on\": {\n        \"HAS_FLOW\": \"creating_flow\",\n        \"NO_MORE_FLOWS\": \"committing_transaction\"\n      }\n    },\n    \"creating_flow\": {\n      \"entry\": \"call_new_flow\",\n      \"description\": \"Calls _new_flow(session, flow, user_id)\",\n      \"on\": {\n        \"SUCCESS\": \"adding_to_created_list\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"adding_to_created_list\": {\n      \"entry\": \"append_to_list\",\n      \"description\": \"created_flows.append(db_flow)\",\n      \"on\": {\n        \"ADDED\": \"iterating_flows\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit() - Commits all flows\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_flows\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_flows\": {\n      \"entry\": \"refresh_all_flows\",\n      \"description\": \"await session.refresh(flow) for each flow\",\n      \"on\": {\n        \"REFRESHED\": \"saving_all_to_filesystem\"\n      }\n    },\n    \"saving_all_to_filesystem\": {\n      \"entry\": \"save_all_flows\",\n      \"description\": \"await _save_flow_to_fs(flow) for each flow\",\n      \"on\": {\n        \"SAVED\": \"complete\",\n        \"ERROR\": \"error_filesystem\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flows\": \"List[FlowRead] of created flows\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Validation error\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Unique constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    },\n    \"error_filesystem\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Filesystem save error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0012",
      "type": "logic",
      "name": "Upload Flows Endpoint Handler",
      "description": "POST /flows/upload/ - Upload flows from file",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "upload_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"upload_file_projects_statechart\",\n  \"initial\": \"reading_file_content\",\n  \"context\": {\n    \"file\": \"UploadFile object\",\n    \"folder_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"flows\": \"List of parsed flows\"\n  },\n  \"states\": {\n    \"reading_file_content\": {\n      \"entry\": \"read_uploaded_file\",\n      \"description\": \"await file.read()\",\n      \"on\": {\n        \"READ\": \"checking_file_type\",\n        \"ERROR\": \"error_file_read\"\n      }\n    },\n    \"checking_file_type\": {\n      \"entry\": \"check_content_type\",\n      \"description\": \"Check if file is JSON or ZIP\",\n      \"on\": {\n        \"JSON_FILE\": \"parsing_json\",\n        \"ZIP_FILE\": \"extracting_zip\",\n        \"UNKNOWN\": \"error_unsupported_format\"\n      }\n    },\n    \"parsing_json\": {\n      \"entry\": \"parse_json_content\",\n      \"description\": \"json.loads(content)\",\n      \"on\": {\n        \"SINGLE_FLOW\": \"creating_single_flow\",\n        \"FLOW_ARRAY\": \"creating_multiple_flows\",\n        \"ERROR\": \"error_invalid_json\"\n      }\n    },\n    \"extracting_zip\": {\n      \"entry\": \"extract_zip_contents\",\n      \"description\": \"ZipFile(BytesIO(content)) and read all .json files\",\n      \"on\": {\n        \"EXTRACTED\": \"creating_multiple_flows\",\n        \"ERROR\": \"error_invalid_zip\"\n      }\n    },\n    \"creating_single_flow\": {\n      \"entry\": \"create_flow\",\n      \"description\": \"Calls _new_flow(session, flow, user_id)\",\n      \"on\": {\n        \"CREATED\": \"assigning_folder\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"creating_multiple_flows\": {\n      \"entry\": \"create_flows\",\n      \"description\": \"Iterates and calls _new_flow for each flow\",\n      \"on\": {\n        \"CREATED\": \"assigning_folder\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"assigning_folder\": {\n      \"entry\": \"set_folder_id\",\n      \"description\": \"flow.folder_id = folder_id for all flows\",\n      \"on\": {\n        \"ASSIGNED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_flows\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_flows\": {\n      \"entry\": \"refresh_all_flows\",\n      \"description\": \"await session.refresh(flow) for each flow\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flows\": \"List[FlowRead] of uploaded flows\"\n      }\n    },\n    \"error_file_read\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Failed to read uploaded file\"\n      }\n    },\n    \"error_unsupported_format\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Unsupported file format (must be JSON or ZIP)\"\n      }\n    },\n    \"error_invalid_json\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Invalid JSON in uploaded file\"\n      }\n    },\n    \"error_invalid_zip\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Invalid ZIP file\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Flow validation error\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Database constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0013",
      "type": "logic",
      "name": "Batch Delete Flows Endpoint Handler",
      "description": "DELETE /flows/ - Delete multiple flows by IDs",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "delete_multiple_flows",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_multiple_flows_statechart\",\n  \"initial\": \"iterating_flow_ids\",\n  \"context\": {\n    \"flow_ids\": \"List[UUID]\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"current_flow\": \"Flow being processed\",\n    \"remaining_flows\": \"Queue of flow IDs\"\n  },\n  \"states\": {\n    \"iterating_flow_ids\": {\n      \"entry\": \"get_next_flow_id\",\n      \"on\": {\n        \"HAS_FLOW\": \"reading_flow\",\n        \"NO_MORE_FLOWS\": \"committing_transaction\"\n      }\n    },\n    \"reading_flow\": {\n      \"entry\": \"call_read_flow\",\n      \"description\": \"Calls _read_flow(flow_id, session, user_id)\",\n      \"on\": {\n        \"FOUND\": \"deleting_flow\",\n        \"NOT_FOUND\": \"iterating_flow_ids\"\n      }\n    },\n    \"deleting_flow\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_flow)\",\n      \"on\": {\n        \"DELETED\": \"iterating_flow_ids\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit() - Commits all deletes\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Flows deleted successfully\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0014",
      "type": "logic",
      "name": "Download Flows Endpoint Handler",
      "description": "POST /flows/download/ - Download flows as zip",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "download_multiple_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"download_multiple_file_statechart\",\n  \"initial\": \"creating_memory_buffer\",\n  \"context\": {\n    \"flow_ids\": \"List[UUID]\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"zip_buffer\": \"BytesIO buffer\",\n    \"current_flow\": \"Flow being processed\"\n  },\n  \"states\": {\n    \"creating_memory_buffer\": {\n      \"entry\": \"create_bytes_io\",\n      \"description\": \"BytesIO() for in-memory ZIP\",\n      \"on\": {\n        \"CREATED\": \"creating_zip_file\"\n      }\n    },\n    \"creating_zip_file\": {\n      \"entry\": \"create_zipfile\",\n      \"description\": \"ZipFile(zip_buffer, 'w', ZIP_DEFLATED)\",\n      \"on\": {\n        \"CREATED\": \"iterating_flow_ids\"\n      }\n    },\n    \"iterating_flow_ids\": {\n      \"entry\": \"get_next_flow_id\",\n      \"on\": {\n        \"HAS_FLOW\": \"reading_flow\",\n        \"NO_MORE_FLOWS\": \"closing_zip_file\"\n      }\n    },\n    \"reading_flow\": {\n      \"entry\": \"call_read_flow\",\n      \"description\": \"Calls _read_flow(flow_id, session, user_id)\",\n      \"on\": {\n        \"FOUND\": \"serializing_flow\",\n        \"NOT_FOUND\": \"iterating_flow_ids\"\n      }\n    },\n    \"serializing_flow\": {\n      \"entry\": \"serialize_to_json\",\n      \"description\": \"json.dumps(flow.model_dump(), indent=2)\",\n      \"on\": {\n        \"SERIALIZED\": \"adding_to_zip\"\n      }\n    },\n    \"adding_to_zip\": {\n      \"entry\": \"write_to_zip\",\n      \"description\": \"zipfile.writestr(f'{flow.name}.json', flow_json)\",\n      \"on\": {\n        \"ADDED\": \"iterating_flow_ids\",\n        \"ERROR\": \"error_zip\"\n      }\n    },\n    \"closing_zip_file\": {\n      \"entry\": \"close_zip\",\n      \"description\": \"zipfile.close()\",\n      \"on\": {\n        \"CLOSED\": \"seeking_buffer\"\n      }\n    },\n    \"seeking_buffer\": {\n      \"entry\": \"seek_to_start\",\n      \"description\": \"zip_buffer.seek(0)\",\n      \"on\": {\n        \"SEEKED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"response\": \"StreamingResponse with ZIP file\"\n      }\n    },\n    \"error_zip\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Failed to create ZIP file\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0015",
      "type": "logic",
      "name": "Get Basic Examples Endpoint Handler",
      "description": "GET /flows/basic_examples/ - Retrieve basic example flows",
      "path": "src/backend/base/langbuilder/api/v1/flows.py",
      "category": "API Endpoint",
      "function": "read_basic_examples",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_basic_examples_statechart\",\n  \"initial\": \"getting_examples_path\",\n  \"context\": {\n    \"examples_path\": \"Path to examples directory\",\n    \"flow_files\": \"List of JSON files\"\n  },\n  \"states\": {\n    \"getting_examples_path\": {\n      \"entry\": \"get_path\",\n      \"description\": \"Path to basic_examples directory\",\n      \"on\": {\n        \"PATH_OBTAINED\": \"checking_directory_exists\"\n      }\n    },\n    \"checking_directory_exists\": {\n      \"entry\": \"check_exists\",\n      \"description\": \"examples_path.exists() and examples_path.is_dir()\",\n      \"on\": {\n        \"EXISTS\": \"listing_json_files\",\n        \"NOT_EXISTS\": \"error_directory_not_found\"\n      }\n    },\n    \"listing_json_files\": {\n      \"entry\": \"glob_json_files\",\n      \"description\": \"examples_path.glob('*.json')\",\n      \"on\": {\n        \"FOUND\": \"reading_flow_files\",\n        \"EMPTY\": \"complete_with_empty_list\"\n      }\n    },\n    \"reading_flow_files\": {\n      \"entry\": \"read_and_parse_files\",\n      \"description\": \"Read and parse each JSON file\",\n      \"on\": {\n        \"PARSED\": \"complete\",\n        \"ERROR\": \"error_file_read\"\n      }\n    },\n    \"complete_with_empty_list\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flows\": \"[]\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flows\": \"List[FlowRead] of example flows\"\n      }\n    },\n    \"error_directory_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Examples directory not found\"\n      }\n    },\n    \"error_file_read\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Failed to read example files\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0016",
      "type": "logic",
      "name": "Create User Endpoint Handler",
      "description": "POST /users/ - Add new user to database",
      "path": "src/backend/base/langbuilder/api/v1/users.py",
      "category": "API Endpoint",
      "function": "add_user",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"add_user_statechart\",\n  \"initial\": \"checking_superuser\",\n  \"context\": {\n    \"current_user\": \"Authenticated user\",\n    \"user_create\": \"UserCreate object\",\n    \"session\": \"Database session\",\n    \"db_user\": \"Created user object\"\n  },\n  \"states\": {\n    \"checking_superuser\": {\n      \"entry\": \"check_is_superuser\",\n      \"description\": \"Verify current_user.is_superuser == True\",\n      \"on\": {\n        \"IS_SUPERUSER\": \"checking_username_uniqueness\",\n        \"NOT_SUPERUSER\": \"error_forbidden\"\n      }\n    },\n    \"checking_username_uniqueness\": {\n      \"entry\": \"query_user_by_username\",\n      \"description\": \"SELECT * FROM user WHERE username = username\",\n      \"on\": {\n        \"USERNAME_EXISTS\": \"error_username_taken\",\n        \"USERNAME_AVAILABLE\": \"hashing_password\"\n      }\n    },\n    \"hashing_password\": {\n      \"entry\": \"hash_password\",\n      \"description\": \"Uses passlib with bcrypt/argon2 to hash password\",\n      \"on\": {\n        \"HASHED\": \"creating_user_object\"\n      }\n    },\n    \"creating_user_object\": {\n      \"entry\": \"instantiate_user_model\",\n      \"description\": \"User(**user_create.model_dump(), password=hashed_password)\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_user)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_user\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_user\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_user)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"user\": \"UserRead object (password excluded)\"\n      }\n    },\n    \"error_forbidden\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_403\",\n      \"data\": {\n        \"error\": \"Only superusers can create users\"\n      }\n    },\n    \"error_username_taken\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Username already exists\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Database constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0017",
      "type": "logic",
      "name": "Get Current User Endpoint Handler",
      "description": "GET /users/whoami - Retrieve current user's data",
      "path": "src/backend/base/langbuilder/api/v1/users.py",
      "category": "API Endpoint",
      "function": "read_current_user",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_current_user_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for current_user\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"current_user\": \" current_user object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0018",
      "type": "logic",
      "name": "List All Users Endpoint Handler",
      "description": "GET /users/ - Retrieve list of users with pagination",
      "path": "src/backend/base/langbuilder/api/v1/users.py",
      "category": "API Endpoint",
      "function": "read_all_users",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_all_users_statechart\",\n  \"initial\": \"checking_superuser\",\n  \"context\": {\n    \"current_user\": \"Authenticated user\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"checking_superuser\": {\n      \"entry\": \"check_is_superuser\",\n      \"description\": \"Verify current_user.is_superuser == True\",\n      \"on\": {\n        \"IS_SUPERUSER\": \"building_query\",\n        \"NOT_SUPERUSER\": \"error_forbidden\"\n      }\n    },\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"select(User)\",\n      \"on\": {\n        \"QUERY_BUILT\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_all\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_all\": {\n      \"entry\": \"fetch_all_results\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"users\": \"List[UserRead]\"\n      }\n    },\n    \"error_forbidden\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_403\",\n      \"data\": {\n        \"error\": \"Only superusers can list all users\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database query error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0019",
      "type": "logic",
      "name": "Update User Endpoint Handler",
      "description": "PATCH /users/{user_id} - Update user data",
      "path": "src/backend/base/langbuilder/api/v1/users.py",
      "category": "API Endpoint",
      "function": "patch_user",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"patch_user_statechart\",\n  \"initial\": \"reading_user\",\n  \"context\": {\n    \"user_id\": \"UUID of user to update\",\n    \"user_update\": \"UserUpdate object\",\n    \"session\": \"Database session\",\n    \"db_user\": \"User object\"\n  },\n  \"states\": {\n    \"reading_user\": {\n      \"entry\": \"query_user_by_id\",\n      \"description\": \"SELECT * FROM user WHERE id = user_id\",\n      \"on\": {\n        \"FOUND\": \"checking_password_update\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"checking_password_update\": {\n      \"entry\": \"check_password_field\",\n      \"description\": \"Check if user_update.password is set\",\n      \"on\": {\n        \"PASSWORD_PROVIDED\": \"hashing_new_password\",\n        \"NO_PASSWORD\": \"updating_fields\"\n      }\n    },\n    \"hashing_new_password\": {\n      \"entry\": \"hash_password\",\n      \"description\": \"Uses passlib with bcrypt/argon2\",\n      \"on\": {\n        \"HASHED\": \"updating_fields_with_password\"\n      }\n    },\n    \"updating_fields_with_password\": {\n      \"entry\": \"update_user_fields\",\n      \"description\": \"Update fields including hashed password\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"updating_fields\": {\n      \"entry\": \"update_user_fields\",\n      \"description\": \"Update fields from user_update.model_dump(exclude_unset=True)\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_user)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_user\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_user\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_user)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"user\": \"Updated UserRead object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"User not found\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Database constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0020",
      "type": "logic",
      "name": "Reset User Password Endpoint Handler",
      "description": "PATCH /users/{user_id}/reset-password - Reset user password",
      "path": "src/backend/base/langbuilder/api/v1/users.py",
      "category": "API Endpoint",
      "function": "reset_password",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"reset_password_statechart\",\n  \"initial\": \"checking_superuser\",\n  \"context\": {\n    \"current_user\": \"Authenticated user\",\n    \"user_id\": \"UUID of user to reset\",\n    \"password_reset\": \"PasswordReset object\",\n    \"session\": \"Database session\",\n    \"db_user\": \"Target user object\"\n  },\n  \"states\": {\n    \"checking_superuser\": {\n      \"entry\": \"check_is_superuser\",\n      \"description\": \"Verify current_user.is_superuser == True\",\n      \"on\": {\n        \"IS_SUPERUSER\": \"reading_target_user\",\n        \"NOT_SUPERUSER\": \"error_forbidden\"\n      }\n    },\n    \"reading_target_user\": {\n      \"entry\": \"query_user_by_id\",\n      \"description\": \"SELECT * FROM user WHERE id = user_id\",\n      \"on\": {\n        \"FOUND\": \"hashing_new_password\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"hashing_new_password\": {\n      \"entry\": \"hash_password\",\n      \"description\": \"Uses passlib with bcrypt/argon2\",\n      \"on\": {\n        \"HASHED\": \"updating_password\"\n      }\n    },\n    \"updating_password\": {\n      \"entry\": \"set_password_field\",\n      \"description\": \"db_user.password = hashed_password\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_user)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Password reset successfully\"\n      }\n    },\n    \"error_forbidden\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_403\",\n      \"data\": {\n        \"error\": \"Only superusers can reset passwords\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"User not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0021",
      "type": "logic",
      "name": "Delete User Endpoint Handler",
      "description": "DELETE /users/{user_id} - Delete user from database",
      "path": "src/backend/base/langbuilder/api/v1/users.py",
      "category": "API Endpoint",
      "function": "delete_user",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_user_statechart\",\n  \"initial\": \"checking_superuser\",\n  \"context\": {\n    \"current_user\": \"Authenticated user\",\n    \"user_id\": \"UUID of user to delete\",\n    \"session\": \"Database session\",\n    \"db_user\": \"User object to delete\"\n  },\n  \"states\": {\n    \"checking_superuser\": {\n      \"entry\": \"check_is_superuser\",\n      \"description\": \"Verify current_user.is_superuser == True\",\n      \"on\": {\n        \"IS_SUPERUSER\": \"reading_target_user\",\n        \"NOT_SUPERUSER\": \"error_forbidden\"\n      }\n    },\n    \"reading_target_user\": {\n      \"entry\": \"query_user_by_id\",\n      \"description\": \"SELECT * FROM user WHERE id = user_id\",\n      \"on\": {\n        \"FOUND\": \"deleting_from_session\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"deleting_from_session\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_user) - Cascades to ApiKey, Variable, Folder, Flow\",\n      \"on\": {\n        \"DELETED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"User deleted successfully (cascade delete to ApiKey, Variable, Folder, Flow)\"\n      }\n    },\n    \"error_forbidden\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_403\",\n      \"data\": {\n        \"error\": \"Only superusers can delete users\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"User not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0022",
      "type": "logic",
      "name": "User Login Endpoint Handler",
      "description": "POST /login - Authenticate user and generate access tokens",
      "path": "src/backend/base/langbuilder/api/v1/login.py",
      "category": "API Endpoint",
      "function": "login_to_get_access_token",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"login_to_get_access_token_statechart\",\n  \"initial\": \"validating_credentials\",\n  \"context\": {\n    \"credentials\": \"Username/password or token\",\n    \"user\": \"Authenticated user object\"\n  },\n  \"states\": {\n    \"validating_credentials\": {\n      \"entry\": \"validate_input\",\n      \"description\": \"Validate credential format\",\n      \"on\": {\n        \"VALID\": \"querying_user\",\n        \"INVALID\": \"error_invalid_credentials\"\n      }\n    },\n    \"querying_user\": {\n      \"entry\": \"find_user\",\n      \"description\": \"Query user from database\",\n      \"on\": {\n        \"FOUND\": \"verifying_password\",\n        \"NOT_FOUND\": \"error_invalid_credentials\"\n      }\n    },\n    \"verifying_password\": {\n      \"entry\": \"verify_password_hash\",\n      \"description\": \"Verify password with bcrypt/argon2\",\n      \"on\": {\n        \"VERIFIED\": \"generating_token\",\n        \"FAILED\": \"error_invalid_credentials\"\n      }\n    },\n    \"generating_token\": {\n      \"entry\": \"create_access_token\",\n      \"description\": \"Generate JWT or session token\",\n      \"on\": {\n        \"GENERATED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"token\": \"Access token\",\n        \"user\": \"User object\"\n      }\n    },\n    \"error_invalid_credentials\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_401\"\n    }\n  }\n}"
    },
    {
      "id": "nl0023",
      "type": "logic",
      "name": "Auto Login Endpoint Handler",
      "description": "GET /auto_login - Auto-login for enabled environments",
      "path": "src/backend/base/langbuilder/api/v1/login.py",
      "category": "API Endpoint",
      "function": "auto_login",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"auto_login_statechart\",\n  \"initial\": \"validating_credentials\",\n  \"context\": {\n    \"credentials\": \"Username/password or token\",\n    \"user\": \"Authenticated user object\"\n  },\n  \"states\": {\n    \"validating_credentials\": {\n      \"entry\": \"validate_input\",\n      \"description\": \"Validate credential format\",\n      \"on\": {\n        \"VALID\": \"querying_user\",\n        \"INVALID\": \"error_invalid_credentials\"\n      }\n    },\n    \"querying_user\": {\n      \"entry\": \"find_user\",\n      \"description\": \"Query user from database\",\n      \"on\": {\n        \"FOUND\": \"verifying_password\",\n        \"NOT_FOUND\": \"error_invalid_credentials\"\n      }\n    },\n    \"verifying_password\": {\n      \"entry\": \"verify_password_hash\",\n      \"description\": \"Verify password with bcrypt/argon2\",\n      \"on\": {\n        \"VERIFIED\": \"generating_token\",\n        \"FAILED\": \"error_invalid_credentials\"\n      }\n    },\n    \"generating_token\": {\n      \"entry\": \"create_access_token\",\n      \"description\": \"Generate JWT or session token\",\n      \"on\": {\n        \"GENERATED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"token\": \"Access token\",\n        \"user\": \"User object\"\n      }\n    },\n    \"error_invalid_credentials\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_401\"\n    }\n  }\n}"
    },
    {
      "id": "nl0024",
      "type": "logic",
      "name": "Refresh Token Endpoint Handler",
      "description": "POST /refresh - Refresh authentication tokens",
      "path": "src/backend/base/langbuilder/api/v1/login.py",
      "category": "API Endpoint",
      "function": "refresh_token",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"refresh_token_statechart\",\n  \"initial\": \"validating_credentials\",\n  \"context\": {\n    \"credentials\": \"Username/password or token\",\n    \"user\": \"Authenticated user object\"\n  },\n  \"states\": {\n    \"validating_credentials\": {\n      \"entry\": \"validate_input\",\n      \"description\": \"Validate credential format\",\n      \"on\": {\n        \"VALID\": \"querying_user\",\n        \"INVALID\": \"error_invalid_credentials\"\n      }\n    },\n    \"querying_user\": {\n      \"entry\": \"find_user\",\n      \"description\": \"Query user from database\",\n      \"on\": {\n        \"FOUND\": \"verifying_password\",\n        \"NOT_FOUND\": \"error_invalid_credentials\"\n      }\n    },\n    \"verifying_password\": {\n      \"entry\": \"verify_password_hash\",\n      \"description\": \"Verify password with bcrypt/argon2\",\n      \"on\": {\n        \"VERIFIED\": \"generating_token\",\n        \"FAILED\": \"error_invalid_credentials\"\n      }\n    },\n    \"generating_token\": {\n      \"entry\": \"create_access_token\",\n      \"description\": \"Generate JWT or session token\",\n      \"on\": {\n        \"GENERATED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"token\": \"Access token\",\n        \"user\": \"User object\"\n      }\n    },\n    \"error_invalid_credentials\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_401\"\n    }\n  }\n}"
    },
    {
      "id": "nl0025",
      "type": "logic",
      "name": "User Logout Endpoint Handler",
      "description": "POST /logout - Logout user and clear cookies",
      "path": "src/backend/base/langbuilder/api/v1/login.py",
      "category": "API Endpoint",
      "function": "logout",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"logout_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"logout\",\n      \"description\": \"POST /logout - Logout user and clear cookies\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0026",
      "type": "logic",
      "name": "Create Variable Endpoint Handler",
      "description": "POST /variables/ - Create a new variable",
      "path": "src/backend/base/langbuilder/api/v1/variable.py",
      "category": "API Endpoint",
      "function": "create_variable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_variable_statechart\",\n  \"initial\": \"checking_value_encryption\",\n  \"context\": {\n    \"variable\": \"VariableCreate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_variable\": \"Created variable object\"\n  },\n  \"states\": {\n    \"checking_value_encryption\": {\n      \"entry\": \"check_value_field\",\n      \"description\": \"Check if variable.value needs encryption\",\n      \"on\": {\n        \"VALUE_PROVIDED\": \"encrypting_value\",\n        \"NO_VALUE\": \"creating_variable_object\"\n      }\n    },\n    \"encrypting_value\": {\n      \"entry\": \"encrypt_with_fernet\",\n      \"description\": \"Uses Fernet symmetric encryption to encrypt variable value\",\n      \"on\": {\n        \"ENCRYPTED\": \"creating_variable_object\"\n      }\n    },\n    \"creating_variable_object\": {\n      \"entry\": \"instantiate_variable_model\",\n      \"description\": \"Variable(**variable.model_dump(), user_id=user_id)\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_variable)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_variable\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_variable\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_variable)\",\n      \"on\": {\n        \"REFRESHED\": \"decrypting_value\"\n      }\n    },\n    \"decrypting_value\": {\n      \"entry\": \"decrypt_with_fernet\",\n      \"description\": \"Decrypt value before returning to client\",\n      \"on\": {\n        \"DECRYPTED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"variable\": \"VariableRead object (value decrypted)\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Variable name must be unique for user\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0027",
      "type": "logic",
      "name": "List Variables Endpoint Handler",
      "description": "GET /variables/ - Read all variables for user",
      "path": "src/backend/base/langbuilder/api/v1/variable.py",
      "category": "API Endpoint",
      "function": "read_variables",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_variables_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"select(Variable).where(Variable.user_id == user_id)\",\n      \"on\": {\n        \"QUERY_BUILT\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_all\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_all\": {\n      \"entry\": \"fetch_all_results\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"decrypting_values\"\n      }\n    },\n    \"decrypting_values\": {\n      \"entry\": \"decrypt_all_values\",\n      \"description\": \"Decrypt value field for each variable using Fernet\",\n      \"on\": {\n        \"DECRYPTED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"variables\": \"List[VariableRead] (values decrypted)\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database query error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0028",
      "type": "logic",
      "name": "Update Variable Endpoint Handler",
      "description": "PATCH /variables/{variable_id} - Update a variable",
      "path": "src/backend/base/langbuilder/api/v1/variable.py",
      "category": "API Endpoint",
      "function": "update_variable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_variable_statechart\",\n  \"initial\": \"reading_existing_variable\",\n  \"context\": {\n    \"variable_id\": \"UUID\",\n    \"variable_update\": \"VariableUpdate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_variable\": \"Existing variable object\"\n  },\n  \"states\": {\n    \"reading_existing_variable\": {\n      \"entry\": \"query_variable_by_id\",\n      \"description\": \"SELECT * FROM variable WHERE id = variable_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"checking_value_update\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"checking_value_update\": {\n      \"entry\": \"check_value_field\",\n      \"description\": \"Check if variable_update.value is set\",\n      \"on\": {\n        \"VALUE_PROVIDED\": \"encrypting_new_value\",\n        \"NO_VALUE\": \"updating_fields\"\n      }\n    },\n    \"encrypting_new_value\": {\n      \"entry\": \"encrypt_with_fernet\",\n      \"description\": \"Uses Fernet symmetric encryption\",\n      \"on\": {\n        \"ENCRYPTED\": \"updating_fields_with_value\"\n      }\n    },\n    \"updating_fields_with_value\": {\n      \"entry\": \"update_variable_fields\",\n      \"description\": \"Update fields including encrypted value\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"updating_fields\": {\n      \"entry\": \"update_variable_fields\",\n      \"description\": \"Update fields from variable_update.model_dump(exclude_unset=True)\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_variable)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_variable\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_variable\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_variable)\",\n      \"on\": {\n        \"REFRESHED\": \"decrypting_value\"\n      }\n    },\n    \"decrypting_value\": {\n      \"entry\": \"decrypt_with_fernet\",\n      \"description\": \"Decrypt value before returning to client\",\n      \"on\": {\n        \"DECRYPTED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"variable\": \"Updated VariableRead object (value decrypted)\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Variable not found\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Variable name must be unique for user\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0029",
      "type": "logic",
      "name": "Delete Variable Endpoint Handler",
      "description": "DELETE /variables/{variable_id} - Delete a variable",
      "path": "src/backend/base/langbuilder/api/v1/variable.py",
      "category": "API Endpoint",
      "function": "delete_variable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_variable_statechart\",\n  \"initial\": \"reading_existing_variable\",\n  \"context\": {\n    \"variable_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_variable\": \"Variable object to delete\"\n  },\n  \"states\": {\n    \"reading_existing_variable\": {\n      \"entry\": \"query_variable_by_id\",\n      \"description\": \"SELECT * FROM variable WHERE id = variable_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"deleting_from_session\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"deleting_from_session\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_variable)\",\n      \"on\": {\n        \"DELETED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Variable deleted successfully\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Variable not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0030",
      "type": "logic",
      "name": "Get Flow for File Operation",
      "description": "Get flow and verify user access for file operations",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "get_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_flow_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for flow\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flow\": \" flow object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0031",
      "type": "logic",
      "name": "Upload File Endpoint Handler",
      "description": "POST /files/upload/{flow_id} - Upload file for flow",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "upload_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"upload_file_projects_statechart\",\n  \"initial\": \"reading_file_content\",\n  \"context\": {\n    \"file\": \"UploadFile object\",\n    \"folder_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"flows\": \"List of parsed flows\"\n  },\n  \"states\": {\n    \"reading_file_content\": {\n      \"entry\": \"read_uploaded_file\",\n      \"description\": \"await file.read()\",\n      \"on\": {\n        \"READ\": \"checking_file_type\",\n        \"ERROR\": \"error_file_read\"\n      }\n    },\n    \"checking_file_type\": {\n      \"entry\": \"check_content_type\",\n      \"description\": \"Check if file is JSON or ZIP\",\n      \"on\": {\n        \"JSON_FILE\": \"parsing_json\",\n        \"ZIP_FILE\": \"extracting_zip\",\n        \"UNKNOWN\": \"error_unsupported_format\"\n      }\n    },\n    \"parsing_json\": {\n      \"entry\": \"parse_json_content\",\n      \"description\": \"json.loads(content)\",\n      \"on\": {\n        \"SINGLE_FLOW\": \"creating_single_flow\",\n        \"FLOW_ARRAY\": \"creating_multiple_flows\",\n        \"ERROR\": \"error_invalid_json\"\n      }\n    },\n    \"extracting_zip\": {\n      \"entry\": \"extract_zip_contents\",\n      \"description\": \"ZipFile(BytesIO(content)) and read all .json files\",\n      \"on\": {\n        \"EXTRACTED\": \"creating_multiple_flows\",\n        \"ERROR\": \"error_invalid_zip\"\n      }\n    },\n    \"creating_single_flow\": {\n      \"entry\": \"create_flow\",\n      \"description\": \"Calls _new_flow(session, flow, user_id)\",\n      \"on\": {\n        \"CREATED\": \"assigning_folder\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"creating_multiple_flows\": {\n      \"entry\": \"create_flows\",\n      \"description\": \"Iterates and calls _new_flow for each flow\",\n      \"on\": {\n        \"CREATED\": \"assigning_folder\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"assigning_folder\": {\n      \"entry\": \"set_folder_id\",\n      \"description\": \"flow.folder_id = folder_id for all flows\",\n      \"on\": {\n        \"ASSIGNED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_flows\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_flows\": {\n      \"entry\": \"refresh_all_flows\",\n      \"description\": \"await session.refresh(flow) for each flow\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flows\": \"List[FlowRead] of uploaded flows\"\n      }\n    },\n    \"error_file_read\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Failed to read uploaded file\"\n      }\n    },\n    \"error_unsupported_format\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Unsupported file format (must be JSON or ZIP)\"\n      }\n    },\n    \"error_invalid_json\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Invalid JSON in uploaded file\"\n      }\n    },\n    \"error_invalid_zip\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Invalid ZIP file\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Flow validation error\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Database constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0032",
      "type": "logic",
      "name": "Download File Endpoint Handler",
      "description": "GET /files/download/{flow_id}/{file_name} - Download file",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "download_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"download_file_statechart\",\n  \"initial\": \"reading_folder\",\n  \"context\": {\n    \"folder_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"zip_buffer\": \"BytesIO buffer\"\n  },\n  \"states\": {\n    \"reading_folder\": {\n      \"entry\": \"query_folder_by_id\",\n      \"description\": \"SELECT * FROM folder WHERE id = folder_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"loading_flows\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"loading_flows\": {\n      \"entry\": \"load_folder_flows\",\n      \"description\": \"SELECT * FROM flow WHERE folder_id = folder_id\",\n      \"on\": {\n        \"FLOWS_FOUND\": \"creating_memory_buffer\",\n        \"NO_FLOWS\": \"error_no_content\"\n      }\n    },\n    \"creating_memory_buffer\": {\n      \"entry\": \"create_bytes_io\",\n      \"description\": \"BytesIO() for in-memory ZIP\",\n      \"on\": {\n        \"CREATED\": \"creating_zip_file\"\n      }\n    },\n    \"creating_zip_file\": {\n      \"entry\": \"create_zipfile\",\n      \"description\": \"ZipFile(zip_buffer, 'w', ZIP_DEFLATED)\",\n      \"on\": {\n        \"CREATED\": \"iterating_flows\"\n      }\n    },\n    \"iterating_flows\": {\n      \"entry\": \"get_next_flow\",\n      \"on\": {\n        \"HAS_FLOW\": \"serializing_flow\",\n        \"NO_MORE_FLOWS\": \"closing_zip_file\"\n      }\n    },\n    \"serializing_flow\": {\n      \"entry\": \"serialize_to_json\",\n      \"description\": \"json.dumps(flow.model_dump(), indent=2)\",\n      \"on\": {\n        \"SERIALIZED\": \"adding_to_zip\"\n      }\n    },\n    \"adding_to_zip\": {\n      \"entry\": \"write_to_zip\",\n      \"description\": \"zipfile.writestr(f'{flow.name}.json', flow_json)\",\n      \"on\": {\n        \"ADDED\": \"iterating_flows\",\n        \"ERROR\": \"error_zip\"\n      }\n    },\n    \"closing_zip_file\": {\n      \"entry\": \"close_zip\",\n      \"description\": \"zipfile.close()\",\n      \"on\": {\n        \"CLOSED\": \"seeking_buffer\"\n      }\n    },\n    \"seeking_buffer\": {\n      \"entry\": \"seek_to_start\",\n      \"description\": \"zip_buffer.seek(0)\",\n      \"on\": {\n        \"SEEKED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"response\": \"StreamingResponse with ZIP file of all flows in folder\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Project (folder) not found\"\n      }\n    },\n    \"error_no_content\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_204\",\n      \"data\": {\n        \"message\": \"No flows in folder to download\"\n      }\n    },\n    \"error_zip\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Failed to create ZIP file\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0033",
      "type": "logic",
      "name": "Download Image Endpoint Handler",
      "description": "GET /files/images/{flow_id}/{file_name} - Download image file",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "download_image",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"download_image_statechart\",\n  \"initial\": \"preparing_file\",\n  \"context\": {\n    \"file\": \"File object or path\",\n    \"content\": \"File content\"\n  },\n  \"states\": {\n    \"validating_file\": {\n      \"entry\": \"check_file_exists\",\n      \"description\": \"Verify file exists\",\n      \"on\": {\n        \"EXISTS\": \"reading_content\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"reading_content\": {\n      \"entry\": \"read_file\",\n      \"description\": \"Read file content\",\n      \"on\": {\n        \"READ\": \"complete\",\n        \"ERROR\": \"error_file_operation\"\n      }\n    },\n    \"processing_content\": {},\n    \"storing_data\": {},\n    \"preparing_file\": {\n      \"entry\": \"prepare_download\",\n      \"description\": \"Prepare file for download\",\n      \"on\": {\n        \"PREPARED\": \"reading_content\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"File operation result\"\n      }\n    },\n    \"error_invalid_file\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_invalid_content\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_file_operation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    },\n    \"error_storage\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0034",
      "type": "logic",
      "name": "Download Profile Picture Endpoint Handler",
      "description": "GET /files/profile_pictures/{folder_name}/{file_name}",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "download_profile_picture",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"download_profile_picture_statechart\",\n  \"initial\": \"preparing_file\",\n  \"context\": {\n    \"file\": \"File object or path\",\n    \"content\": \"File content\"\n  },\n  \"states\": {\n    \"validating_file\": {\n      \"entry\": \"check_file_exists\",\n      \"description\": \"Verify file exists\",\n      \"on\": {\n        \"EXISTS\": \"reading_content\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"reading_content\": {\n      \"entry\": \"read_file\",\n      \"description\": \"Read file content\",\n      \"on\": {\n        \"READ\": \"complete\",\n        \"ERROR\": \"error_file_operation\"\n      }\n    },\n    \"processing_content\": {},\n    \"storing_data\": {},\n    \"preparing_file\": {\n      \"entry\": \"prepare_download\",\n      \"description\": \"Prepare file for download\",\n      \"on\": {\n        \"PREPARED\": \"reading_content\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"File operation result\"\n      }\n    },\n    \"error_invalid_file\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_invalid_content\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_file_operation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    },\n    \"error_storage\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0035",
      "type": "logic",
      "name": "List Profile Pictures Endpoint Handler",
      "description": "GET /files/profile_pictures/list",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "list_profile_pictures",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"list_profile_pictures_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for profile_pictures\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"profile_pictures\": \"List of profile_pictures objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0036",
      "type": "logic",
      "name": "List Files Endpoint Handler",
      "description": "GET /files/list/{flow_id} - List files for flow",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "list_files",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"list_files_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for files\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"files\": \"List of files objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0037",
      "type": "logic",
      "name": "Delete File Endpoint Handler",
      "description": "DELETE /files/delete/{flow_id}/{file_name} - Delete file",
      "path": "src/backend/base/langbuilder/api/v1/files.py",
      "category": "API Endpoint",
      "function": "delete_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_file_statechart\",\n  \"initial\": \"reading_existing\",\n  \"context\": {\n    \"entity_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_file\": \"file object to delete\"\n  },\n  \"states\": {\n    \"reading_existing\": {\n      \"entry\": \"query_by_id\",\n      \"description\": \"SELECT * FROM file WHERE id = entity_id\",\n      \"on\": {\n        \"FOUND\": \"checking_permissions\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"checking_permissions\": {\n      \"entry\": \"verify_ownership\",\n      \"description\": \"Check user has permission to delete\",\n      \"on\": {\n        \"AUTHORIZED\": \"deleting_from_session\",\n        \"UNAUTHORIZED\": \"error_forbidden\"\n      }\n    },\n    \"deleting_from_session\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_file)\",\n      \"on\": {\n        \"DELETED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"file deleted successfully\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_forbidden\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_403\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0038",
      "type": "logic",
      "name": "List API Keys Endpoint Handler",
      "description": "GET /api_key/ - Get all API keys for user",
      "path": "src/backend/base/langbuilder/api/v1/api_key.py",
      "category": "API Endpoint",
      "function": "get_api_keys_route",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_api_keys_route_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"select(ApiKey).where(ApiKey.user_id == user_id)\",\n      \"on\": {\n        \"QUERY_BUILT\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_all\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_all\": {\n      \"entry\": \"fetch_all_results\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"masking_keys\"\n      }\n    },\n    \"masking_keys\": {\n      \"entry\": \"mask_api_key_values\",\n      \"description\": \"Show only first/last characters: 'sk-****xyz'\",\n      \"on\": {\n        \"MASKED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"api_keys\": \"List[ApiKeyRead] (keys masked)\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database query error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0039",
      "type": "logic",
      "name": "Create API Key Endpoint Handler",
      "description": "POST /api_key/ - Create new API key",
      "path": "src/backend/base/langbuilder/api/v1/api_key.py",
      "category": "API Endpoint",
      "function": "create_api_key_route",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_api_key_route_statechart\",\n  \"initial\": \"generating_api_key\",\n  \"context\": {\n    \"api_key_create\": \"ApiKeyCreate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"api_key_value\": \"Generated key string\",\n    \"db_api_key\": \"Created ApiKey object\"\n  },\n  \"states\": {\n    \"generating_api_key\": {\n      \"entry\": \"generate_key\",\n      \"description\": \"secrets.token_urlsafe(32) and prepend 'sk-'\",\n      \"on\": {\n        \"GENERATED\": \"creating_api_key_object\"\n      }\n    },\n    \"creating_api_key_object\": {\n      \"entry\": \"instantiate_api_key_model\",\n      \"description\": \"ApiKey(name=name, api_key=api_key_value, user_id=user_id)\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_api_key)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_api_key\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_api_key\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_api_key)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"api_key\": \"ApiKeyRead object with full key (only time shown unmasked)\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"API key name must be unique for user\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0040",
      "type": "logic",
      "name": "Delete API Key Endpoint Handler",
      "description": "DELETE /api_key/{api_key_id} - Delete API key",
      "path": "src/backend/base/langbuilder/api/v1/api_key.py",
      "category": "API Endpoint",
      "function": "delete_api_key_route",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_api_key_route_statechart\",\n  \"initial\": \"reading_api_key\",\n  \"context\": {\n    \"api_key_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_api_key\": \"ApiKey object to delete\"\n  },\n  \"states\": {\n    \"reading_api_key\": {\n      \"entry\": \"query_api_key_by_id\",\n      \"description\": \"SELECT * FROM api_key WHERE id = api_key_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"deleting_from_session\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"deleting_from_session\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_api_key)\",\n      \"on\": {\n        \"DELETED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"API key deleted successfully\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"API key not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0041",
      "type": "logic",
      "name": "Save Store API Key Endpoint Handler",
      "description": "POST /api_key/store - Save encrypted store API key",
      "path": "src/backend/base/langbuilder/api/v1/api_key.py",
      "category": "API Endpoint",
      "function": "save_store_api_key",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"save_store_api_key_statechart\",\n  \"initial\": \"encrypting_api_key\",\n  \"context\": {\n    \"store_api_key\": \"StoreApiKeyCreate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"encrypted_key\": \"Encrypted API key value\"\n  },\n  \"states\": {\n    \"encrypting_api_key\": {\n      \"entry\": \"encrypt_with_fernet\",\n      \"description\": \"Uses Fernet symmetric encryption for store API key\",\n      \"on\": {\n        \"ENCRYPTED\": \"checking_existing_key\"\n      }\n    },\n    \"checking_existing_key\": {\n      \"entry\": \"query_store_api_key\",\n      \"description\": \"SELECT * FROM store_api_key WHERE user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"updating_existing_key\",\n        \"NOT_FOUND\": \"creating_new_key\"\n      }\n    },\n    \"updating_existing_key\": {\n      \"entry\": \"update_api_key_value\",\n      \"description\": \"db_key.api_key = encrypted_key\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"creating_new_key\": {\n      \"entry\": \"instantiate_store_api_key\",\n      \"description\": \"StoreApiKey(api_key=encrypted_key, user_id=user_id)\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_key)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Store API key saved successfully (encrypted)\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0042",
      "type": "logic",
      "name": "Create Project Endpoint Handler",
      "description": "POST /projects/ - Create a new project/folder",
      "path": "src/backend/base/langbuilder/api/v1/projects.py",
      "category": "API Endpoint",
      "function": "create_project",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_project_statechart\",\n  \"initial\": \"checking_unique_name\",\n  \"context\": {\n    \"folder_create\": \"FolderCreate object (project)\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_folder\": \"Created folder object\"\n  },\n  \"states\": {\n    \"checking_unique_name\": {\n      \"entry\": \"query_folder_by_name\",\n      \"description\": \"SELECT * FROM folder WHERE name = name AND user_id = user_id\",\n      \"on\": {\n        \"NAME_EXISTS\": \"generating_unique_name\",\n        \"NAME_AVAILABLE\": \"creating_folder_object\"\n      }\n    },\n    \"generating_unique_name\": {\n      \"entry\": \"query_numbered_folders\",\n      \"description\": \"SELECT * FROM folder WHERE name LIKE '{name} (%)' AND user_id = user_id\",\n      \"on\": {\n        \"NUMBERS_FOUND\": \"appending_number\",\n        \"NO_NUMBERS\": \"appending_first_number\"\n      }\n    },\n    \"appending_number\": {\n      \"entry\": \"append_max_plus_one\",\n      \"description\": \"folder.name = f\\\"{folder.name} ({max(numbers) + 1})\\\"\",\n      \"on\": {\n        \"APPENDED\": \"creating_folder_object\"\n      }\n    },\n    \"appending_first_number\": {\n      \"entry\": \"append_one\",\n      \"description\": \"folder.name = f\\\"{folder.name} (1)\\\"\",\n      \"on\": {\n        \"APPENDED\": \"creating_folder_object\"\n      }\n    },\n    \"creating_folder_object\": {\n      \"entry\": \"instantiate_folder_model\",\n      \"description\": \"Folder(**folder_create.model_dump(), user_id=user_id)\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_folder)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_folder\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_folder\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_folder)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"folder\": \"FolderRead object (project)\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Database constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0043",
      "type": "logic",
      "name": "List Projects Endpoint Handler",
      "description": "GET /projects/ - Read all projects for user",
      "path": "src/backend/base/langbuilder/api/v1/projects.py",
      "category": "API Endpoint",
      "function": "read_projects",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_projects_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"select(Folder).where(Folder.user_id == user_id)\",\n      \"on\": {\n        \"QUERY_BUILT\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_all\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_all\": {\n      \"entry\": \"fetch_all_results\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"loading_flow_associations\"\n      }\n    },\n    \"loading_flow_associations\": {\n      \"entry\": \"load_related_flows\",\n      \"description\": \"For each folder, load associated flows via selectinload\",\n      \"on\": {\n        \"LOADED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"folders\": \"List[FolderRead] with flow counts\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database query error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0044",
      "type": "logic",
      "name": "Get Project by ID Endpoint Handler",
      "description": "GET /projects/{project_id} - Read specific project with flows",
      "path": "src/backend/base/langbuilder/api/v1/projects.py",
      "category": "API Endpoint",
      "function": "read_project",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"read_project_statechart\",\n  \"initial\": \"reading_folder\",\n  \"context\": {\n    \"folder_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\"\n  },\n  \"states\": {\n    \"reading_folder\": {\n      \"entry\": \"query_folder_by_id\",\n      \"description\": \"SELECT * FROM folder WHERE id = folder_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"loading_flows\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"loading_flows\": {\n      \"entry\": \"load_related_flows\",\n      \"description\": \"Load all flows associated with this folder\",\n      \"on\": {\n        \"LOADED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"folder\": \"FolderRead with associated flows\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Project (folder) not found\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0045",
      "type": "logic",
      "name": "Update Project Endpoint Handler",
      "description": "PATCH /projects/{project_id} - Update project data",
      "path": "src/backend/base/langbuilder/api/v1/projects.py",
      "category": "API Endpoint",
      "function": "update_project",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_project_statechart\",\n  \"initial\": \"reading_folder\",\n  \"context\": {\n    \"folder_id\": \"UUID\",\n    \"folder_update\": \"FolderUpdate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_folder\": \"Folder object\"\n  },\n  \"states\": {\n    \"reading_folder\": {\n      \"entry\": \"query_folder_by_id\",\n      \"description\": \"SELECT * FROM folder WHERE id = folder_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"updating_fields\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"updating_fields\": {\n      \"entry\": \"update_folder_fields\",\n      \"description\": \"Update db_folder with folder_update.model_dump(exclude_unset=True)\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_folder)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_folder\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_folder\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_folder)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"folder\": \"Updated FolderRead object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Project (folder) not found\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Database constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0046",
      "type": "logic",
      "name": "Delete Project Endpoint Handler",
      "description": "DELETE /projects/{project_id} - Delete project and its flows",
      "path": "src/backend/base/langbuilder/api/v1/projects.py",
      "category": "API Endpoint",
      "function": "delete_project",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_project_statechart\",\n  \"initial\": \"reading_folder\",\n  \"context\": {\n    \"folder_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_folder\": \"Folder object to delete\"\n  },\n  \"states\": {\n    \"reading_folder\": {\n      \"entry\": \"query_folder_by_id\",\n      \"description\": \"SELECT * FROM folder WHERE id = folder_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"checking_flows\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"checking_flows\": {\n      \"entry\": \"count_associated_flows\",\n      \"description\": \"Check if folder has associated flows\",\n      \"on\": {\n        \"HAS_FLOWS\": \"moving_flows_to_default\",\n        \"NO_FLOWS\": \"deleting_folder\"\n      }\n    },\n    \"moving_flows_to_default\": {\n      \"entry\": \"reassign_flows\",\n      \"description\": \"UPDATE flow SET folder_id = default_folder_id WHERE folder_id = folder_id\",\n      \"on\": {\n        \"MOVED\": \"deleting_folder\",\n        \"ERROR\": \"error_flow_reassignment\"\n      }\n    },\n    \"deleting_folder\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_folder)\",\n      \"on\": {\n        \"DELETED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Project (folder) deleted successfully\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Project (folder) not found\"\n      }\n    },\n    \"error_flow_reassignment\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Failed to reassign flows to default folder\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0047",
      "type": "logic",
      "name": "Download Project Endpoint Handler",
      "description": "GET /projects/download/{project_id} - Download project as zip",
      "path": "src/backend/base/langbuilder/api/v1/projects.py",
      "category": "API Endpoint",
      "function": "download_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"download_file_statechart\",\n  \"initial\": \"reading_folder\",\n  \"context\": {\n    \"folder_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"zip_buffer\": \"BytesIO buffer\"\n  },\n  \"states\": {\n    \"reading_folder\": {\n      \"entry\": \"query_folder_by_id\",\n      \"description\": \"SELECT * FROM folder WHERE id = folder_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"loading_flows\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"loading_flows\": {\n      \"entry\": \"load_folder_flows\",\n      \"description\": \"SELECT * FROM flow WHERE folder_id = folder_id\",\n      \"on\": {\n        \"FLOWS_FOUND\": \"creating_memory_buffer\",\n        \"NO_FLOWS\": \"error_no_content\"\n      }\n    },\n    \"creating_memory_buffer\": {\n      \"entry\": \"create_bytes_io\",\n      \"description\": \"BytesIO() for in-memory ZIP\",\n      \"on\": {\n        \"CREATED\": \"creating_zip_file\"\n      }\n    },\n    \"creating_zip_file\": {\n      \"entry\": \"create_zipfile\",\n      \"description\": \"ZipFile(zip_buffer, 'w', ZIP_DEFLATED)\",\n      \"on\": {\n        \"CREATED\": \"iterating_flows\"\n      }\n    },\n    \"iterating_flows\": {\n      \"entry\": \"get_next_flow\",\n      \"on\": {\n        \"HAS_FLOW\": \"serializing_flow\",\n        \"NO_MORE_FLOWS\": \"closing_zip_file\"\n      }\n    },\n    \"serializing_flow\": {\n      \"entry\": \"serialize_to_json\",\n      \"description\": \"json.dumps(flow.model_dump(), indent=2)\",\n      \"on\": {\n        \"SERIALIZED\": \"adding_to_zip\"\n      }\n    },\n    \"adding_to_zip\": {\n      \"entry\": \"write_to_zip\",\n      \"description\": \"zipfile.writestr(f'{flow.name}.json', flow_json)\",\n      \"on\": {\n        \"ADDED\": \"iterating_flows\",\n        \"ERROR\": \"error_zip\"\n      }\n    },\n    \"closing_zip_file\": {\n      \"entry\": \"close_zip\",\n      \"description\": \"zipfile.close()\",\n      \"on\": {\n        \"CLOSED\": \"seeking_buffer\"\n      }\n    },\n    \"seeking_buffer\": {\n      \"entry\": \"seek_to_start\",\n      \"description\": \"zip_buffer.seek(0)\",\n      \"on\": {\n        \"SEEKED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"response\": \"StreamingResponse with ZIP file of all flows in folder\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Project (folder) not found\"\n      }\n    },\n    \"error_no_content\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_204\",\n      \"data\": {\n        \"message\": \"No flows in folder to download\"\n      }\n    },\n    \"error_zip\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Failed to create ZIP file\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0048",
      "type": "logic",
      "name": "Upload Project Endpoint Handler",
      "description": "POST /projects/upload/ - Upload project from file",
      "path": "src/backend/base/langbuilder/api/v1/projects.py",
      "category": "API Endpoint",
      "function": "upload_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"upload_file_projects_statechart\",\n  \"initial\": \"reading_file_content\",\n  \"context\": {\n    \"file\": \"UploadFile object\",\n    \"folder_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"flows\": \"List of parsed flows\"\n  },\n  \"states\": {\n    \"reading_file_content\": {\n      \"entry\": \"read_uploaded_file\",\n      \"description\": \"await file.read()\",\n      \"on\": {\n        \"READ\": \"checking_file_type\",\n        \"ERROR\": \"error_file_read\"\n      }\n    },\n    \"checking_file_type\": {\n      \"entry\": \"check_content_type\",\n      \"description\": \"Check if file is JSON or ZIP\",\n      \"on\": {\n        \"JSON_FILE\": \"parsing_json\",\n        \"ZIP_FILE\": \"extracting_zip\",\n        \"UNKNOWN\": \"error_unsupported_format\"\n      }\n    },\n    \"parsing_json\": {\n      \"entry\": \"parse_json_content\",\n      \"description\": \"json.loads(content)\",\n      \"on\": {\n        \"SINGLE_FLOW\": \"creating_single_flow\",\n        \"FLOW_ARRAY\": \"creating_multiple_flows\",\n        \"ERROR\": \"error_invalid_json\"\n      }\n    },\n    \"extracting_zip\": {\n      \"entry\": \"extract_zip_contents\",\n      \"description\": \"ZipFile(BytesIO(content)) and read all .json files\",\n      \"on\": {\n        \"EXTRACTED\": \"creating_multiple_flows\",\n        \"ERROR\": \"error_invalid_zip\"\n      }\n    },\n    \"creating_single_flow\": {\n      \"entry\": \"create_flow\",\n      \"description\": \"Calls _new_flow(session, flow, user_id)\",\n      \"on\": {\n        \"CREATED\": \"assigning_folder\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"creating_multiple_flows\": {\n      \"entry\": \"create_flows\",\n      \"description\": \"Iterates and calls _new_flow for each flow\",\n      \"on\": {\n        \"CREATED\": \"assigning_folder\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"assigning_folder\": {\n      \"entry\": \"set_folder_id\",\n      \"description\": \"flow.folder_id = folder_id for all flows\",\n      \"on\": {\n        \"ASSIGNED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_flows\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_flows\": {\n      \"entry\": \"refresh_all_flows\",\n      \"description\": \"await session.refresh(flow) for each flow\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"flows\": \"List[FlowRead] of uploaded flows\"\n      }\n    },\n    \"error_file_read\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Failed to read uploaded file\"\n      }\n    },\n    \"error_unsupported_format\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Unsupported file format (must be JSON or ZIP)\"\n      }\n    },\n    \"error_invalid_json\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Invalid JSON in uploaded file\"\n      }\n    },\n    \"error_invalid_zip\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Invalid ZIP file\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\",\n      \"data\": {\n        \"error\": \"Flow validation error\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Database constraint violation\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0049",
      "type": "logic",
      "name": "Get User Store API Key Logic",
      "description": "Get and decrypt user's store API key",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "get_user_store_api_key",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_user_store_api_key_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for user_store_api_key\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"user_store_api_key\": \" user_store_api_key object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0050",
      "type": "logic",
      "name": "Get Optional Store API Key Logic",
      "description": "Get store API key with optional fallback",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "get_optional_user_store_api_key",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_optional_user_store_api_key_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for optional_user_store_api_key\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"optional_user_store_api_key\": \" optional_user_store_api_key object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0051",
      "type": "logic",
      "name": "Check Store Enabled Endpoint Handler",
      "description": "GET /store/check/ - Check if store is enabled",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "check_if_store_is_enabled",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"check_if_store_is_enabled_statechart\",\n  \"initial\": \"performing_check\",\n  \"context\": {\n    \"target\": \"Item to validate\",\n    \"validation_result\": \"Boolean result\"\n  },\n  \"states\": {\n    \"performing_check\": {\n      \"entry\": \"run_validation\",\n      \"description\": \"Perform validation: check_if_store_is_enabled\",\n      \"on\": {\n        \"VALID\": \"complete_valid\",\n        \"INVALID\": \"complete_invalid\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"complete_valid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": true\n      }\n    },\n    \"complete_invalid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": false\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0052",
      "type": "logic",
      "name": "Validate Store API Key Endpoint Handler",
      "description": "GET /store/check/api_key",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "check_if_store_has_api_key",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"check_if_store_has_api_key_statechart\",\n  \"initial\": \"performing_check\",\n  \"context\": {\n    \"target\": \"Item to validate\",\n    \"validation_result\": \"Boolean result\"\n  },\n  \"states\": {\n    \"performing_check\": {\n      \"entry\": \"run_validation\",\n      \"description\": \"Perform validation: check_if_store_has_api_key\",\n      \"on\": {\n        \"VALID\": \"complete_valid\",\n        \"INVALID\": \"complete_invalid\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"complete_valid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": true\n      }\n    },\n    \"complete_invalid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": false\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0053",
      "type": "logic",
      "name": "Share Component Endpoint Handler",
      "description": "POST /store/components/ - Share component to store",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "share_component",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"share_component_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"share_component\",\n      \"description\": \"POST /store/components/ - Share component to store\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0054",
      "type": "logic",
      "name": "Update Shared Component Endpoint Handler",
      "description": "PATCH /store/components/{component_id}",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "update_shared_component",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_shared_component_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"update_shared_component\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0055",
      "type": "logic",
      "name": "Search Components Endpoint Handler",
      "description": "GET /store/components/ - Get components with filters",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "get_components",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_components_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for components\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"components\": \"List of components objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0056",
      "type": "logic",
      "name": "Download Component Endpoint Handler",
      "description": "GET /store/components/{component_id}",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "download_component",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"download_component_statechart\",\n  \"initial\": \"preparing_file\",\n  \"context\": {\n    \"file\": \"File object or path\",\n    \"content\": \"File content\"\n  },\n  \"states\": {\n    \"validating_file\": {\n      \"entry\": \"check_file_exists\",\n      \"description\": \"Verify file exists\",\n      \"on\": {\n        \"EXISTS\": \"reading_content\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"reading_content\": {\n      \"entry\": \"read_file\",\n      \"description\": \"Read file content\",\n      \"on\": {\n        \"READ\": \"complete\",\n        \"ERROR\": \"error_file_operation\"\n      }\n    },\n    \"processing_content\": {},\n    \"storing_data\": {},\n    \"preparing_file\": {\n      \"entry\": \"prepare_download\",\n      \"description\": \"Prepare file for download\",\n      \"on\": {\n        \"PREPARED\": \"reading_content\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"File operation result\"\n      }\n    },\n    \"error_invalid_file\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_invalid_content\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_file_operation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    },\n    \"error_storage\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0057",
      "type": "logic",
      "name": "Get Store Tags Endpoint Handler",
      "description": "GET /store/tags - Get all available tags",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "get_tags",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_tags_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for tags\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"tags\": \"List of tags objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0058",
      "type": "logic",
      "name": "Get User Liked Components Endpoint Handler",
      "description": "GET /store/users/likes",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "get_list_of_components_liked_by_user",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_list_of_components_liked_by_user_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for of_components_liked_by_user\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"of_components_liked_by_user\": \" of_components_liked_by_user object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0059",
      "type": "logic",
      "name": "Like Component Endpoint Handler",
      "description": "POST /store/users/likes/{component_id}",
      "path": "src/backend/base/langbuilder/api/v1/store.py",
      "category": "API Endpoint",
      "function": "like_component",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"like_component_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"like_component\",\n      \"description\": \"POST /store/users/likes/{component_id}\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0060",
      "type": "logic",
      "name": "Get Vertices Order Endpoint Handler",
      "description": "POST /build/{flow_id}/vertices (deprecated)",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "retrieve_vertices_order",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"retrieve_vertices_order_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for vertices_order\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"vertices_order\": \" vertices_order object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0061",
      "type": "logic",
      "name": "Build Flow Endpoint Handler",
      "description": "POST /build/{flow_id}/flow - Build and process a flow",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "build_flow",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"build_flow_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute build_flow\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0062",
      "type": "logic",
      "name": "Get Build Events Endpoint Handler",
      "description": "GET /build/{job_id}/events - Get events for build job",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "get_build_events",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_build_events_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for build_events\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"build_events\": \"List of build_events objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0063",
      "type": "logic",
      "name": "Cancel Build Endpoint Handler",
      "description": "POST /build/{job_id}/cancel - Cancel a build job",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "cancel_build",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"cancel_build_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute cancel_build\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0064",
      "type": "logic",
      "name": "Build Single Vertex Endpoint Handler",
      "description": "POST /build/{flow_id}/vertices/{vertex_id} (deprecated)",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "build_vertex",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"build_vertex_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute build_vertex\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0065",
      "type": "logic",
      "name": "Stream Vertex Output Logic",
      "description": "Stream vertex output data",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "_stream_vertex",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_stream_vertex_statechart\",\n  \"initial\": \"initializing_stream\",\n  \"context\": {\n    \"stream\": \"Event stream\",\n    \"client\": \"Client connection\"\n  },\n  \"states\": {\n    \"initializing_stream\": {\n      \"entry\": \"setup_event_stream\",\n      \"description\": \"Initialize SSE or websocket stream\",\n      \"on\": {\n        \"INITIALIZED\": \"streaming_events\"\n      }\n    },\n    \"streaming_events\": {\n      \"entry\": \"generate_events\",\n      \"description\": \"Yield events to client\",\n      \"on\": {\n        \"EVENT_SENT\": \"streaming_events\",\n        \"COMPLETE\": \"closing_stream\",\n        \"ERROR\": \"error_stream\"\n      }\n    },\n    \"closing_stream\": {\n      \"entry\": \"cleanup_stream\",\n      \"description\": \"Close stream and cleanup resources\",\n      \"on\": {\n        \"CLOSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error_stream\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_stream_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0066",
      "type": "logic",
      "name": "Stream Vertex Build Endpoint Handler",
      "description": "GET /build/{flow_id}/{vertex_id}/stream (deprecated)",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "build_vertex_stream",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"build_vertex_stream_statechart\",\n  \"initial\": \"initializing_stream\",\n  \"context\": {\n    \"stream\": \"Event stream\",\n    \"client\": \"Client connection\"\n  },\n  \"states\": {\n    \"initializing_stream\": {\n      \"entry\": \"setup_event_stream\",\n      \"description\": \"Initialize SSE or websocket stream\",\n      \"on\": {\n        \"INITIALIZED\": \"streaming_events\"\n      }\n    },\n    \"streaming_events\": {\n      \"entry\": \"generate_events\",\n      \"description\": \"Yield events to client\",\n      \"on\": {\n        \"EVENT_SENT\": \"streaming_events\",\n        \"COMPLETE\": \"closing_stream\",\n        \"ERROR\": \"error_stream\"\n      }\n    },\n    \"closing_stream\": {\n      \"entry\": \"cleanup_stream\",\n      \"description\": \"Close stream and cleanup resources\",\n      \"on\": {\n        \"CLOSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error_stream\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_stream_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0067",
      "type": "logic",
      "name": "Build and Stream Flow Logic",
      "description": "Build flow and stream results",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "build_flow_and_stream",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"build_flow_and_stream_statechart\",\n  \"initial\": \"initializing_stream\",\n  \"context\": {\n    \"stream\": \"Event stream\",\n    \"client\": \"Client connection\"\n  },\n  \"states\": {\n    \"initializing_stream\": {\n      \"entry\": \"setup_event_stream\",\n      \"description\": \"Initialize SSE or websocket stream\",\n      \"on\": {\n        \"INITIALIZED\": \"streaming_events\"\n      }\n    },\n    \"streaming_events\": {\n      \"entry\": \"generate_events\",\n      \"description\": \"Yield events to client\",\n      \"on\": {\n        \"EVENT_SENT\": \"streaming_events\",\n        \"COMPLETE\": \"closing_stream\",\n        \"ERROR\": \"error_stream\"\n      }\n    },\n    \"closing_stream\": {\n      \"entry\": \"cleanup_stream\",\n      \"description\": \"Close stream and cleanup resources\",\n      \"on\": {\n        \"CLOSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error_stream\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_stream_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0068",
      "type": "logic",
      "name": "Build Public Flow Endpoint Handler",
      "description": "POST /build_public_tmp/{flow_id}/flow",
      "path": "src/backend/base/langbuilder/api/v1/chat.py",
      "category": "API Endpoint",
      "function": "build_public_tmp",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"build_public_tmp_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute build_public_tmp\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0069",
      "type": "logic",
      "name": "Get MCP Progress Notifications Setting",
      "description": "Get MCP progress notifications setting",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "get_enable_progress_notifications",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_enable_progress_notifications_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for enable_progress_notifications\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"enable_progress_notifications\": \"List of enable_progress_notifications objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0070",
      "type": "logic",
      "name": "Handle MCP List Prompts",
      "description": "Handle listing prompts for MCP server",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "handle_list_prompts",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"handle_list_prompts_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"handle_list_prompts\",\n      \"description\": \"Handle listing prompts for MCP server\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0071",
      "type": "logic",
      "name": "Handle MCP Global Resources",
      "description": "Handle listing resources for global MCP server",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "handle_global_resources",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"handle_global_resources_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"handle_global_resources\",\n      \"description\": \"Handle listing resources for global MCP server\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0072",
      "type": "logic",
      "name": "Handle MCP Read Resource",
      "description": "Handle resource read requests for MCP server",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "handle_global_read_resource",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"handle_global_read_resource_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"handle_global_read_resource\",\n      \"description\": \"Handle resource read requests for MCP server\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0073",
      "type": "logic",
      "name": "Handle MCP List Tools",
      "description": "Handle listing tools for MCP server",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "handle_global_tools",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"handle_global_tools_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"handle_global_tools\",\n      \"description\": \"Handle listing tools for MCP server\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0074",
      "type": "logic",
      "name": "Handle MCP Call Tool",
      "description": "Handle tool execution requests for MCP server",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "handle_global_call_tool",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"handle_global_call_tool_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"handle_global_call_tool\",\n      \"description\": \"Handle tool execution requests for MCP server\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0075",
      "type": "logic",
      "name": "Find MCP Validation Error",
      "description": "Search for ValidationError in exception chain",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "find_validation_error",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"find_validation_error_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"find_validation_error\",\n      \"description\": \"Search for ValidationError in exception chain\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0076",
      "type": "logic",
      "name": "MCP Health Check Endpoint Handler",
      "description": "HEAD /mcp/sse - Health check endpoint",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "im_alive",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"im_alive_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"im_alive\",\n      \"description\": \"HEAD /mcp/sse - Health check endpoint\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0077",
      "type": "logic",
      "name": "MCP SSE Connection Endpoint Handler",
      "description": "GET /mcp/sse - Handle SSE connection for MCP",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "handle_sse",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"handle_sse_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"handle_sse\",\n      \"description\": \"GET /mcp/sse - Handle SSE connection for MCP\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0078",
      "type": "logic",
      "name": "MCP Messages Endpoint Handler",
      "description": "POST /mcp/ - Handle MCP messages",
      "path": "src/backend/base/langbuilder/api/v1/mcp.py",
      "category": "API Endpoint",
      "function": "handle_messages",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"handle_messages_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"handle_messages\",\n      \"description\": \"POST /mcp/ - Handle MCP messages\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0079",
      "type": "logic",
      "name": "Initialize Database Service",
      "description": "Initialize DatabaseService with connection settings",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "__init__",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"__init___statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0080",
      "type": "logic",
      "name": "Initialize Alembic Log File",
      "description": "Initialize alembic log file directory",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "initialize_alembic_log_file",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"initialize_alembic_log_file_statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0081",
      "type": "logic",
      "name": "Reload Database Engine",
      "description": "Reload database engine with new settings",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "reload_engine",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"reload_engine_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"reload_engine\",\n      \"description\": \"Reload database engine with new settings\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0082",
      "type": "logic",
      "name": "Sanitize Database URL",
      "description": "Sanitize and normalize database URL",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_sanitize_database_url",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_sanitize_database_url_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_sanitize_database_url\",\n      \"description\": \"Sanitize and normalize database URL\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0083",
      "type": "logic",
      "name": "Build Connection Kwargs",
      "description": "Build connection kwargs from settings",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_build_connection_kwargs",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_build_connection_kwargs_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute _build_connection_kwargs\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0084",
      "type": "logic",
      "name": "Create Database Engine",
      "description": "Create async database engine",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_create_engine",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_create_engine_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"_create_engine\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0085",
      "type": "logic",
      "name": "Create Engine with Retry",
      "description": "Create engine with retry logic",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_create_engine_with_retry",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_create_engine_with_retry_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"_create_engine_with_retry\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0086",
      "type": "logic",
      "name": "Get Connection Arguments",
      "description": "Get database driver connection arguments",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_get_connect_args",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_get_connect_args_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_get_connect_args\",\n      \"description\": \"Get database driver connection arguments\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0087",
      "type": "logic",
      "name": "Handle Database Connection Event",
      "description": "Event handler for database connections (SQLite pragmas)",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "on_connection",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"on_connection_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"on_connection\",\n      \"description\": \"Event handler for database connections (SQLite pragmas)\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0088",
      "type": "logic",
      "name": "Database Session Context Manager",
      "description": "Context manager for database sessions",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "with_session",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"with_session_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"with_session\",\n      \"description\": \"Context manager for database sessions\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0089",
      "type": "logic",
      "name": "Assign Orphaned Flows",
      "description": "Assign flows without user_id to superuser",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "assign_orphaned_flows_to_superuser",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"assign_orphaned_flows_to_superuser_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"assign_orphaned_flows_to_superuser\",\n      \"description\": \"Assign flows without user_id to superuser\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0090",
      "type": "logic",
      "name": "Generate Unique Flow Name",
      "description": "Generate unique flow name with numeric suffix",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_generate_unique_flow_name",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_generate_unique_flow_name_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_generate_unique_flow_name\",\n      \"description\": \"Generate unique flow name with numeric suffix\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0091",
      "type": "logic",
      "name": "Check Schema Health",
      "description": "Check database schema health against models",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_check_schema_health",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_check_schema_health_statechart\",\n  \"initial\": \"performing_check\",\n  \"context\": {\n    \"target\": \"Item to validate\",\n    \"validation_result\": \"Boolean result\"\n  },\n  \"states\": {\n    \"performing_check\": {\n      \"entry\": \"run_validation\",\n      \"description\": \"Perform validation: _check_schema_health\",\n      \"on\": {\n        \"VALID\": \"complete_valid\",\n        \"INVALID\": \"complete_invalid\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"complete_valid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": true\n      }\n    },\n    \"complete_invalid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": false\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0092",
      "type": "logic",
      "name": "Async Check Schema Health",
      "description": "Async wrapper for schema health check",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "check_schema_health",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"check_schema_health_statechart\",\n  \"initial\": \"performing_check\",\n  \"context\": {\n    \"target\": \"Item to validate\",\n    \"validation_result\": \"Boolean result\"\n  },\n  \"states\": {\n    \"performing_check\": {\n      \"entry\": \"run_validation\",\n      \"description\": \"Perform validation: check_schema_health\",\n      \"on\": {\n        \"VALID\": \"complete_valid\",\n        \"INVALID\": \"complete_invalid\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"complete_valid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": true\n      }\n    },\n    \"complete_invalid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": false\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0093",
      "type": "logic",
      "name": "Initialize Alembic",
      "description": "Initialize alembic migration system",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "init_alembic",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"init_alembic_statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0094",
      "type": "logic",
      "name": "Run Database Migrations",
      "description": "Run database migrations with alembic",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_run_migrations",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_run_migrations_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute _run_migrations\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0095",
      "type": "logic",
      "name": "Async Run Migrations",
      "description": "Async run migrations wrapper",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "run_migrations",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"run_migrations_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute run_migrations\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0096",
      "type": "logic",
      "name": "Retry Migration with Downgrade",
      "description": "Retry migration with downgrade/upgrade cycle",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "try_downgrade_upgrade_until_success",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"try_downgrade_upgrade_until_success_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"try_downgrade_upgrade_until_success\",\n      \"description\": \"Retry migration with downgrade/upgrade cycle\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0097",
      "type": "logic",
      "name": "Test Database Migrations",
      "description": "Test migrations against all models",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "run_migrations_test",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"run_migrations_test_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute run_migrations_test\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0098",
      "type": "logic",
      "name": "Check Table Schema",
      "description": "Check table schema against model",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "check_table",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"check_table_statechart\",\n  \"initial\": \"performing_check\",\n  \"context\": {\n    \"target\": \"Item to validate\",\n    \"validation_result\": \"Boolean result\"\n  },\n  \"states\": {\n    \"performing_check\": {\n      \"entry\": \"run_validation\",\n      \"description\": \"Perform validation: check_table\",\n      \"on\": {\n        \"VALID\": \"complete_valid\",\n        \"INVALID\": \"complete_invalid\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"complete_valid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": true\n      }\n    },\n    \"complete_invalid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": false\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0099",
      "type": "logic",
      "name": "Create Database Tables",
      "description": "Create database tables from SQLModel",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "_create_db_and_tables",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_create_db_and_tables_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"_create_db_and_tables\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0100",
      "type": "logic",
      "name": "Create Tables with Retry",
      "description": "Create tables with retry logic",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "create_db_and_tables_with_retry",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_db_and_tables_with_retry_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"create_db_and_tables_with_retry\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0101",
      "type": "logic",
      "name": "Async Create Tables",
      "description": "Async create database and tables",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "create_db_and_tables",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_db_and_tables_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"create_db_and_tables\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0102",
      "type": "logic",
      "name": "Teardown Database Service",
      "description": "Teardown database service and cleanup",
      "path": "src/backend/base/langbuilder/services/database/service.py",
      "category": "Service Method",
      "function": "teardown",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"teardown_statechart\",\n  \"initial\": \"stopping_services\",\n  \"context\": {\n    \"resources\": \"Resources to cleanup\"\n  },\n  \"states\": {\n    \"stopping_services\": {\n      \"entry\": \"stop_active_services\",\n      \"description\": \"Stop running services and processes\",\n      \"on\": {\n        \"STOPPED\": \"closing_connections\"\n      }\n    },\n    \"closing_connections\": {\n      \"entry\": \"close_connections\",\n      \"description\": \"Close database and network connections\",\n      \"on\": {\n        \"CLOSED\": \"releasing_resources\"\n      }\n    },\n    \"releasing_resources\": {\n      \"entry\": \"release_resources\",\n      \"description\": \"Release allocated resources\",\n      \"on\": {\n        \"RELEASED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Cleanup completed\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0103",
      "type": "logic",
      "name": "Initialize Session Service",
      "description": "Initialize SessionService with cache service",
      "path": "src/backend/base/langbuilder/services/session/service.py",
      "category": "Service Method",
      "function": "__init__",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"__init___statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0104",
      "type": "logic",
      "name": "Load Session",
      "description": "Load session from cache or create new",
      "path": "src/backend/base/langbuilder/services/session/service.py",
      "category": "Service Method",
      "function": "load_session",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"load_session_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"load_session\",\n      \"description\": \"Load session from cache or create new\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0105",
      "type": "logic",
      "name": "Build Session Key",
      "description": "Build session key from session_id and data hash",
      "path": "src/backend/base/langbuilder/services/session/service.py",
      "category": "Service Method",
      "function": "build_key",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"build_key_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute build_key\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0106",
      "type": "logic",
      "name": "Generate Session Key",
      "description": "Generate unique session key",
      "path": "src/backend/base/langbuilder/services/session/service.py",
      "category": "Service Method",
      "function": "generate_key",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"generate_key_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"generate_key\",\n      \"description\": \"Generate unique session key\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0107",
      "type": "logic",
      "name": "Update Session",
      "description": "Update session data in cache",
      "path": "src/backend/base/langbuilder/services/session/service.py",
      "category": "Service Method",
      "function": "update_session",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_session_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"update_session\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0108",
      "type": "logic",
      "name": "Clear Session",
      "description": "Clear session from cache",
      "path": "src/backend/base/langbuilder/services/session/service.py",
      "category": "Service Method",
      "function": "clear_session",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"clear_session_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"clear_session\",\n      \"description\": \"Clear session from cache\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0109",
      "type": "logic",
      "name": "Initialize Chat Service",
      "description": "Initialize ChatService with cache locks",
      "path": "src/backend/base/langbuilder/services/chat/service.py",
      "category": "Service Method",
      "function": "__init__",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"__init___statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0110",
      "type": "logic",
      "name": "Set Cache Entry",
      "description": "Set cache data for a key with optional lock",
      "path": "src/backend/base/langbuilder/services/chat/service.py",
      "category": "Service Method",
      "function": "set_cache",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"set_cache_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"set_cache\",\n      \"description\": \"Set cache data for a key with optional lock\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0111",
      "type": "logic",
      "name": "Get Cache Entry",
      "description": "Get cached data for a key with optional lock",
      "path": "src/backend/base/langbuilder/services/chat/service.py",
      "category": "Service Method",
      "function": "get_cache",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_cache_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for cache\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"cache\": \" cache object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0112",
      "type": "logic",
      "name": "Clear Cache Entry",
      "description": "Clear cache for a specific key",
      "path": "src/backend/base/langbuilder/services/chat/service.py",
      "category": "Service Method",
      "function": "clear_cache",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"clear_cache_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"clear_cache\",\n      \"description\": \"Clear cache for a specific key\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0113",
      "type": "logic",
      "name": "Initialize Variable Service",
      "description": "Initialize DatabaseVariableService",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "__init__",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"__init___statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0114",
      "type": "logic",
      "name": "Initialize User Variables from ENV",
      "description": "Initialize user variables from environment",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "initialize_user_variables",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"initialize_user_variables_statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0115",
      "type": "logic",
      "name": "Get Variable Value",
      "description": "Get and decrypt variable value",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "get_variable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_variable_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for variable\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"variable\": \" variable object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0116",
      "type": "logic",
      "name": "Get All Variables",
      "description": "Get all variables for user",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "get_all",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_all_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for all\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"all\": \"List of all objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0117",
      "type": "logic",
      "name": "List Variable Names",
      "description": "List variable names for user",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "list_variables",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"list_variables_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for variables\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"variables\": \"List of variables objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0118",
      "type": "logic",
      "name": "Update Variable Value",
      "description": "Update variable value",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "update_variable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_variable_statechart\",\n  \"initial\": \"reading_existing_variable\",\n  \"context\": {\n    \"variable_id\": \"UUID\",\n    \"variable_update\": \"VariableUpdate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_variable\": \"Existing variable object\"\n  },\n  \"states\": {\n    \"reading_existing_variable\": {\n      \"entry\": \"query_variable_by_id\",\n      \"description\": \"SELECT * FROM variable WHERE id = variable_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"checking_value_update\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"checking_value_update\": {\n      \"entry\": \"check_value_field\",\n      \"description\": \"Check if variable_update.value is set\",\n      \"on\": {\n        \"VALUE_PROVIDED\": \"encrypting_new_value\",\n        \"NO_VALUE\": \"updating_fields\"\n      }\n    },\n    \"encrypting_new_value\": {\n      \"entry\": \"encrypt_with_fernet\",\n      \"description\": \"Uses Fernet symmetric encryption\",\n      \"on\": {\n        \"ENCRYPTED\": \"updating_fields_with_value\"\n      }\n    },\n    \"updating_fields_with_value\": {\n      \"entry\": \"update_variable_fields\",\n      \"description\": \"Update fields including encrypted value\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"updating_fields\": {\n      \"entry\": \"update_variable_fields\",\n      \"description\": \"Update fields from variable_update.model_dump(exclude_unset=True)\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_variable)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_variable\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_variable\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_variable)\",\n      \"on\": {\n        \"REFRESHED\": \"decrypting_value\"\n      }\n    },\n    \"decrypting_value\": {\n      \"entry\": \"decrypt_with_fernet\",\n      \"description\": \"Decrypt value before returning to client\",\n      \"on\": {\n        \"DECRYPTED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"variable\": \"Updated VariableRead object (value decrypted)\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Variable not found\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Variable name must be unique for user\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0119",
      "type": "logic",
      "name": "Update Variable Fields",
      "description": "Update variable fields by ID",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "update_variable_fields",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_variable_fields_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"update_variable_fields\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0120",
      "type": "logic",
      "name": "Delete Variable by Name",
      "description": "Delete variable by name",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "delete_variable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_variable_statechart\",\n  \"initial\": \"reading_existing_variable\",\n  \"context\": {\n    \"variable_id\": \"UUID\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_variable\": \"Variable object to delete\"\n  },\n  \"states\": {\n    \"reading_existing_variable\": {\n      \"entry\": \"query_variable_by_id\",\n      \"description\": \"SELECT * FROM variable WHERE id = variable_id AND user_id = user_id\",\n      \"on\": {\n        \"FOUND\": \"deleting_from_session\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"deleting_from_session\": {\n      \"entry\": \"session_delete\",\n      \"description\": \"await session.delete(db_variable)\",\n      \"on\": {\n        \"DELETED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"complete\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Variable deleted successfully\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\",\n      \"data\": {\n        \"error\": \"Variable not found\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0121",
      "type": "logic",
      "name": "Delete Variable by ID",
      "description": "Delete variable by ID",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "delete_variable_by_id",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"delete_variable_by_id_statechart\",\n  \"initial\": \"confirming\",\n  \"states\": {\n    \"confirming\": {\n      \"entry\": \"verify_ownership\",\n      \"on\": {\n        \"CONFIRMED\": \"deleting\",\n        \"DENIED\": \"error\"\n      }\n    },\n    \"deleting\": {\n      \"entry\": \"delete_variable_by_id\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0122",
      "type": "logic",
      "name": "Create Variable",
      "description": "Create new encrypted variable",
      "path": "src/backend/base/langbuilder/services/variable/service.py",
      "category": "Service Method",
      "function": "create_variable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_variable_statechart\",\n  \"initial\": \"checking_value_encryption\",\n  \"context\": {\n    \"variable\": \"VariableCreate object\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_variable\": \"Created variable object\"\n  },\n  \"states\": {\n    \"checking_value_encryption\": {\n      \"entry\": \"check_value_field\",\n      \"description\": \"Check if variable.value needs encryption\",\n      \"on\": {\n        \"VALUE_PROVIDED\": \"encrypting_value\",\n        \"NO_VALUE\": \"creating_variable_object\"\n      }\n    },\n    \"encrypting_value\": {\n      \"entry\": \"encrypt_with_fernet\",\n      \"description\": \"Uses Fernet symmetric encryption to encrypt variable value\",\n      \"on\": {\n        \"ENCRYPTED\": \"creating_variable_object\"\n      }\n    },\n    \"creating_variable_object\": {\n      \"entry\": \"instantiate_variable_model\",\n      \"description\": \"Variable(**variable.model_dump(), user_id=user_id)\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(db_variable)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_variable\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_variable\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(db_variable)\",\n      \"on\": {\n        \"REFRESHED\": \"decrypting_value\"\n      }\n    },\n    \"decrypting_value\": {\n      \"entry\": \"decrypt_with_fernet\",\n      \"description\": \"Decrypt value before returning to client\",\n      \"on\": {\n        \"DECRYPTED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"variable\": \"VariableRead object (value decrypted)\"\n      }\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\",\n      \"data\": {\n        \"error\": \"Variable name must be unique for user\"\n      }\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\",\n      \"data\": {\n        \"error\": \"Database commit error\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0123",
      "type": "logic",
      "name": "Initialize Job Queue Service",
      "description": "Initialize JobQueueService",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "__init__",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"__init___statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0124",
      "type": "logic",
      "name": "Check Service Started",
      "description": "Check if service has started",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "is_started",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"is_started_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"is_started\",\n      \"description\": \"Check if service has started\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0125",
      "type": "logic",
      "name": "Set Service Ready",
      "description": "Set service to ready state",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "set_ready",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"set_ready_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"set_ready\",\n      \"description\": \"Set service to ready state\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0126",
      "type": "logic",
      "name": "Start Job Queue Service",
      "description": "Start periodic cleanup task",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "start",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"start_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"start\",\n      \"description\": \"Start periodic cleanup task\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0127",
      "type": "logic",
      "name": "Stop Job Queue Service",
      "description": "Stop service and cleanup all queues",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "stop",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"stop_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"stop\",\n      \"description\": \"Stop service and cleanup all queues\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0128",
      "type": "logic",
      "name": "Teardown Job Queue Service",
      "description": "Teardown service",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "teardown",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"teardown_statechart\",\n  \"initial\": \"stopping_services\",\n  \"context\": {\n    \"resources\": \"Resources to cleanup\"\n  },\n  \"states\": {\n    \"stopping_services\": {\n      \"entry\": \"stop_active_services\",\n      \"description\": \"Stop running services and processes\",\n      \"on\": {\n        \"STOPPED\": \"closing_connections\"\n      }\n    },\n    \"closing_connections\": {\n      \"entry\": \"close_connections\",\n      \"description\": \"Close database and network connections\",\n      \"on\": {\n        \"CLOSED\": \"releasing_resources\"\n      }\n    },\n    \"releasing_resources\": {\n      \"entry\": \"release_resources\",\n      \"description\": \"Release allocated resources\",\n      \"on\": {\n        \"RELEASED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Cleanup completed\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0129",
      "type": "logic",
      "name": "Create Job Queue",
      "description": "Create queue and event manager for job",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "create_queue",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"create_queue_statechart\",\n  \"initial\": \"validating_input\",\n  \"context\": {\n    \"input_data\": \"queue creation data\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_queue\": \"Created queue object\"\n  },\n  \"states\": {\n    \"validating_input\": {\n      \"entry\": \"validate_input_data\",\n      \"description\": \"Validate queue creation data\",\n      \"on\": {\n        \"VALID\": \"checking_uniqueness\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"checking_uniqueness\": {\n      \"entry\": \"check_unique_constraints\",\n      \"description\": \"Query database for existing queue\",\n      \"on\": {\n        \"UNIQUE\": \"creating_object\",\n        \"DUPLICATE\": \"error_duplicate\"\n      }\n    },\n    \"creating_object\": {\n      \"entry\": \"instantiate_model\",\n      \"description\": \"Create queue model instance\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(object)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_object\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_object\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(object)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"queue\": \"Created queue object\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_duplicate\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\"\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0130",
      "type": "logic",
      "name": "Start Job Task",
      "description": "Start async task for job",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "start_job",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"start_job_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"start_job\",\n      \"description\": \"Start async task for job\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0131",
      "type": "logic",
      "name": "Get Queue Data",
      "description": "Get queue data structure for job",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "get_queue_data",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_queue_data_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for queue_data\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"queue_data\": \" queue_data object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0132",
      "type": "logic",
      "name": "Cleanup Job",
      "description": "Cleanup and release job resources",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "cleanup_job",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"cleanup_job_statechart\",\n  \"initial\": \"stopping_services\",\n  \"context\": {\n    \"resources\": \"Resources to cleanup\"\n  },\n  \"states\": {\n    \"stopping_services\": {\n      \"entry\": \"stop_active_services\",\n      \"description\": \"Stop running services and processes\",\n      \"on\": {\n        \"STOPPED\": \"closing_connections\"\n      }\n    },\n    \"closing_connections\": {\n      \"entry\": \"close_connections\",\n      \"description\": \"Close database and network connections\",\n      \"on\": {\n        \"CLOSED\": \"releasing_resources\"\n      }\n    },\n    \"releasing_resources\": {\n      \"entry\": \"release_resources\",\n      \"description\": \"Release allocated resources\",\n      \"on\": {\n        \"RELEASED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Cleanup completed\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0133",
      "type": "logic",
      "name": "Periodic Job Cleanup",
      "description": "Periodic cleanup of old queues",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "_periodic_cleanup",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_periodic_cleanup_statechart\",\n  \"initial\": \"stopping_services\",\n  \"context\": {\n    \"resources\": \"Resources to cleanup\"\n  },\n  \"states\": {\n    \"stopping_services\": {\n      \"entry\": \"stop_active_services\",\n      \"description\": \"Stop running services and processes\",\n      \"on\": {\n        \"STOPPED\": \"closing_connections\"\n      }\n    },\n    \"closing_connections\": {\n      \"entry\": \"close_connections\",\n      \"description\": \"Close database and network connections\",\n      \"on\": {\n        \"CLOSED\": \"releasing_resources\"\n      }\n    },\n    \"releasing_resources\": {\n      \"entry\": \"release_resources\",\n      \"description\": \"Release allocated resources\",\n      \"on\": {\n        \"RELEASED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Cleanup completed\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0134",
      "type": "logic",
      "name": "Cleanup Old Queues",
      "description": "Scan and cleanup completed jobs",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "_cleanup_old_queues",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_cleanup_old_queues_statechart\",\n  \"initial\": \"stopping_services\",\n  \"context\": {\n    \"resources\": \"Resources to cleanup\"\n  },\n  \"states\": {\n    \"stopping_services\": {\n      \"entry\": \"stop_active_services\",\n      \"description\": \"Stop running services and processes\",\n      \"on\": {\n        \"STOPPED\": \"closing_connections\"\n      }\n    },\n    \"closing_connections\": {\n      \"entry\": \"close_connections\",\n      \"description\": \"Close database and network connections\",\n      \"on\": {\n        \"CLOSED\": \"releasing_resources\"\n      }\n    },\n    \"releasing_resources\": {\n      \"entry\": \"release_resources\",\n      \"description\": \"Release allocated resources\",\n      \"on\": {\n        \"RELEASED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"message\": \"Cleanup completed\"\n      }\n    }\n  }\n}"
    },
    {
      "id": "nl0135",
      "type": "logic",
      "name": "Create Default Event Manager",
      "description": "Create event manager with default events",
      "path": "src/backend/base/langbuilder/services/job_queue/service.py",
      "category": "Service Method",
      "function": "_create_default_event_manager",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_create_default_event_manager_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"_create_default_event_manager\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0136",
      "type": "logic",
      "name": "Append State Value",
      "description": "Append value to state list",
      "path": "src/backend/base/langbuilder/services/state/service.py",
      "category": "Service Method",
      "function": "append_state",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"append_state_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"append_state\",\n      \"description\": \"Append value to state list\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0137",
      "type": "logic",
      "name": "Update State Value",
      "description": "Update state value",
      "path": "src/backend/base/langbuilder/services/state/service.py",
      "category": "Service Method",
      "function": "update_state",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"update_state_statechart\",\n  \"initial\": \"reading_existing\",\n  \"context\": {\n    \"entity_id\": \"UUID\",\n    \"update_data\": \"Update payload\",\n    \"session\": \"Database session\",\n    \"db_state\": \"state object\"\n  },\n  \"states\": {\n    \"reading_existing\": {\n      \"entry\": \"query_by_id\",\n      \"description\": \"SELECT * FROM state WHERE id = entity_id\",\n      \"on\": {\n        \"FOUND\": \"validating_update\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"validating_update\": {\n      \"entry\": \"validate_update_data\",\n      \"description\": \"Validate update payload\",\n      \"on\": {\n        \"VALID\": \"updating_fields\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"updating_fields\": {\n      \"entry\": \"apply_updates\",\n      \"description\": \"Update object fields from payload\",\n      \"on\": {\n        \"UPDATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(object)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_object\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_object\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(object)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"state\": \"Updated state object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0138",
      "type": "logic",
      "name": "Get State Value",
      "description": "Get state value",
      "path": "src/backend/base/langbuilder/services/state/service.py",
      "category": "Service Method",
      "function": "get_state",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_state_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for state\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"state\": \" state object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0139",
      "type": "logic",
      "name": "Subscribe to State Changes",
      "description": "Subscribe observer to state changes",
      "path": "src/backend/base/langbuilder/services/state/service.py",
      "category": "Service Method",
      "function": "subscribe",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"subscribe_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"subscribe\",\n      \"description\": \"Subscribe observer to state changes\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0140",
      "type": "logic",
      "name": "Unsubscribe from State",
      "description": "Unsubscribe observer from state",
      "path": "src/backend/base/langbuilder/services/state/service.py",
      "category": "Service Method",
      "function": "unsubscribe",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"unsubscribe_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"unsubscribe\",\n      \"description\": \"Unsubscribe observer from state\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0141",
      "type": "logic",
      "name": "Notify State Observers",
      "description": "Notify observers of state change",
      "path": "src/backend/base/langbuilder/services/state/service.py",
      "category": "Service Method",
      "function": "notify_observers",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"notify_observers_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"notify_observers\",\n      \"description\": \"Notify observers of state change\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0142",
      "type": "logic",
      "name": "Notify Append Observers",
      "description": "Notify observers of state append",
      "path": "src/backend/base/langbuilder/services/state/service.py",
      "category": "Service Method",
      "function": "notify_append_observers",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"notify_append_observers_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"notify_append_observers\",\n      \"description\": \"Notify observers of state append\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0143",
      "type": "logic",
      "name": "Initialize Graph",
      "description": "Initialize Graph with vertices and edges",
      "path": "src/backend/base/langbuilder/graph/graph/base.py",
      "category": "Graph Processing",
      "function": "__init__",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"__init___statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0144",
      "type": "logic",
      "name": "Serialize Graph to JSON",
      "description": "Serialize graph to JSON string",
      "path": "src/backend/base/langbuilder/graph/graph/base.py",
      "category": "Graph Processing",
      "function": "dumps",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"dumps_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"dumps\",\n      \"description\": \"Serialize graph to JSON string\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0145",
      "type": "logic",
      "name": "Dump Graph to Dict",
      "description": "Dump graph to dictionary",
      "path": "src/backend/base/langbuilder/graph/graph/base.py",
      "category": "Graph Processing",
      "function": "dump",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"dump_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"dump\",\n      \"description\": \"Dump graph to dictionary\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0146",
      "type": "logic",
      "name": "Add Nodes and Edges",
      "description": "Add nodes and edges to graph",
      "path": "src/backend/base/langbuilder/graph/graph/base.py",
      "category": "Graph Processing",
      "function": "add_nodes_and_edges",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"add_nodes_and_edges_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"add_nodes_and_edges\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0147",
      "type": "logic",
      "name": "Add Component to Graph",
      "description": "Add component to graph",
      "path": "src/backend/base/langbuilder/graph/graph/base.py",
      "category": "Graph Processing",
      "function": "add_component",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"add_component_statechart\",\n  \"initial\": \"validating_input\",\n  \"context\": {\n    \"input_data\": \"component creation data\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_component\": \"Created component object\"\n  },\n  \"states\": {\n    \"validating_input\": {\n      \"entry\": \"validate_input_data\",\n      \"description\": \"Validate component creation data\",\n      \"on\": {\n        \"VALID\": \"checking_uniqueness\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"checking_uniqueness\": {\n      \"entry\": \"check_unique_constraints\",\n      \"description\": \"Query database for existing component\",\n      \"on\": {\n        \"UNIQUE\": \"creating_object\",\n        \"DUPLICATE\": \"error_duplicate\"\n      }\n    },\n    \"creating_object\": {\n      \"entry\": \"instantiate_model\",\n      \"description\": \"Create component model instance\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(object)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_object\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_object\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(object)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"component\": \"Created component object\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_duplicate\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\"\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0148",
      "type": "logic",
      "name": "Set Start and End Components",
      "description": "Set start and end components",
      "path": "src/backend/base/langbuilder/graph/graph/base.py",
      "category": "Graph Processing",
      "function": "_set_start_and_end",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_set_start_and_end_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_set_start_and_end\",\n      \"description\": \"Set start and end components\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0149",
      "type": "logic",
      "name": "Add Component Edge",
      "description": "Add edge between components",
      "path": "src/backend/base/langbuilder/graph/graph/base.py",
      "category": "Graph Processing",
      "function": "add_component_edge",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"add_component_edge_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"add_component_edge\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0150",
      "type": "logic",
      "name": "Initialize Vertex",
      "description": "Initialize Vertex with data and graph",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "__init__",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"__init___statechart\",\n  \"initial\": \"loading_configuration\",\n  \"context\": {\n    \"config\": \"Configuration data\",\n    \"resources\": \"Initialized resources\"\n  },\n  \"states\": {\n    \"loading_configuration\": {\n      \"entry\": \"load_config\",\n      \"description\": \"Load configuration and settings\",\n      \"on\": {\n        \"LOADED\": \"initializing_resources\"\n      }\n    },\n    \"initializing_resources\": {\n      \"entry\": \"setup_resources\",\n      \"description\": \"Initialize required resources\",\n      \"on\": {\n        \"INITIALIZED\": \"validating_setup\",\n        \"ERROR\": \"error_initialization\"\n      }\n    },\n    \"validating_setup\": {\n      \"entry\": \"validate_initialization\",\n      \"description\": \"Verify initialization completed correctly\",\n      \"on\": {\n        \"VALID\": \"complete\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"initialized\": true\n      }\n    },\n    \"error_initialization\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0151",
      "type": "logic",
      "name": "Set Vertex Input Value",
      "description": "Set input value for vertex component",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "set_input_value",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"set_input_value_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"set_input_value\",\n      \"description\": \"Set input value for vertex component\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0152",
      "type": "logic",
      "name": "Convert Vertex to Data",
      "description": "Convert vertex to data dictionary",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "to_data",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"to_data_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"to_data\",\n      \"description\": \"Convert vertex to data dictionary\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0153",
      "type": "logic",
      "name": "Add Component Instance",
      "description": "Add component instance to vertex",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "add_component_instance",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"add_component_instance_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"add_component_instance\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0154",
      "type": "logic",
      "name": "Add Vertex Result",
      "description": "Add result to vertex results",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "add_result",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"add_result_statechart\",\n  \"initial\": \"validating_input\",\n  \"context\": {\n    \"input_data\": \"result creation data\",\n    \"user_id\": \"UUID\",\n    \"session\": \"Database session\",\n    \"db_result\": \"Created result object\"\n  },\n  \"states\": {\n    \"validating_input\": {\n      \"entry\": \"validate_input_data\",\n      \"description\": \"Validate result creation data\",\n      \"on\": {\n        \"VALID\": \"checking_uniqueness\",\n        \"INVALID\": \"error_validation\"\n      }\n    },\n    \"checking_uniqueness\": {\n      \"entry\": \"check_unique_constraints\",\n      \"description\": \"Query database for existing result\",\n      \"on\": {\n        \"UNIQUE\": \"creating_object\",\n        \"DUPLICATE\": \"error_duplicate\"\n      }\n    },\n    \"creating_object\": {\n      \"entry\": \"instantiate_model\",\n      \"description\": \"Create result model instance\",\n      \"on\": {\n        \"CREATED\": \"adding_to_session\"\n      }\n    },\n    \"adding_to_session\": {\n      \"entry\": \"session_add\",\n      \"description\": \"session.add(object)\",\n      \"on\": {\n        \"ADDED\": \"committing_transaction\"\n      }\n    },\n    \"committing_transaction\": {\n      \"entry\": \"session_commit\",\n      \"description\": \"await session.commit()\",\n      \"on\": {\n        \"COMMITTED\": \"refreshing_object\",\n        \"INTEGRITY_ERROR\": \"error_database_constraint\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"refreshing_object\": {\n      \"entry\": \"session_refresh\",\n      \"description\": \"await session.refresh(object)\",\n      \"on\": {\n        \"REFRESHED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Created result object\"\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_duplicate\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\"\n    },\n    \"error_database_constraint\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_409\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0155",
      "type": "logic",
      "name": "Set Vertex State",
      "description": "Set vertex state (ACTIVE/INACTIVE/ERROR)",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "set_state",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"set_state_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"set_state\",\n      \"description\": \"Set vertex state (ACTIVE/INACTIVE/ERROR)\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0156",
      "type": "logic",
      "name": "Check Vertex Active",
      "description": "Check if vertex is active",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "is_active",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"is_active_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"is_active\",\n      \"description\": \"Check if vertex is active\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0157",
      "type": "logic",
      "name": "Add Build Time",
      "description": "Add build time to history",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "add_build_time",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"add_build_time_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"add_build_time\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0158",
      "type": "logic",
      "name": "Set Vertex Result",
      "description": "Set vertex result data",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "set_result",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"set_result_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"set_result\",\n      \"description\": \"Set vertex result data\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0159",
      "type": "logic",
      "name": "Get Built Result",
      "description": "Get built result from vertex",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "get_built_result",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_built_result_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for built_result\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"built_result\": \" built_result object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0160",
      "type": "logic",
      "name": "Set Vertex Artifacts",
      "description": "Set vertex artifacts",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "set_artifacts",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"set_artifacts_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"set_artifacts\",\n      \"description\": \"Set vertex artifacts\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0161",
      "type": "logic",
      "name": "Get Incoming Edge",
      "description": "Get incoming edge by target parameter",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "get_incoming_edge_by_target_param",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_incoming_edge_by_target_param_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for incoming_edge_by_tarparam\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"incoming_edge_by_tarparam\": \" incoming_edge_by_tarparam object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0162",
      "type": "logic",
      "name": "Set Top Level Flag",
      "description": "Set if parent is top level",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "set_top_level",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"set_top_level_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"set_top_level\",\n      \"description\": \"Set if parent is top level\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0163",
      "type": "logic",
      "name": "Parse Vertex Data",
      "description": "Parse vertex data from node data",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "parse_data",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"parse_data_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"parse_data\",\n      \"description\": \"Parse vertex data from node data\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0164",
      "type": "logic",
      "name": "Get Value from Output Names",
      "description": "Get value from output names",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "get_value_from_output_names",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_value_from_output_names_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for value_from_output_names\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_all\",\n      \"description\": \"result.all()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"value_from_output_names\": \"List of value_from_output_names objects\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0165",
      "type": "logic",
      "name": "Get Value from Template",
      "description": "Get value from template dictionary",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "get_value_from_template_dict",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"get_value_from_template_dict_statechart\",\n  \"initial\": \"building_query\",\n  \"context\": {\n    \"filters\": \"Query filters\",\n    \"session\": \"Database session\",\n    \"query\": \"SELECT statement\"\n  },\n  \"states\": {\n    \"building_query\": {\n      \"entry\": \"create_select_statement\",\n      \"description\": \"Build SELECT query for value_from_template_dict\",\n      \"on\": {\n        \"QUERY_BUILT\": \"applying_filters\"\n      }\n    },\n    \"applying_filters\": {\n      \"entry\": \"add_where_clauses\",\n      \"description\": \"Apply filters (user_id, id, etc.)\",\n      \"on\": {\n        \"FILTERS_APPLIED\": \"executing_query\"\n      }\n    },\n    \"executing_query\": {\n      \"entry\": \"execute_select\",\n      \"description\": \"await session.exec(query)\",\n      \"on\": {\n        \"SUCCESS\": \"fetching_results\",\n        \"ERROR\": \"error_database\"\n      }\n    },\n    \"fetching_results\": {\n      \"entry\": \"fetch_first\",\n      \"description\": \"result.first()\",\n      \"on\": {\n        \"FETCHED\": \"complete\",\n        \"NOT_FOUND\": \"error_not_found\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"value_from_template_dict\": \" value_from_template_dict object\"\n      }\n    },\n    \"error_not_found\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_404\"\n    },\n    \"error_database\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0166",
      "type": "logic",
      "name": "Set Parameters from Edge",
      "description": "Set parameters from normal edge",
      "path": "src/backend/base/langbuilder/graph/vertex/base.py",
      "category": "Graph Processing",
      "function": "_set_params_from_normal_edge",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_set_params_from_normal_edge_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_set_params_from_normal_edge\",\n      \"description\": \"Set parameters from normal edge\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0167",
      "type": "logic",
      "name": "Set Playground Page State",
      "description": "Set playground page state",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setPlaygroundPage",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setPlaygroundPage_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"setPlaygroundPage\",\n      \"description\": \"Set playground page state\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0168",
      "type": "logic",
      "name": "Set Position Dictionary",
      "description": "Set position dictionary for nodes",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setPositionDictionary",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setPositionDictionary_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"setPositionDictionary\",\n      \"description\": \"Set position dictionary for nodes\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0169",
      "type": "logic",
      "name": "Check Position Available",
      "description": "Check if position is available",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "isPositionAvailable",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"isPositionAvailable_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"isPositionAvailable\",\n      \"description\": \"Check if position is available\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0170",
      "type": "logic",
      "name": "Fit View to Node",
      "description": "Fit view to specific node",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "fitViewNode",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"fitViewNode_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"fitViewNode\",\n      \"description\": \"Fit view to specific node\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0171",
      "type": "logic",
      "name": "Set Components to Update",
      "description": "Set components that need updates",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setComponentsToUpdate",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setComponentsToUpdate_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"setComponentsToUpdate\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0172",
      "type": "logic",
      "name": "Update Components",
      "description": "Update components with outdated code",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "updateComponentsToUpdate",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"updateComponentsToUpdate_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"updateComponentsToUpdate\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0173",
      "type": "logic",
      "name": "Set On Flow Page",
      "description": "Set on flow page state",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setOnFlowPage",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setOnFlowPage_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"setOnFlowPage\",\n      \"description\": \"Set on flow page state\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0174",
      "type": "logic",
      "name": "Stop Flow Building",
      "description": "Stop flow building process",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "stopBuilding",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"stopBuilding_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"stopBuilding\",\n      \"description\": \"Stop flow building process\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0175",
      "type": "logic",
      "name": "Set Has I/O Flag",
      "description": "Set has input/output flag",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setHasIO",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setHasIO_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"setHasIO\",\n      \"description\": \"Set has input/output flag\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0176",
      "type": "logic",
      "name": "Set Flow Inputs",
      "description": "Set flow inputs",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setInputs",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setInputs_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"setInputs\",\n      \"description\": \"Set flow inputs\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0177",
      "type": "logic",
      "name": "Set Flow Outputs",
      "description": "Set flow outputs",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setOutputs",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setOutputs_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"setOutputs\",\n      \"description\": \"Set flow outputs\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0178",
      "type": "logic",
      "name": "Set Flow Pool",
      "description": "Set flow execution pool",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "setFlowPool",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"setFlowPool_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"setFlowPool\",\n      \"description\": \"Set flow execution pool\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0179",
      "type": "logic",
      "name": "Update Tool Mode",
      "description": "Update node tool mode",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "updateToolMode",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"updateToolMode_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"updateToolMode\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0180",
      "type": "logic",
      "name": "Update Freeze Status",
      "description": "Update freeze status of nodes",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "updateFreezeStatus",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"updateFreezeStatus_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"updateFreezeStatus\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0181",
      "type": "logic",
      "name": "Add Data to Flow Pool",
      "description": "Add vertex build data to flow pool",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "addDataToFlowPool",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"addDataToFlowPool_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_input\",\n      \"on\": {\n        \"VALID\": \"creating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"creating\": {\n      \"entry\": \"addDataToFlowPool\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0182",
      "type": "logic",
      "name": "Get Node Position",
      "description": "Get node position by ID",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "getNodePosition",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"getNodePosition_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"getNodePosition\",\n      \"description\": \"Get node position by ID\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0183",
      "type": "logic",
      "name": "Update Flow Pool",
      "description": "Update flow pool data for node",
      "path": "src/frontend/src/stores/flowStore.ts",
      "category": "Frontend State",
      "function": "updateFlowPool",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"updateFlowPool_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"updateFlowPool\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0184",
      "type": "logic",
      "name": "Build Inactive Vertex Data",
      "description": "Build inactive vertex data structure",
      "path": "src/frontend/src/utils/buildUtils.ts",
      "category": "Frontend Utility",
      "function": "getInactiveVertexData",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"getInactiveVertexData_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"getInactiveVertexData\",\n      \"description\": \"Build inactive vertex data structure\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0185",
      "type": "logic",
      "name": "Log Flow Load Message",
      "description": "Log flow loading messages",
      "path": "src/frontend/src/utils/buildUtils.ts",
      "category": "Frontend Utility",
      "function": "logFlowLoad",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"logFlowLoad_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"logFlowLoad\",\n      \"description\": \"Log flow loading messages\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0186",
      "type": "logic",
      "name": "Update Vertices Order",
      "description": "Update vertices execution order",
      "path": "src/frontend/src/utils/buildUtils.ts",
      "category": "Frontend Utility",
      "function": "updateVerticesOrder",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"updateVerticesOrder_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"updateVerticesOrder\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0187",
      "type": "logic",
      "name": "Build Flow with Fallback",
      "description": "Build flow vertices with streaming/polling fallback",
      "path": "src/frontend/src/utils/buildUtils.ts",
      "category": "Frontend Utility",
      "function": "buildFlowVerticesWithFallback",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"buildFlowVerticesWithFallback_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute buildFlowVerticesWithFallback\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0188",
      "type": "logic",
      "name": "Poll Build Events",
      "description": "Poll for build events from server",
      "path": "src/frontend/src/utils/buildUtils.ts",
      "category": "Frontend Utility",
      "function": "pollBuildEvents",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"pollBuildEvents_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"pollBuildEvents\",\n      \"description\": \"Poll for build events from server\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0189",
      "type": "logic",
      "name": "Check Chat Input Node",
      "description": "Check if nodes contain ChatInput",
      "path": "src/frontend/src/utils/reactflowUtils.ts",
      "category": "Frontend Utility",
      "function": "checkChatInput",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"checkChatInput_statechart\",\n  \"initial\": \"performing_check\",\n  \"context\": {\n    \"target\": \"Item to validate\",\n    \"validation_result\": \"Boolean result\"\n  },\n  \"states\": {\n    \"performing_check\": {\n      \"entry\": \"run_validation\",\n      \"description\": \"Perform validation: checkChatInput\",\n      \"on\": {\n        \"VALID\": \"complete_valid\",\n        \"INVALID\": \"complete_invalid\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"complete_valid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": true\n      }\n    },\n    \"complete_invalid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": false\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0190",
      "type": "logic",
      "name": "Check Webhook Input Node",
      "description": "Check if nodes contain Webhook",
      "path": "src/frontend/src/utils/reactflowUtils.ts",
      "category": "Frontend Utility",
      "function": "checkWebhookInput",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"checkWebhookInput_statechart\",\n  \"initial\": \"performing_check\",\n  \"context\": {\n    \"target\": \"Item to validate\",\n    \"validation_result\": \"Boolean result\"\n  },\n  \"states\": {\n    \"performing_check\": {\n      \"entry\": \"run_validation\",\n      \"description\": \"Perform validation: checkWebhookInput\",\n      \"on\": {\n        \"VALID\": \"complete_valid\",\n        \"INVALID\": \"complete_invalid\",\n        \"ERROR\": \"error_validation\"\n      }\n    },\n    \"complete_valid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": true\n      }\n    },\n    \"complete_invalid\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"valid\": false\n      }\n    },\n    \"error_validation\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_exception\"\n    }\n  }\n}"
    },
    {
      "id": "nl0191",
      "type": "logic",
      "name": "Clean and Validate Edges",
      "description": "Clean and validate edges against nodes",
      "path": "src/frontend/src/utils/reactflowUtils.ts",
      "category": "Frontend Utility",
      "function": "cleanEdges",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"cleanEdges_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"cleanEdges\",\n      \"description\": \"Clean and validate edges against nodes\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0192",
      "type": "logic",
      "name": "Clear Advanced Handles",
      "description": "Clear handles from advanced fields",
      "path": "src/frontend/src/utils/reactflowUtils.ts",
      "category": "Frontend Utility",
      "function": "clearHandlesFromAdvancedFields",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"clearHandlesFromAdvancedFields_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"clearHandlesFromAdvancedFields\",\n      \"description\": \"Clear handles from advanced fields\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0193",
      "type": "logic",
      "name": "Serialize String",
      "description": "Serialize string with truncation",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_str",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_str_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_str\",\n      \"description\": \"Serialize string with truncation\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0194",
      "type": "logic",
      "name": "Serialize Bytes",
      "description": "Serialize bytes to base64",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_bytes",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_bytes_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_bytes\",\n      \"description\": \"Serialize bytes to base64\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0195",
      "type": "logic",
      "name": "Serialize DateTime",
      "description": "Serialize datetime to ISO format",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_datetime",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_datetime_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_datetime\",\n      \"description\": \"Serialize datetime to ISO format\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0196",
      "type": "logic",
      "name": "Serialize Decimal",
      "description": "Serialize Decimal to float",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_decimal",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_decimal_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_decimal\",\n      \"description\": \"Serialize Decimal to float\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0197",
      "type": "logic",
      "name": "Serialize UUID",
      "description": "Serialize UUID to string",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_uuid",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_uuid_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_uuid\",\n      \"description\": \"Serialize UUID to string\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0198",
      "type": "logic",
      "name": "Serialize Document",
      "description": "Serialize Document object",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_document",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_document_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_document\",\n      \"description\": \"Serialize Document object\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0199",
      "type": "logic",
      "name": "Serialize Iterator",
      "description": "Serialize iterator to placeholder",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_iterator",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_iterator_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_iterator\",\n      \"description\": \"Serialize iterator to placeholder\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0200",
      "type": "logic",
      "name": "Serialize Pydantic Model",
      "description": "Serialize Pydantic v2 model",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_pydantic",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_pydantic_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_pydantic\",\n      \"description\": \"Serialize Pydantic v2 model\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0201",
      "type": "logic",
      "name": "Serialize Pydantic V1",
      "description": "Serialize Pydantic v1 model",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_pydantic_v1",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_pydantic_v1_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_pydantic_v1\",\n      \"description\": \"Serialize Pydantic v1 model\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0202",
      "type": "logic",
      "name": "Serialize Dictionary",
      "description": "Serialize dictionary",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_dict",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_dict_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_dict\",\n      \"description\": \"Serialize dictionary\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0203",
      "type": "logic",
      "name": "Serialize List/Tuple",
      "description": "Serialize list or tuple",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_list_tuple",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_list_tuple_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_list_tuple\",\n      \"description\": \"Serialize list or tuple\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0204",
      "type": "logic",
      "name": "Serialize Primitive",
      "description": "Serialize primitive types",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_primitive",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_primitive_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_primitive\",\n      \"description\": \"Serialize primitive types\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0205",
      "type": "logic",
      "name": "Serialize Instance",
      "description": "Serialize class instance",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_instance",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_instance_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_instance\",\n      \"description\": \"Serialize class instance\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0206",
      "type": "logic",
      "name": "Truncate Value",
      "description": "Truncate value to max length/items",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_truncate_value",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_truncate_value_statechart\",\n  \"initial\": \"preparing_execution\",\n  \"context\": {\n    \"inputs\": \"Execution inputs\",\n    \"result\": \"Execution result\"\n  },\n  \"states\": {\n    \"preparing_execution\": {\n      \"entry\": \"validate_inputs\",\n      \"description\": \"Prepare and validate execution inputs\",\n      \"on\": {\n        \"VALID\": \"executing\",\n        \"INVALID\": \"error_invalid_input\"\n      }\n    },\n    \"executing\": {\n      \"entry\": \"run_execution\",\n      \"description\": \"Execute _truncate_value\",\n      \"on\": {\n        \"SUCCESS\": \"processing_result\",\n        \"ERROR\": \"error_execution\"\n      }\n    },\n    \"processing_result\": {\n      \"entry\": \"process_output\",\n      \"description\": \"Process execution results\",\n      \"on\": {\n        \"PROCESSED\": \"complete\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Execution result\"\n      }\n    },\n    \"error_invalid_input\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_400\"\n    },\n    \"error_execution\": {\n      \"type\": \"final\",\n      \"entry\": \"raise_http_500\"\n    }\n  }\n}"
    },
    {
      "id": "nl0207",
      "type": "logic",
      "name": "Serialize DataFrame",
      "description": "Serialize pandas DataFrame",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_dataframe",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_dataframe_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_dataframe\",\n      \"description\": \"Serialize pandas DataFrame\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0208",
      "type": "logic",
      "name": "Serialize Series",
      "description": "Serialize pandas Series",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_series",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_series_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_series\",\n      \"description\": \"Serialize pandas Series\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0209",
      "type": "logic",
      "name": "Check Numpy Type",
      "description": "Check if object is numpy type",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_is_numpy_type",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_is_numpy_type_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_is_numpy_type\",\n      \"description\": \"Check if object is numpy type\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0210",
      "type": "logic",
      "name": "Serialize Numpy Type",
      "description": "Serialize numpy types",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_numpy_type",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_numpy_type_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"_serialize_numpy_type\",\n      \"description\": \"Serialize numpy types\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0211",
      "type": "logic",
      "name": "Dispatch Serialization",
      "description": "Dispatch serialization based on type",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "_serialize_dispatcher",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"_serialize_dispatcher_statechart\",\n  \"initial\": \"validating\",\n  \"states\": {\n    \"validating\": {\n      \"entry\": \"validate_update\",\n      \"on\": {\n        \"VALID\": \"updating\",\n        \"INVALID\": \"error\"\n      }\n    },\n    \"updating\": {\n      \"entry\": \"_serialize_dispatcher\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\"\n    },\n    \"error\": {\n      \"entry\": \"log_error\",\n      \"type\": \"final\"\n    }\n  }\n}"
    },
    {
      "id": "nl0212",
      "type": "logic",
      "name": "Serialize Object",
      "description": "Main serialization function",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "serialize",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"serialize_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"serialize\",\n      \"description\": \"Main serialization function\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    },
    {
      "id": "nl0213",
      "type": "logic",
      "name": "Serialize or String",
      "description": "Serialize or convert to string",
      "path": "src/backend/base/langbuilder/serialization.py",
      "category": "Backend Utility",
      "function": "serialize_or_str",
      "statechart_definition": "{\n  \"type\": \"statechart\",\n  \"id\": \"serialize_or_str_statechart\",\n  \"initial\": \"processing\",\n  \"context\": {\n    \"input\": \"Function input\",\n    \"output\": \"Function output\"\n  },\n  \"states\": {\n    \"processing\": {\n      \"entry\": \"serialize_or_str\",\n      \"description\": \"Serialize or convert to string\",\n      \"on\": {\n        \"SUCCESS\": \"complete\",\n        \"ERROR\": \"error\"\n      }\n    },\n    \"complete\": {\n      \"type\": \"final\",\n      \"data\": {\n        \"result\": \"Processing result\"\n      }\n    },\n    \"error\": {\n      \"type\": \"final\",\n      \"entry\": \"handle_error\"\n    }\n  }\n}"
    }
  ],
  "edges": [
    {
      "id": "eii0001",
      "type": "composition",
      "source": "ni0004",
      "target": "ni0005",
      "label": "wraps",
      "details": "Root initialization wrapper"
    },
    {
      "id": "eii0002",
      "type": "composition",
      "source": "ni0005",
      "target": "ni0003",
      "label": "wraps",
      "details": "Main application wrapper with error boundary"
    },
    {
      "id": "eii0003",
      "type": "composition",
      "source": "ni0003",
      "target": "ni0007",
      "label": "wraps",
      "details": "Authenticated routes wrapper"
    },
    {
      "id": "eii0004",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0006",
      "label": "wraps",
      "details": "Collection navigation wrapper"
    },
    {
      "id": "eii0005",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0016",
      "label": "wraps",
      "details": "Settings section wrapper"
    },
    {
      "id": "eii0006",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0009",
      "label": "wraps",
      "details": "Flow editor wrapper"
    },
    {
      "id": "eii0007",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0021",
      "label": "wraps",
      "details": "Flow view mode wrapper"
    },
    {
      "id": "eii0008",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0015",
      "label": "wraps",
      "details": "Playground wrapper"
    },
    {
      "id": "eii0009",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0001",
      "label": "wraps",
      "details": "Admin panel wrapper"
    },
    {
      "id": "eii0010",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0008",
      "label": "wraps",
      "details": "Delete account wrapper"
    },
    {
      "id": "eii0011",
      "type": "composition",
      "source": "ni0007",
      "target": "ni0020",
      "label": "wraps",
      "details": "Store marketplace wrapper"
    },
    {
      "id": "eii0014",
      "type": "composition",
      "source": "ni0016",
      "target": "ni0010",
      "label": "contains",
      "details": "General settings outlet"
    },
    {
      "id": "eii0015",
      "type": "composition",
      "source": "ni0016",
      "target": "ni0011",
      "label": "contains",
      "details": "Global variables outlet"
    },
    {
      "id": "eii0016",
      "type": "composition",
      "source": "ni0016",
      "target": "ni0014",
      "label": "contains",
      "details": "MCP servers outlet"
    },
    {
      "id": "eii0017",
      "type": "composition",
      "source": "ni0016",
      "target": "ni0002",
      "label": "contains",
      "details": "API keys outlet"
    },
    {
      "id": "eii0018",
      "type": "composition",
      "source": "ni0016",
      "target": "ni0017",
      "label": "contains",
      "details": "Shortcuts outlet"
    },
    {
      "id": "eii0020",
      "type": "composition",
      "source": "ni0016",
      "target": "ni0019",
      "label": "contains",
      "details": "Store API key outlet"
    },
    {
      "id": "eii0021",
      "type": "composition",
      "source": "ni0005",
      "target": "ni0013",
      "label": "contains",
      "details": "Login page sibling route"
    },
    {
      "id": "eii0022",
      "type": "composition",
      "source": "ni0005",
      "target": "ni0018",
      "label": "contains",
      "details": "Signup page sibling route"
    },
    {
      "id": "eii0024",
      "type": "navigation",
      "source": "ni0013",
      "target": "ni0018",
      "label": "link",
      "details": "Sign up link on login page"
    },
    {
      "id": "eii0026",
      "type": "navigation",
      "source": "ni0018",
      "target": "ni0013",
      "label": "link",
      "details": "Login link on signup page"
    },
    {
      "id": "eii0030",
      "type": "navigation",
      "source": "ni0009",
      "target": "ni0021",
      "label": "toggle",
      "details": "Switch to view mode"
    },
    {
      "id": "eii0031",
      "type": "navigation",
      "source": "ni0009",
      "target": "ni0015",
      "label": "click",
      "details": "Test current flow"
    },
    {
      "id": "eii0032",
      "type": "navigation",
      "source": "ni0021",
      "target": "ni0009",
      "label": "toggle",
      "details": "Switch back to edit mode"
    },
    {
      "id": "eii0035",
      "type": "navigation",
      "source": "ni0016",
      "target": "ni0010",
      "label": "redirect",
      "details": "Default settings page"
    },
    {
      "id": "eii0036",
      "type": "navigation",
      "source": "ni0016",
      "target": "ni0011",
      "label": "click",
      "details": "Navigate to global variables"
    },
    {
      "id": "eii0037",
      "type": "navigation",
      "source": "ni0016",
      "target": "ni0014",
      "label": "click",
      "details": "Navigate to MCP servers"
    },
    {
      "id": "eii0038",
      "type": "navigation",
      "source": "ni0016",
      "target": "ni0002",
      "label": "click",
      "details": "Navigate to API keys"
    },
    {
      "id": "eii0039",
      "type": "navigation",
      "source": "ni0016",
      "target": "ni0017",
      "label": "click",
      "details": "Navigate to shortcuts"
    },
    {
      "id": "eii0041",
      "type": "navigation",
      "source": "ni0016",
      "target": "ni0019",
      "label": "click",
      "details": "Navigate to store settings"
    },
    {
      "id": "eii0042",
      "type": "navigation",
      "source": "ni0010",
      "target": "ni0008",
      "label": "link",
      "details": "Delete account link"
    },
    {
      "id": "eii0043",
      "type": "navigation",
      "source": "ni0020",
      "target": "ni0009",
      "label": "click",
      "details": "Open flow from store"
    },
    {
      "id": "eii0044",
      "type": "navigation",
      "source": "ni0001",
      "target": "ni0013",
      "label": "logout",
      "details": "Admin logout"
    },
    {
      "id": "eii0050",
      "type": "navigation",
      "source": "ni0001",
      "target": "ni0016",
      "label": "navigate",
      "details": "Admin accessing settings"
    },
    {
      "id": "eii0052",
      "type": "navigation",
      "source": "ni0009",
      "target": "ni0020",
      "label": "click",
      "details": "Share flow to store"
    },
    {
      "id": "eii0053",
      "type": "navigation",
      "source": "ni0008",
      "target": "ni0012",
      "label": "navigate",
      "details": "After account deletion, redirect to login"
    },
    {
      "id": "eii0054",
      "type": "navigation",
      "source": "ni0002",
      "target": "ni0010",
      "label": "navigate",
      "details": "Navigate between settings pages"
    },
    {
      "id": "eii0055",
      "type": "navigation",
      "source": "ni0011",
      "target": "ni0010",
      "label": "navigate",
      "details": "Navigate to general settings"
    },
    {
      "id": "eii0056",
      "type": "navigation",
      "source": "ni0014",
      "target": "ni0002",
      "label": "navigate",
      "details": "Navigate to API keys from MCP"
    },
    {
      "id": "ess0001",
      "type": "relationship",
      "source": "ns0001",
      "target": "ns0005",
      "label": "owns",
      "details": "one-to-many (User can have multiple ApiKeys, cascade delete on user deletion)"
    },
    {
      "id": "ess0002",
      "type": "relationship",
      "source": "ns0001",
      "target": "ns0002",
      "label": "owns",
      "details": "one-to-many (User can own multiple Flows)"
    },
    {
      "id": "ess0003",
      "type": "relationship",
      "source": "ns0001",
      "target": "ns0006",
      "label": "owns",
      "details": "one-to-many (User can have multiple Variables/credentials, cascade delete on user deletion)"
    },
    {
      "id": "ess0004",
      "type": "relationship",
      "source": "ns0001",
      "target": "ns0003",
      "label": "owns",
      "details": "one-to-many (User can have multiple Folders, cascade delete on user deletion)"
    },
    {
      "id": "ess0005",
      "type": "relationship",
      "source": "ns0001",
      "target": "ns0007",
      "label": "owns",
      "details": "one-to-many (User can have multiple uploaded Files)"
    },
    {
      "id": "ess0006",
      "type": "relationship",
      "source": "ns0003",
      "target": "ns0002",
      "label": "contains",
      "details": "one-to-many (Folder can contain multiple Flows, cascade delete on folder deletion)"
    },
    {
      "id": "ess0007",
      "type": "relationship",
      "source": "ns0003",
      "target": "ns0003",
      "label": "contains",
      "details": "one-to-many (Folder can have a parent Folder and multiple child Folders, self-referential hierarchy)"
    },
    {
      "id": "ess0008",
      "type": "relationship",
      "source": "ns0002",
      "target": "ns0008",
      "label": "has",
      "details": "one-to-many (Flow can have multiple VertexBuild execution records)"
    },
    {
      "id": "ess0009",
      "type": "relationship",
      "source": "ns0002",
      "target": "ns0009",
      "label": "has",
      "details": "one-to-many (Flow can have multiple Transaction execution records)"
    },
    {
      "id": "ess0010",
      "type": "relationship",
      "source": "ns0002",
      "target": "ns0004",
      "label": "has",
      "details": "one-to-many (Flow can have multiple Messages in conversations)"
    },
    {
      "id": "eis0001",
      "type": "manages",
      "source": "ni0001",
      "target": "ns0001",
      "label": "",
      "details": "CREATE via useAddUser (POST /users/), READ via useGetUsers (GET /users), UPDATE via useUpdateUser (PATCH /users/{id}), DELETE via useDeleteUsers (DELETE /users/{id})"
    },
    {
      "id": "eis0002",
      "type": "manages",
      "source": "ni0009",
      "target": "ns0002",
      "label": "",
      "details": "READ via useGetFlow (GET /flows/{id}), UPDATE via usePatchUpdateFlow (PATCH /flows/{id}), saves flow data including name, description, nodes, edges, viewport"
    },
    {
      "id": "eis0003",
      "type": "manages",
      "source": "ni0002",
      "target": "ns0005",
      "label": "",
      "details": "READ via useGetApiKeysQuery (GET /api_keys/), DELETE via useDeleteApiKey (DELETE /api_keys/{id}), displays API key details in ag-grid table"
    },
    {
      "id": "eis0004",
      "type": "manages",
      "source": "ni0011",
      "target": "ns0006",
      "label": "",
      "details": "READ via useGetGlobalVariables (GET /variables/), CREATE/UPDATE via GlobalVariableModal, DELETE via useDeleteGlobalVariables (DELETE /variables/{id})"
    },
    {
      "id": "eis0005",
      "type": "manages",
      "source": "ni0006",
      "target": "ns0003",
      "label": "",
      "details": "READ from useFolderStore, DELETE via useDeleteFolders (DELETE /projects/{id}), displays folder sidebar navigation"
    },
    {
      "id": "eis0006",
      "type": "views",
      "source": "ni0006",
      "target": "ns0002",
      "label": "",
      "details": "READ flows from useFlowsManagerStore, displays flow collection in folder context, no direct CRUD operations"
    },
    {
      "id": "eis0009",
      "type": "views",
      "source": "ni0015",
      "target": "ns0002",
      "label": "",
      "details": "READ public flows via useGetFlow with public=true (GET /flows/public/{id}), read-only access for playground execution"
    },
    {
      "id": "eis0010",
      "type": "views",
      "source": "ni0021",
      "target": "ns0002",
      "label": "",
      "details": "READ flows for viewing/execution, similar to Playground but for authenticated users"
    },
    {
      "id": "eis0012",
      "type": "views",
      "source": "ni0012",
      "target": "ns0001",
      "label": "",
      "details": "Authenticates user credentials, READ user via login endpoint, no direct user management"
    },
    {
      "id": "eis0013",
      "type": "manages",
      "source": "ni0018",
      "target": "ns0001",
      "label": "",
      "details": "CREATE user via registration endpoint (POST /users/signup or similar), handles new user creation"
    },
    {
      "id": "eis0014",
      "type": "views",
      "source": "ni0013",
      "target": "ns0001",
      "label": "",
      "details": "Authenticates admin user credentials, similar to LoginPage but for admin access"
    },
    {
      "id": "eis0015",
      "type": "views",
      "source": "ni0009",
      "target": "ns0008",
      "label": "",
      "details": "READ via useGetBuildsQuery (GET /api/v1/monitor/builds), displays vertex build status via NodeStatus component, shows build duration and validation results, read-only monitoring"
    },
    {
      "id": "eis0016",
      "type": "views",
      "source": "ni0009",
      "target": "ns0009",
      "label": "",
      "details": "READ via useGetTransactionsQuery (GET /api/v1/monitor/transactions), displays component execution logs via FlowLogsModal, paginated transaction history, read-only monitoring"
    },
    {
      "id": "ell0001",
      "type": "dependency",
      "source": "nl0004",
      "target": "nl0003",
      "label": "",
      "details": "Creates flow using helper for duplicate name handling"
    },
    {
      "id": "ell0002",
      "type": "dependency",
      "source": "nl0004",
      "target": "nl0002",
      "label": "",
      "details": "Saves created flow to filesystem"
    },
    {
      "id": "ell0003",
      "type": "dependency",
      "source": "nl0007",
      "target": "nl0006",
      "label": "",
      "details": "Reads flow from database using helper"
    },
    {
      "id": "ell0004",
      "type": "dependency",
      "source": "nl0008",
      "target": "nl0007",
      "label": "",
      "details": "Reuses read_flow for public flow access"
    },
    {
      "id": "ell0005",
      "type": "dependency",
      "source": "nl0009",
      "target": "nl0006",
      "label": "",
      "details": "Reads flow before updating"
    },
    {
      "id": "ell0006",
      "type": "dependency",
      "source": "nl0009",
      "target": "nl0001",
      "label": "",
      "details": "Verifies filesystem path before update"
    },
    {
      "id": "ell0007",
      "type": "dependency",
      "source": "nl0009",
      "target": "nl0002",
      "label": "",
      "details": "Saves updated flow to filesystem"
    },
    {
      "id": "ell0008",
      "type": "dependency",
      "source": "nl0010",
      "target": "nl0006",
      "label": "",
      "details": "Reads flow before deleting"
    },
    {
      "id": "ell0009",
      "type": "dependency",
      "source": "nl0012",
      "target": "nl0003",
      "label": "",
      "details": "Creates new flow from uploaded file"
    },
    {
      "id": "ell0010",
      "type": "dependency",
      "source": "nl0012",
      "target": "nl0002",
      "label": "",
      "details": "Saves uploaded flow to filesystem"
    },
    {
      "id": "ell0011",
      "type": "dependency",
      "source": "nl0003",
      "target": "nl0001",
      "label": "",
      "details": "Verifies filesystem path for new flow"
    },
    {
      "id": "ell0012",
      "type": "dependency",
      "source": "nl0067",
      "target": "nl0061",
      "label": "",
      "details": "Builds flow before streaming"
    },
    {
      "id": "ell0013",
      "type": "dependency",
      "source": "nl0066",
      "target": "nl0065",
      "label": "",
      "details": "Streams vertex data using helper"
    },
    {
      "id": "ell0014",
      "type": "dependency",
      "source": "nl0123",
      "target": "nl0084",
      "label": "",
      "details": "Creates database engine during initialization"
    },
    {
      "id": "ell0015",
      "type": "dependency",
      "source": "nl0081",
      "target": "nl0084",
      "label": "",
      "details": "Recreates engine when reloading"
    },
    {
      "id": "ell0016",
      "type": "dependency",
      "source": "nl0100",
      "target": "nl0101",
      "label": "",
      "details": "Retries table creation"
    },
    {
      "id": "ell0017",
      "type": "dependency",
      "source": "nl0101",
      "target": "nl0099",
      "label": "",
      "details": "Executes table creation in sync context"
    },
    {
      "id": "ell0018",
      "type": "dependency",
      "source": "nl0095",
      "target": "nl0094",
      "label": "",
      "details": "Executes migrations in thread"
    },
    {
      "id": "ell0019",
      "type": "dependency",
      "source": "nl0092",
      "target": "nl0091",
      "label": "",
      "details": "Checks schema health in sync context"
    },
    {
      "id": "ell0020",
      "type": "dependency",
      "source": "nl0084",
      "target": "nl0083",
      "label": "",
      "details": "Gets connection pool settings"
    },
    {
      "id": "ell0021",
      "type": "dependency",
      "source": "nl0084",
      "target": "nl0086",
      "label": "",
      "details": "Gets driver-specific connection args"
    },
    {
      "id": "ell0022",
      "type": "dependency",
      "source": "nl0104",
      "target": "nl0106",
      "label": "",
      "details": "Generates session key if not provided"
    },
    {
      "id": "ell0023",
      "type": "dependency",
      "source": "nl0106",
      "target": "nl0105",
      "label": "",
      "details": "Builds key from session_id and data"
    },
    {
      "id": "ell0024",
      "type": "dependency",
      "source": "nl0125",
      "target": "nl0126",
      "label": "",
      "details": "Starts service if not already started"
    },
    {
      "id": "ell0025",
      "type": "dependency",
      "source": "nl0126",
      "target": "nl0133",
      "label": "",
      "details": "Creates periodic cleanup task"
    },
    {
      "id": "ell0026",
      "type": "dependency",
      "source": "nl0127",
      "target": "nl0132",
      "label": "",
      "details": "Cleans up each job during shutdown"
    },
    {
      "id": "ell0027",
      "type": "dependency",
      "source": "nl0128",
      "target": "nl0127",
      "label": "",
      "details": "Stops service during teardown"
    },
    {
      "id": "ell0028",
      "type": "dependency",
      "source": "nl0133",
      "target": "nl0134",
      "label": "",
      "details": "Periodically scans for old queues"
    },
    {
      "id": "ell0029",
      "type": "dependency",
      "source": "nl0134",
      "target": "nl0132",
      "label": "",
      "details": "Cleans up queues exceeding grace period"
    },
    {
      "id": "ell0030",
      "type": "dependency",
      "source": "nl0114",
      "target": "nl0118",
      "label": "",
      "details": "Updates existing variable"
    },
    {
      "id": "ell0031",
      "type": "dependency",
      "source": "nl0114",
      "target": "nl0122",
      "label": "",
      "details": "Creates new variable if not exists"
    },
    {
      "id": "ell0032",
      "type": "dependency",
      "source": "nl0143",
      "target": "nl0148",
      "label": "",
      "details": "Initializes start/end components"
    },
    {
      "id": "ell0033",
      "type": "dependency",
      "source": "nl0148",
      "target": "nl0147",
      "label": "",
      "details": "Adds start/end components"
    },
    {
      "id": "ell0034",
      "type": "dependency",
      "source": "nl0147",
      "target": "nl0153",
      "label": "",
      "details": "Attaches component to vertex"
    },
    {
      "id": "ell0035",
      "type": "dependency",
      "source": "nl0150",
      "target": "nl0163",
      "label": "",
      "details": "Parses vertex data during initialization"
    },
    {
      "id": "ell0036",
      "type": "dependency",
      "source": "nl0212",
      "target": "nl0211",
      "label": "",
      "details": "Dispatches to type-specific serialization"
    },
    {
      "id": "ell0037",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0200",
      "label": "",
      "details": "Serializes Pydantic v2 models"
    },
    {
      "id": "ell0038",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0201",
      "label": "",
      "details": "Serializes Pydantic v1 models"
    },
    {
      "id": "ell0039",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0202",
      "label": "",
      "details": "Serializes dictionaries"
    },
    {
      "id": "ell0040",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0203",
      "label": "",
      "details": "Serializes lists/tuples"
    },
    {
      "id": "ell0041",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0204",
      "label": "",
      "details": "Serializes primitive types"
    },
    {
      "id": "ell0042",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0207",
      "label": "",
      "details": "Serializes pandas DataFrames"
    },
    {
      "id": "ell0043",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0208",
      "label": "",
      "details": "Serializes pandas Series"
    },
    {
      "id": "ell0044",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0210",
      "label": "",
      "details": "Serializes numpy types"
    },
    {
      "id": "ell0045",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0198",
      "label": "",
      "details": "Serializes documents"
    },
    {
      "id": "ell0046",
      "type": "dependency",
      "source": "nl0211",
      "target": "nl0199",
      "label": "",
      "details": "Serializes iterators"
    },
    {
      "id": "eil0001",
      "type": "event",
      "source": "ni0009",
      "target": "nl0005",
      "label": "",
      "details": "Page load - fetches current flow data via useGetFlow"
    },
    {
      "id": "eil0002",
      "type": "event",
      "source": "ni0009",
      "target": "nl0009",
      "label": "",
      "details": "Auto-save trigger - debounced save when flow changes via usePatchUpdateFlow"
    },
    {
      "id": "eil0003",
      "type": "event",
      "source": "ni0009",
      "target": "nl0173",
      "label": "",
      "details": "Page mount/unmount - sets flow page active state"
    },
    {
      "id": "eil0004",
      "type": "event",
      "source": "ni0009",
      "target": "nl0174",
      "label": "",
      "details": "Stop build button click - halts flow execution"
    },
    {
      "id": "eil0005",
      "type": "event",
      "source": "ni0009",
      "target": "nl0175",
      "label": "",
      "details": "Flow analysis - detects input/output nodes"
    },
    {
      "id": "eil0006",
      "type": "event",
      "source": "ni0009",
      "target": "nl0176",
      "label": "",
      "details": "Flow load - sets detected input nodes"
    },
    {
      "id": "eil0007",
      "type": "event",
      "source": "ni0009",
      "target": "nl0177",
      "label": "",
      "details": "Flow load - sets detected output nodes"
    },
    {
      "id": "eil0008",
      "type": "event",
      "source": "ni0009",
      "target": "nl0178",
      "label": "",
      "details": "Flow execution - initializes execution pool"
    },
    {
      "id": "eil0009",
      "type": "event",
      "source": "ni0009",
      "target": "nl0179",
      "label": "",
      "details": "Tool mode toggle - switches between selection/edit modes"
    },
    {
      "id": "eil0010",
      "type": "event",
      "source": "ni0009",
      "target": "nl0180",
      "label": "",
      "details": "Freeze toggle - locks/unlocks flow editing"
    },
    {
      "id": "eil0011",
      "type": "event",
      "source": "ni0009",
      "target": "nl0181",
      "label": "",
      "details": "Vertex execution - adds execution results to pool"
    },
    {
      "id": "eil0012",
      "type": "event",
      "source": "ni0009",
      "target": "nl0183",
      "label": "",
      "details": "Flow execution progress - updates pool state"
    },
    {
      "id": "eil0013",
      "type": "event",
      "source": "ni0009",
      "target": "nl0184",
      "label": "",
      "details": "Flow load - builds inactive vertex metadata"
    },
    {
      "id": "eil0014",
      "type": "event",
      "source": "ni0009",
      "target": "nl0185",
      "label": "",
      "details": "Page load - logs flow loading event"
    },
    {
      "id": "eil0015",
      "type": "event",
      "source": "ni0009",
      "target": "nl0186",
      "label": "",
      "details": "Node reorder - updates execution order"
    },
    {
      "id": "eil0016",
      "type": "event",
      "source": "ni0009",
      "target": "nl0187",
      "label": "",
      "details": "Flow execution - builds vertices with error handling"
    },
    {
      "id": "eil0017",
      "type": "event",
      "source": "ni0009",
      "target": "nl0188",
      "label": "",
      "details": "During build - polls for build status updates"
    },
    {
      "id": "eil0018",
      "type": "event",
      "source": "ni0009",
      "target": "nl0189",
      "label": "",
      "details": "Flow validation - checks for chat input node"
    },
    {
      "id": "eil0019",
      "type": "event",
      "source": "ni0009",
      "target": "nl0190",
      "label": "",
      "details": "Flow validation - checks for webhook input node"
    },
    {
      "id": "eil0020",
      "type": "event",
      "source": "ni0009",
      "target": "nl0191",
      "label": "",
      "details": "Edge creation - validates and cleans edge data"
    },
    {
      "id": "eil0021",
      "type": "event",
      "source": "ni0001",
      "target": "nl0018",
      "label": "",
      "details": "Page load, pagination - fetches user list via useGetUsers"
    },
    {
      "id": "eil0022",
      "type": "event",
      "source": "ni0001",
      "target": "nl0016",
      "label": "",
      "details": "New user button + form submit - creates user via useAddUser"
    },
    {
      "id": "eil0023",
      "type": "event",
      "source": "ni0001",
      "target": "nl0019",
      "label": "",
      "details": "Edit user, toggle active/superuser - updates via useUpdateUser"
    },
    {
      "id": "eil0024",
      "type": "event",
      "source": "ni0001",
      "target": "nl0021",
      "label": "",
      "details": "Delete button - removes user via useDeleteUsers"
    },
    {
      "id": "eil0025",
      "type": "event",
      "source": "ni0002",
      "target": "nl0038",
      "label": "",
      "details": "Page load - fetches API keys via useGetApiKeysQuery"
    },
    {
      "id": "eil0026",
      "type": "event",
      "source": "ni0002",
      "target": "nl0040",
      "label": "",
      "details": "Delete button - removes API key via useDeleteApiKey"
    },
    {
      "id": "eil0027",
      "type": "event",
      "source": "ni0011",
      "target": "nl0027",
      "label": "",
      "details": "Page load - fetches variables via useGetGlobalVariables"
    },
    {
      "id": "eil0028",
      "type": "event",
      "source": "ni0011",
      "target": "nl0120",
      "label": "",
      "details": "Delete button - removes variable via useDeleteGlobalVariables"
    },
    {
      "id": "eil0032",
      "type": "event",
      "source": "ni0006",
      "target": "nl0005",
      "label": "",
      "details": "Page load - fetches flows for collection display"
    },
    {
      "id": "eil0033",
      "type": "event",
      "source": "ni0006",
      "target": "nl0046",
      "label": "",
      "details": "Delete folder button - removes folder/project via useDeleteFolders"
    },
    {
      "id": "eil0034",
      "type": "event",
      "source": "ni0015",
      "target": "nl0005",
      "label": "",
      "details": "Page load with flow ID - fetches public flow for execution"
    },
    {
      "id": "eil0035",
      "type": "event",
      "source": "ni0015",
      "target": "nl0167",
      "label": "",
      "details": "Page mount - sets playground page state"
    },
    {
      "id": "eil0036",
      "type": "event",
      "source": "ni0021",
      "target": "nl0005",
      "label": "",
      "details": "Page load with flow ID - fetches flow for viewing/execution"
    },
    {
      "id": "eil0037",
      "type": "event",
      "source": "ni0012",
      "target": "nl0022",
      "label": "",
      "details": "Login button - authenticates user via useLoginUser"
    },
    {
      "id": "eil0038",
      "type": "event",
      "source": "ni0018",
      "target": "nl0016",
      "label": "",
      "details": "Sign up button - creates new user account"
    },
    {
      "id": "eil0039",
      "type": "event",
      "source": "ni0013",
      "target": "nl0022",
      "label": "",
      "details": "Admin login button - authenticates admin user"
    },
    {
      "id": "els0001",
      "type": "event",
      "source": "nl0004",
      "target": "ns0002",
      "label": "",
      "details": "INSERT - Creates new Flow record via session.add() and session.commit(), checks for unique name/endpoint_name"
    },
    {
      "id": "els0002",
      "type": "event",
      "source": "nl0005",
      "target": "ns0002",
      "label": "",
      "details": "SELECT - Queries Flow records with filters (user_id, folder_id, is_component), supports pagination"
    },
    {
      "id": "els0003",
      "type": "event",
      "source": "nl0007",
      "target": "ns0002",
      "label": "",
      "details": "SELECT - Queries single Flow by ID and user_id via session.exec()"
    },
    {
      "id": "els0004",
      "type": "event",
      "source": "nl0009",
      "target": "ns0002",
      "label": "",
      "details": "SELECT, UPDATE - Fetches Flow by ID, updates fields, commits via session.add() and session.commit()"
    },
    {
      "id": "els0005",
      "type": "event",
      "source": "nl0010",
      "target": "ns0002",
      "label": "",
      "details": "SELECT, DELETE - Fetches Flow then deletes via cascade_delete_flow() helper"
    },
    {
      "id": "els0006",
      "type": "event",
      "source": "nl0011",
      "target": "ns0002",
      "label": "",
      "details": "INSERT (batch) - Batch creates multiple Flows via session.add() in loop"
    },
    {
      "id": "els0007",
      "type": "event",
      "source": "nl0048",
      "target": "ns0002",
      "label": "",
      "details": "INSERT (batch) - Creates Flows from uploaded file via _new_flow() helper"
    },
    {
      "id": "els0008",
      "type": "event",
      "source": "nl0013",
      "target": "ns0002",
      "label": "",
      "details": "SELECT, DELETE (batch) - Queries Flows by IDs then cascade deletes each"
    },
    {
      "id": "els0009",
      "type": "event",
      "source": "nl0015",
      "target": "ns0002",
      "label": "",
      "details": "SELECT - Queries all Flows in starter folder"
    },
    {
      "id": "els0010",
      "type": "event",
      "source": "nl0004",
      "target": "ns0003",
      "label": "",
      "details": "SELECT - Queries default Folder if flow.folder_id is None"
    },
    {
      "id": "els0011",
      "type": "event",
      "source": "nl0005",
      "target": "ns0003",
      "label": "",
      "details": "SELECT - Queries default and starter Folders for filtering"
    },
    {
      "id": "els0012",
      "type": "event",
      "source": "nl0009",
      "target": "ns0003",
      "label": "",
      "details": "SELECT - Queries default Folder when updating folder assignment"
    },
    {
      "id": "els0013",
      "type": "event",
      "source": "nl0015",
      "target": "ns0003",
      "label": "",
      "details": "SELECT - Queries starter Folder to get example flows"
    },
    {
      "id": "els0014",
      "type": "event",
      "source": "nl0010",
      "target": "ns0004",
      "label": "",
      "details": "DELETE (cascade) - Deletes all Messages for flow_id via cascade_delete_flow()"
    },
    {
      "id": "els0015",
      "type": "event",
      "source": "nl0010",
      "target": "ns0009",
      "label": "",
      "details": "DELETE (cascade) - Deletes all Transactions for flow_id via cascade_delete_flow()"
    },
    {
      "id": "els0016",
      "type": "event",
      "source": "nl0010",
      "target": "ns0008",
      "label": "",
      "details": "DELETE (cascade) - Deletes all VertexBuilds for flow_id via cascade_delete_flow()"
    },
    {
      "id": "els0017",
      "type": "event",
      "source": "nl0013",
      "target": "ns0004",
      "label": "",
      "details": "DELETE (cascade) - Deletes Messages for each flow via cascade_delete_flow()"
    },
    {
      "id": "els0018",
      "type": "event",
      "source": "nl0013",
      "target": "ns0009",
      "label": "",
      "details": "DELETE (cascade) - Deletes Transactions for each flow via cascade_delete_flow()"
    },
    {
      "id": "els0019",
      "type": "event",
      "source": "nl0013",
      "target": "ns0008",
      "label": "",
      "details": "DELETE (cascade) - Deletes VertexBuilds for each flow via cascade_delete_flow()"
    },
    {
      "id": "els0020",
      "type": "event",
      "source": "nl0016",
      "target": "ns0001",
      "label": "",
      "details": "INSERT - Creates new User via session.add() and session.commit(), handles password hashing"
    },
    {
      "id": "els0021",
      "type": "event",
      "source": "nl0018",
      "target": "ns0001",
      "label": "",
      "details": "SELECT - Queries User records with pagination (offset, limit), includes count query"
    },
    {
      "id": "els0022",
      "type": "event",
      "source": "nl0019",
      "target": "ns0001",
      "label": "",
      "details": "SELECT, UPDATE - Fetches User by ID, updates fields via update_user() CRUD function"
    },
    {
      "id": "els0023",
      "type": "event",
      "source": "nl0020",
      "target": "ns0001",
      "label": "",
      "details": "UPDATE - Updates User password field via session.commit()"
    },
    {
      "id": "els0024",
      "type": "event",
      "source": "nl0021",
      "target": "ns0001",
      "label": "",
      "details": "SELECT, DELETE - Fetches User then deletes via session.delete(), cascades to ApiKey/Variable/Folder"
    },
    {
      "id": "els0025",
      "type": "event",
      "source": "nl0016",
      "target": "ns0003",
      "label": "",
      "details": "SELECT, INSERT - Creates default Folder for new user via get_or_create_default_folder()"
    },
    {
      "id": "els0026",
      "type": "event",
      "source": "nl0122",
      "target": "ns0006",
      "label": "",
      "details": "SELECT, INSERT - Lists existing Variables then creates via variable_service.create_variable()"
    },
    {
      "id": "els0027",
      "type": "event",
      "source": "nl0027",
      "target": "ns0006",
      "label": "",
      "details": "SELECT - Queries all Variables for user_id via variable_service.get_all()"
    },
    {
      "id": "els0028",
      "type": "event",
      "source": "nl0119",
      "target": "ns0006",
      "label": "",
      "details": "SELECT, UPDATE - Fetches Variable by ID and user_id, updates fields via session.add() and commit()"
    },
    {
      "id": "els0029",
      "type": "event",
      "source": "nl0121",
      "target": "ns0006",
      "label": "",
      "details": "SELECT, DELETE - Fetches Variable by ID and user_id, deletes via session.delete()"
    },
    {
      "id": "els0030",
      "type": "event",
      "source": "nl0038",
      "target": "ns0005",
      "label": "",
      "details": "SELECT - Queries all ApiKeys for user_id via get_api_keys() CRUD function"
    },
    {
      "id": "els0031",
      "type": "event",
      "source": "nl0039",
      "target": "ns0005",
      "label": "",
      "details": "INSERT - Creates new ApiKey via session.add() and commit(), generates api_key value"
    },
    {
      "id": "els0032",
      "type": "event",
      "source": "nl0040",
      "target": "ns0005",
      "label": "",
      "details": "SELECT, DELETE - Fetches ApiKey by ID via session.get(), deletes via session.delete()"
    },
    {
      "id": "els0033",
      "type": "event",
      "source": "nl0041",
      "target": "ns0001",
      "label": "",
      "details": "UPDATE - Updates User.store_api_key field via session.add() and commit()"
    },
    {
      "id": "els0034",
      "type": "event",
      "source": "nl0030",
      "target": "ns0002",
      "label": "",
      "details": "SELECT - Queries Flow by ID via session.get() for authorization check"
    },
    {
      "id": "els0035",
      "type": "event",
      "source": "nl0031",
      "target": "ns0002",
      "label": "",
      "details": "SELECT - Queries Flow via get_flow dependency for authorization"
    },
    {
      "id": "els0036",
      "type": "event",
      "source": "nl0036",
      "target": "ns0002",
      "label": "",
      "details": "SELECT - Queries Flow via get_flow dependency for authorization"
    },
    {
      "id": "els0037",
      "type": "event",
      "source": "nl0037",
      "target": "ns0002",
      "label": "",
      "details": "SELECT - Queries Flow via get_flow dependency for authorization"
    }
  ]
}